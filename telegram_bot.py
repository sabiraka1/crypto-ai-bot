import telebot
from profit_chart import generate_profit_chart
from signal_analyzer import analyze_bad_signals
from position_tracker import get_position_status
from train_model import train_model
from grafik_olusturucu import draw_chart
from technical_analysis import generate_signal
from sinyal_skorlayici import evaluate_signal
from data_logger import log_test_trade
from config import BOT_TOKEN, CHAT_ID

bot = telebot.TeleBot(BOT_TOKEN)

# === üü¢ /start –∏ /help
@bot.message_handler(commands=["start", "help"])
def handle_start_help(message):
    bot.send_message(
        CHAT_ID,
        "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/test ‚Äî —Ä—É—á–Ω–æ–π —Ç–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞\n"
        "/train ‚Äî –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
        "/status ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è\n"
        "/profit ‚Äî –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏\n"
        "/errors ‚Äî –æ—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"
    )

# === üß™ /test ‚Äî —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
@bot.message_handler(commands=["test"])
def handle_test(message):
    result = generate_signal()
    score = evaluate_signal(result)
    draw_chart(result)
    log_test_trade(result["signal"], score, result["price"], result["rsi"], result["macd"])

    bot.send_message(CHAT_ID, f"üß™ –°–∏–≥–Ω–∞–ª: {result['signal']}\n"
                              f"üìà RSI: {result['rsi']:.2f}, MACD: {result['macd']:.2f}\n"
                              f"ü§ñ AI –û—Ü–µ–Ω–∫–∞: {score:.2f}")
    with open("charts/latest.png", "rb") as photo:
        bot.send_photo(CHAT_ID, photo)

# === üîÅ /train ‚Äî —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@bot.message_handler(commands=["train"])
def handle_train(message):
    train_model()
    bot.send_message(CHAT_ID, "‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# === üìà /profit ‚Äî –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
@bot.message_handler(commands=["profit"])
def handle_profit(message):
    path = generate_profit_chart()
    if path:
        with open(path, "rb") as photo:
            bot.send_photo(CHAT_ID, photo)
    else:
        bot.send_message(CHAT_ID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# === ‚ÑπÔ∏è /status ‚Äî —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
@bot.message_handler(commands=["status"])
def handle_status(message):
    msg = get_position_status()
    bot.send_message(CHAT_ID, msg)

# === üìâ /errors ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
@bot.message_handler(commands=["errors"])
def handle_errors(message):
    summary, explanations = analyze_bad_signals(limit=5)
    
    if summary is None:
        bot.send_message(CHAT_ID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    stats = "\n".join([f"{k}: {v}" for k, v in summary.items()])
    bot.send_message(CHAT_ID, f"üìâ –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n{stats}")

    if explanations:
        text = "\n\n".join(explanations)
        bot.send_message(CHAT_ID, f"üß† –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫:\n\n{text}")
    else:
        bot.send_message(CHAT_ID, "‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.")

# === –ó–∞–ø—É—Å–∫
def start_telegram_bot():
    print("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
