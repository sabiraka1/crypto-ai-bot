import os
from dotenv import load_dotenv
from telebot import TeleBot

from technical_analysis import generate_signal
from sinyal_skorlayici import evaluate_signal
from grafik_olusturucu import draw_rsi_macd_chart
from data_logger import log_test_trade, get_recent_performance
from profit_chart import generate_profit_chart
from signal_analyzer import analyze_bad_signals
from train_model import retrain_model
from trading_bot import get_position_summary, emergency_close_position

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(BOT_TOKEN)

def handle_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""
    text = message.get("text", "")
    chat_id = message["chat"]["id"]

    if text in ["/start", "/help"]:
        help_message = (
            "ü§ñ <b>Crypto AI Trading Bot</b>\n\n"
            "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "üß™ /test ‚Äî —Ç–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n"
            "üìä /status ‚Äî —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏\n"
            "üí∞ /profit ‚Äî –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏\n"
            "üìà /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "üß† /train ‚Äî –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏\n"
            "‚ùå /errors ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫\n"
            "üö® /close ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚öôÔ∏è /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "üìä <b>–ê–Ω–∞–ª–∏–∑:</b>\n"
            "üìà /chart ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏\n"
            "üïØÔ∏è /patterns ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n"
            "üìâ /market ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞"
        )
        bot.send_message(chat_id, help_message, parse_mode='HTML')

    elif text == "/test":
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            signal_data = generate_signal()
            score = evaluate_signal(signal_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            chart_path = draw_rsi_macd_chart(signal_data)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            log_test_trade(
                signal_data["signal"],
                score,
                signal_data["price"],
                signal_data
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = (
                f"üß™ <b>–¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞</b>\n"
                f"üìä <b>{signal_data['signal']}</b> @ {signal_data['price']:.2f}\n"
                f"ü§ñ AI Score: <b>{score:.3f}</b>\n"
                f"üéØ Confidence: {signal_data['confidence']:.1f}%\n\n"
                f"üìà RSI: {signal_data['rsi']:.1f}\n"
                f"üìâ MACD: {signal_data['macd']:.4f}\n"
                f"üïØÔ∏è Pattern: {signal_data['pattern']} ({signal_data['pattern_score']:.1f})\n"
                f"üìä Direction: {signal_data['pattern_direction']}\n\n"
                f"üéØ Buy Score: {signal_data['buy_score']}/8\n"
                f"üéØ Sell Score: {signal_data['sell_score']}/8\n"
                f"üí∞ Support: {signal_data['support']:.2f}\n"
                f"üí∞ Resistance: {signal_data['resistance']:.2f}"
            )
            
            bot.send_message(chat_id, test_message, parse_mode='HTML')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω
            if chart_path and os.path.exists(chart_path):
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                    
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    elif text == "/status":
        try:
            status = get_position_summary()
            bot.send_message(chat_id, status, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    elif text == "/profit":
        try:
            chart_path, total_profit = generate_profit_chart()
            if chart_path and os.path.exists(chart_path):
                caption = f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit*100:+.2f}%"
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption=caption)
            else:
                bot.send_message(chat_id, "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    elif text == "/stats":
        try:
            perf = get_recent_performance()
            if perf:
                stats_message = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
                    f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {perf['total_trades']}\n"
                    f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {perf['profitable_trades']}\n"
                    f"üéØ Win Rate: <b>{perf['win_rate']}%</b>\n"
                    f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {perf['avg_profit']:+.2f}%\n"
                    f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{perf['total_profit']:+.2f}%</b>\n\n"
                )
                
                if perf['last_trade']:
                    last = perf['last_trade']
                    stats_message += (
                        f"üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:</b>\n"
                        f"üìä {last['signal']}: {last['pnl_percent']:+.2f}%\n"
                        f"‚è∞ {last['close_datetime']}\n"
                        f"üí≠ –ü—Ä–∏—á–∏–Ω–∞: {last['reason']}"
                    )
                
                bot.send_message(chat_id, stats_message, parse_mode='HTML')
            else:
                bot.send_message(chat_id, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    elif text == "/train":
        try:
            bot.send_message(chat_id, "üß† –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏...")
            retrain_model()
            bot.send_message(chat_id, "‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")

    elif text == "/errors":
        try:
            summary, explanations = analyze_bad_signals()
            if summary:
                error_message = "‚ùå <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:</b>\n\n"
                for key, value in summary.items():
                    error_message += f"{key}: {value}\n"
                
                bot.send_message(chat_id, error_message, parse_mode='HTML')
                
                if explanations:
                    details = "\n".join(explanations[:5])
                    bot.send_message(chat_id, f"<b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n{details}", parse_mode='HTML')
            else:
                bot.send_message(chat_id, "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    elif text == "/close":
        try:
            result = emergency_close_position()
            bot.send_message(chat_id, result, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

    elif text == "/chart":
        try:
            signal_data = generate_signal()
            chart_path = draw_rsi_macd_chart(signal_data)
            
            if chart_path and os.path.exists(chart_path):
                caption = (
                    f"üìä –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑\n"
                    f"üìà {signal_data['signal']} @ {signal_data['price']:.2f}\n"
                    f"üïØÔ∏è {signal_data['pattern']}"
                )
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption=caption)
            else:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif text == "/patterns":
        try:
            signal_data = generate_signal()
            
            patterns_message = (
                f"üïØÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</b>\n\n"
                f"üìä Pattern: <b>{signal_data['pattern']}</b>\n"
                f"‚≠ê Score: {signal_data['pattern_score']:.1f}/10\n"
                f"üéØ Direction: {signal_data['pattern_direction']}\n\n"
                f"üìà RSI: {signal_data['rsi']:.1f}\n"
                f"üìâ MACD: {signal_data['macd']:.4f}\n"
                f"üéØ Confidence: {signal_data['confidence']:.1f}%"
            )
            
            bot.send_message(chat_id, patterns_message, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    elif text == "/market":
        try:
            signal_data = generate_signal()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
            rsi = signal_data['rsi']
            if rsi > 70:
                market_state = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω"
            elif rsi < 30:
                market_state = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω"
            else:
                market_state = "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            
            market_message = (
                f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞</b>\n\n"
                f"üí∞ BTC/USDT: <b>{signal_data['price']:.2f}</b>\n"
                f"üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ: {market_state}\n"
                f"üìä RSI: {rsi:.1f}\n"
                f"üìâ MACD: {signal_data['macd']:.4f}\n\n"
                f"üí∞ Support: {signal_data['support']:.2f}\n"
                f"üí∞ Resistance: {signal_data['resistance']:.2f}\n\n"
                f"üéØ Buy Conditions: {signal_data['buy_score']}/8\n"
                f"üéØ Sell Conditions: {signal_data['sell_score']}/8"
            )
            
            bot.send_message(chat_id, market_message, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")

    elif text == "/settings":
        settings_message = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            f"üí∞ –°—É–º–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${os.getenv('TRADE_AMOUNT', '50')}\n"
            f"üéØ Take Profit: 1.5%\n"
            f"üõë Stop Loss: -2.0%\n"
            f"‚è∞ Max Hold: 4 —á–∞—Å–∞\n"
            f"ü§ñ AI Threshold: 0.65\n\n"
            "üìù <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è</i>"
        )
        bot.send_message(chat_id, settings_message, parse_mode='HTML')

    else:
        bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
