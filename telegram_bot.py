import os
import requests
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal
from technical_analysis import generate_signal
from grafik_olusturucu import draw_rsi_macd_chart
from profit_chart import generate_profit_chart  # üìä –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
from data_logger import log_test_trade

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def send_telegram_photo(chat_id, image_path, caption=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    try:
        with open(image_path, 'rb') as photo:
            files = {'photo': photo}
            data = {'chat_id': chat_id}
            if caption:
                data['caption'] = caption
            requests.post(url, data=data, files=files)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram ===
def handle_telegram_command(data):
    print("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data)

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "").strip()

    if not chat_id or not text:
        return

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    if text.lower() in ["/start", "start"]:
        send_telegram_message(chat_id, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    elif text.lower() == "/test":
        result = generate_signal()
        signal = result.get("signal")
        rsi = result.get("rsi")
        macd = result.get("macd")
        price = result.get("price")
        patterns = result.get("patterns", [])

        score = evaluate_signal(result)

        # üíæ –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
        log_test_trade(signal, score, price, rsi, macd)

        caption = (
            f"üß™ –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞\n"
            f"üìä –°–∏–≥–Ω–∞–ª: {signal}\n"
            f"üìâ RSI: {rsi:.2f}, üìà MACD: {macd:.4f}\n"
            f"üìå –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(patterns) if patterns else '–Ω–µ—Ç'}\n"
            f"ü§ñ –û—Ü–µ–Ω–∫–∞ AI: {score:.2f}\n"
            f"üí∞ –¶–µ–Ω–∞: {price:.2f}"
        )

        if score >= 0.7:
            action = "üìà AL" if signal == "BUY" else "üìâ SAT"
            caption += f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {action}"

            image_path = draw_rsi_macd_chart(result)
            if image_path:
                send_telegram_photo(chat_id, image_path, caption)
                return

        send_telegram_message(chat_id, caption)

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ /profit
    elif text.lower() == "/profit":
        image_path = generate_profit_chart()
        if image_path:
            send_telegram_photo(chat_id, image_path, "üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
        else:
            send_telegram_message(chat_id, "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")

    # ‚ùì –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        send_telegram_message(chat_id, f"üì® –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")
