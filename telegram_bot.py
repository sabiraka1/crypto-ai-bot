import os
import telebot
import pandas as pd
import json
from signal_analyzer import analyze_bad_signals
from train_model import train_model

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(commands=["profit"])
def handle_profit(message):
    try:
        df = pd.read_csv("closed_trades.csv")
        if df.empty:
            bot.send_message(message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
            return

        total = df["pnl_percent"].sum()
        count = len(df)
        win_count = len(df[df["pnl_percent"] > 0])
        win_rate = round((win_count / count) * 100, 2)

        response = (
            f"üìà –ü—Ä–∏–±—ã–ª—å –ø–æ {count} —Å–¥–µ–ª–∫–∞–º:\n\n"
            f"üí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total:.2f}%\n"
            f"‚úÖ –ü–æ–±–µ–¥: {win_count} ({win_rate}%)"
        )
        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–∏–±—ã–ª–∏: {e}")

@bot.message_handler(commands=["train"])
def handle_train(message):
    try:
        train_model()
        bot.send_message(message.chat.id, "‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {e}")

@bot.message_handler(commands=["status"])
def handle_status(message):
    try:
        with open("open_position.json", "r") as f:
            pos = json.load(f)

        entry = pos["entry_price"]
        time = pos["timestamp"]
        typ = pos["type"]
        score = pos.get("score", "‚Äî")

        response = (
            f"üìå –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è:\n\n"
            f"–¢–∏–ø: {typ.upper()}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:.2f}\n"
            f"–û—Ç–∫—Ä—ã—Ç–∞: {time}\n"
            f"AI Score: {score}"
        )
        bot.send_message(message.chat.id, response)
    except:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞.")

@bot.message_handler(commands=["errors"])
def handle_errors(message):
    summary, explanations = analyze_bad_signals(limit=5)
    
    if summary is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    stats = "\n".join([f"{k}: {v}" for k, v in summary.items()])
    bot.send_message(message.chat.id, f"üìâ –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n{stats}")

    if explanations:
        text = "\n\n".join(explanations)
        bot.send_message(message.chat.id, f"üß† –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫:\n\n{text}")
    else:
        bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.polling(none_stop=True)
