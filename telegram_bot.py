import os
from dotenv import load_dotenv
from telebot import TeleBot

from technical_analysis import generate_signal
from sinyal_skorlayici import evaluate_signal
from enhanced_smart_risk_manager import EnhancedSmartRiskManager
from enhanced_data_logger import log_test_trade_enhanced, get_enhanced_performance
from grafik_olusturucu import draw_rsi_macd_chart
from profit_chart import generate_profit_chart
from signal_analyzer import analyze_bad_signals, get_signal_performance, recommend_improvements
from train_model import retrain_model
from error_chart import create_error_report

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
risk_manager = EnhancedSmartRiskManager()

def handle_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    text = message.get("text", "")
    chat_id = message["chat"]["id"]

    if text in ["/start", "/help"]:
        help_message = """
ü§ñ <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π Crypto AI Trading Bot v2.0</b>

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üß™ /test ‚Äî —É–º–Ω—ã–π —Ç–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
üìä /status ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
üí∞ /profit ‚Äî –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
üìà /stats ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üåç /market ‚Äî –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:</b>
üß† /train ‚Äî –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏
‚ùå /errors ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
üö® /close ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
üìä /trends ‚Äî –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
üí° /recommendations ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>
üìâ /chart ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
üïØÔ∏è /patterns ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚öôÔ∏è /system ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
üìã /performance ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

üÜï <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2.0:</b>
‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (1D/4H)
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä—ã–Ω–æ–∫
‚Ä¢ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤ MACD
‚Ä¢ –¢–∞–π–º-–∞—É—Ç 1—á –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
‚Ä¢ RSI –∞–Ω–∞–ª–∏–∑ 5 —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
"""
        bot.send_message(chat_id, help_message, parse_mode='HTML')

    elif text == "/test":
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = generate_signal()
            
            # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
            
            # AI –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            ai_score = evaluate_signal(market_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            chart_path = draw_rsi_macd_chart(market_data)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            log_test_trade_enhanced(smart_decision, market_data, ai_score)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ
            test_message = risk_manager.format_enhanced_decision_message(smart_decision, market_data)
            test_message += f"\nü§ñ <b>AI –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b> {ai_score:.3f}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
            if smart_decision.get("action") == "BUY" and smart_decision.get("score", 0) >= 3:
                if ai_score >= 0.6:
                    test_message += "\n‚úÖ <b>–°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!</b>"
                else:
                    test_message += "\n‚ö†Ô∏è <b>–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>"
            
            bot.send_message(chat_id, test_message, parse_mode='HTML')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            if chart_path and os.path.exists(chart_path):
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption="üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
                    
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    elif text == "/status":
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ trading_bot
            from trading_bot import get_position_summary_enhanced
            status = get_position_summary_enhanced()
            bot.send_message(chat_id, status, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    elif text == "/market":
        try:
            # –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            market_data = generate_signal()
            smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
            
            from trading_bot import format_market_analysis_enhanced
            market_analysis = format_market_analysis_enhanced(market_data, smart_decision)
            
            bot.send_message(chat_id, market_analysis, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")

    elif text == "/stats":
        try:
            perf = get_enhanced_performance(days=30)
            if perf and perf['total_trades'] > 0:
                from trading_bot import format_performance_stats
                stats_message = format_performance_stats(perf)
                bot.send_message(chat_id, stats_message, parse_mode='HTML')
            else:
                bot.send_message(chat_id, "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Å–¥–µ–ª–∫–∞)")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    elif text == "/performance":
        try:
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_7d = get_enhanced_performance(days=7)
            perf_30d = get_enhanced_performance(days=30)
            
            message = "üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>\n\n"
            
            if perf_7d and perf_7d['total_trades'] > 0:
                message += f"üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>\n"
                message += f"‚Ä¢ –°–¥–µ–ª–æ–∫: {perf_7d['total_trades']}\n"
                message += f"‚Ä¢ Win Rate: {perf_7d['win_rate']}%\n"
                message += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {perf_7d['total_profit']:+.2f}%\n\n"
            
            if perf_30d and perf_30d['total_trades'] > 0:
                message += f"üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>\n"
                message += f"‚Ä¢ –°–¥–µ–ª–æ–∫: {perf_30d['total_trades']}\n"
                message += f"‚Ä¢ Win Rate: {perf_30d['win_rate']}%\n"
                message += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {perf_30d['total_profit']:+.2f}%\n"
                message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf_30d['avg_hold_time']:.1f}—á\n"
            
            if not (perf_7d and perf_7d['total_trades'] > 0):
                message = "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            
            bot.send_message(chat_id, message, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    elif text == "/trends":
        try:
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
            perf = get_enhanced_performance(days=30)
            
            if perf and 'trend_performance' in perf:
                trend_perf = perf['trend_performance']
                
                message = "üåç <b>–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º —Ä—ã–Ω–∫–∞</b>\n\n"
                
                for trend, data in trend_perf.items():
                    emoji = "üìà" if trend == "BULLISH" else "üìâ"
                    message += f"{emoji} <b>{trend} —Ä—ã–Ω–æ–∫:</b>\n"
                    message += f"‚Ä¢ –°–¥–µ–ª–æ–∫: {data['trades']}\n"
                    message += f"‚Ä¢ Win Rate: {data['win_rate']:.1f}%\n"
                    message += f"‚Ä¢ –°—Ä. –ø—Ä–∏–±—ã–ª—å: {data['avg_profit']:+.2f}%\n\n"
                
                # MACD –∞–Ω–∞–ª–∏–∑
                if 'macd_performance' in perf:
                    macd_perf = perf['macd_performance']
                    message += "üéØ <b>–ê–Ω–∞–ª–∏–∑ –ø–æ MACD —Å–∏–≥–Ω–∞–ª–∞–º:</b>\n"
                    
                    if 'high_macd' in macd_perf:
                        data = macd_perf['high_macd']
                        message += f"üî• –°–∏–ª—å–Ω—ã–µ MACD (‚â•2 –±–∞–ª–ª–∞): {data['win_rate']:.1f}% ({data['trades']} —Å–¥–µ–ª–æ–∫)\n"
                    
                    if 'low_macd' in macd_perf:
                        data = macd_perf['low_macd']
                        message += f"üî∏ –°–ª–∞–±—ã–µ MACD (<2 –±–∞–ª–ª–∞): {data['win_rate']:.1f}% ({data['trades']} —Å–¥–µ–ª–æ–∫)\n"
                
                bot.send_message(chat_id, message, parse_mode='HTML')
            else:
                bot.send_message(chat_id, "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    elif text == "/system":
        try:
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            trend_analysis = risk_manager.get_cached_trend_analysis()
            
            message = f"""
‚öôÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v2.0</b>

üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ Confidence: ‚â•{risk_manager.CONFIDENCE_THRESHOLD}%
‚Ä¢ –ú–∏–Ω. –±–∞–ª–ª: ‚â•{risk_manager.MIN_SCORE_FOR_TRADE}
‚Ä¢ RSI –∑–∞–∫—Ä—ã—Ç–∏–µ: {risk_manager.RSI_CONSECUTIVE_LIMIT} —Å–≤–µ—á–µ–π >70
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π RSI: >{risk_manager.RSI_EXTREME_OVERBOUGHT}
‚Ä¢ –¢–∞–π–º-–∞—É—Ç: {risk_manager.TRADE_TIMEOUT_HOURS}—á

üåç <b>–¢–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫:</b>
‚Ä¢ –¢—Ä–µ–Ω–¥ 1D: {trend_analysis.get('trend_1d', 'Unknown')}
‚Ä¢ –¢—Ä–µ–Ω–¥ 4H: {trend_analysis.get('trend_4h', 'Unknown')}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {trend_analysis.get('market_state', 'Normal')}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {trend_analysis.get('price_change_24h', 0)*100:+.1f}%

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –°—É–º–º–∞: ${os.getenv('TRADE_AMOUNT', 50)}
‚Ä¢ Take Profit: {risk_manager.BASE_TAKE_PROFIT*100:.1f}%
‚Ä¢ Stop Loss: {risk_manager.BASE_STOP_LOSS*100:.1f}%
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {risk_manager.MAX_HOLD_HOURS}—á

‚è∞ <b>–¢–∞–π–º-–∞—É—Ç:</b>
"""
            
            if risk_manager.check_trade_timeout():
                message += "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"
            else:
                message += "‚è≥ –ê–∫—Ç–∏–≤–µ–Ω (–æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏)"
            
            bot.send_message(chat_id, message, parse_mode='HTML')
            
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

    elif text == "/recommendations":
        try:
            recommendations = recommend_improvements()
            
            message = "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            for i, rec in enumerate(recommendations, 1):
                message += f"{i}. {rec}\n"
            
            bot.send_message(chat_id, message, parse_mode='HTML')
            
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

    elif text == "/profit":
        try:
            chart_path, total_profit = generate_profit_chart()
            if chart_path and os.path.exists(chart_path):
                caption = f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit*100:+.2f}%"
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption=caption)
            else:
                bot.send_message(chat_id, "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    elif text == "/train":
        try:
            bot.send_message(chat_id, "üß† –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏...")
            retrain_model()
            bot.send_message(chat_id, "‚úÖ AI –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –ø–æ–¥ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É!")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")

    elif text == "/errors":
        try:
            summary, explanations = analyze_bad_signals()
            if summary:
                error_message = "‚ùå <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n\n"
                for key, value in summary.items():
                    error_message += f"‚Ä¢ {key}: {value}\n"
                
                bot.send_message(chat_id, error_message, parse_mode='HTML')
                
                if explanations:
                    details = "\n".join(explanations[:5])
                    bot.send_message(chat_id, f"<b>–î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫:</b>\n{details}", parse_mode='HTML')
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –æ—à–∏–±–æ–∫
                try:
                    error_charts = create_error_report()
                    for chart_path in error_charts:
                        if os.path.exists(chart_path):
                            with open(chart_path, "rb") as img:
                                bot.send_photo(chat_id, img)
                except:
                    pass
                    
            else:
                bot.send_message(chat_id, "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    elif text == "/close":
        try:
            from trading_bot import emergency_close_position_enhanced
            result = emergency_close_position_enhanced()
            bot.send_message(chat_id, result, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

    elif text == "/chart":
        try:
            market_data = generate_signal()
            chart_path = draw_rsi_macd_chart(market_data)
            
            if chart_path and os.path.exists(chart_path):
                smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
                
                caption = f"""
üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</b>
üéØ –†–µ—à–µ–Ω–∏–µ: {smart_decision.get('action', 'WAIT')}
üìà –ë–∞–ª–ª: {smart_decision.get('score', 0):.1f}
üïØÔ∏è Pattern: {market_data.get('pattern', 'NONE')}
"""
                with open(chart_path, "rb") as img:
                    bot.send_photo(chat_id, img, caption=caption, parse_mode='HTML')
            else:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif text == "/patterns":
        try:
            market_data = generate_signal()
            smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
            
            patterns_message = f"""
üïØÔ∏è <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</b>

üìä <b>–¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{market_data.get('pattern', 'NONE')}</b>
‚Ä¢ –ë–∞–ª–ª: {market_data.get('pattern_score', 0):.1f}/10
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {market_data.get('pattern_direction', 'NEUTRAL')}

üéØ <b>–í–∫–ª–∞–¥ –≤ —Ä–µ—à–µ–Ω–∏–µ:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã: {smart_decision.get('score', 0):.1f}
‚Ä¢ MACD –≤–∫–ª–∞–¥: {smart_decision.get('macd_contribution', 0):.1f}

üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ RSI: {market_data.get('rsi', 0):.1f}
‚Ä¢ MACD: {market_data.get('macd', 0):.4f}
‚Ä¢ Confidence: {market_data.get('confidence', 0):.1f}%

üí° <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>
"""
            
            pattern_score = market_data.get('pattern_score', 0)
            if pattern_score >= 6:
                patterns_message += "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω\n"
            elif pattern_score >= 4:
                patterns_message += "üëç –•–æ—Ä–æ—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω\n"
            elif pattern_score >= 2:
                patterns_message += "üî∏ –°–ª–∞–±—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω\n"
            else:
                patterns_message += "‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            reasons = smart_decision.get('reasons', [])
            if reasons:
                patterns_message += f"\nüìã <b>–ü—Ä–∏—á–∏–Ω—ã —Ä–µ—à–µ–Ω–∏—è:</b>\n"
                for reason in reasons[:3]:
                    patterns_message += f"‚Ä¢ {reason}\n"
            
            bot.send_message(chat_id, patterns_message, parse_mode='HTML')
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    else:
        bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.")
