import os
import telebot
from signal_analyzer import analyze_bad_signals
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=["start", "help"])
def handle_start(message):
    bot.send_message(message.chat.id, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                      "/errors ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                                      "/profit ‚Äî —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å\n"
                                      "/train ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å AI\n"
                                      "/status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏")

@bot.message_handler(commands=["errors"])
def handle_errors(message):
    summary, explanations = analyze_bad_signals(limit=5)
    
    if summary is None:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = "\n".join([f"{k}: {v}" for k, v in summary.items()])
    bot.send_message(message.chat.id, f"üìâ –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n{stats}")

    # === –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–≤–∞–ª–∞
    if explanations:
        text = "\n\n".join(explanations)
        bot.send_message(message.chat.id, f"üß† –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫:\n\n{text}")
    else:
        bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.")

@bot.message_handler(commands=["profit"])
def handle_profit(message):
    try:
        with open("closed_trades.csv", "r") as f:
            lines = f.readlines()[1:]  # skip header
        total_pnl = 0
        for line in lines:
            pnl = float(line.strip().split(",")[2])  # pnl_percent
            total_pnl += pnl
        bot.send_message(message.chat.id, f"üí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_pnl:.2f}% –ø–æ {len(lines)} —Å–¥–µ–ª–∫–∞–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

@bot.message_handler(commands=["train"])
def handle_train(message):
    from train_model import train_model
    bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–æ–±—É—á–∞—é AI –º–æ–¥–µ–ª—å...")
    try:
        train_model()
        bot.send_message(message.chat.id, "‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")

@bot.message_handler(commands=["status"])
def handle_status(message):
    import json
    import os
    from datetime import datetime

    file = "open_position.json"
    if not os.path.exists(file):
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    with open(file, "r") as f:
        pos = json.load(f)

    ts = datetime.fromisoformat(pos['timestamp'])
    msg = (
        f"üìå –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:\n"
        f"–¢–∏–ø: {pos['type'].upper()}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']}\n"
        f"–í—Ä–µ–º—è: {ts.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–û–±—ä—ë–º: {pos['amount']}\n"
        f"–û—Ü–µ–Ω–∫–∞ AI: {pos.get('score', 'N/A')}"
    )
    bot.send_message(message.chat.id, msg)

def send_telegram_message(chat_id, text):
    try:
        bot.send_message(chat_id, text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

def run_bot():
    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
