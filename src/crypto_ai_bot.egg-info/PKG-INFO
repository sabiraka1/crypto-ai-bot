Metadata-Version: 2.4
Name: crypto-ai-bot
Version: 0.1.0
Summary: Production-ready ASGI trading bot (Gate.io via CCXT), long-only, paper/live parity, protective exits, reconciliation, observability
Author: Sabir Sahbaz
License: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi<1.0,>=0.115
Requires-Dist: uvicorn[standard]<0.31,>=0.30
Requires-Dist: gunicorn<22,>=21.2
Requires-Dist: httpx<0.28,>=0.27
Requires-Dist: ccxt<5,>=4.2
Requires-Dist: prometheus-client<0.21,>=0.20
Requires-Dist: pydantic<3,>=2.7
Requires-Dist: requests<3,>=2.31
Provides-Extra: charts
Requires-Dist: matplotlib<3.10,>=3.8; extra == "charts"
Provides-Extra: backtest
Requires-Dist: numpy<2.0,>=1.26; extra == "backtest"
Requires-Dist: pandas<3.0,>=2.2; extra == "backtest"
Provides-Extra: dev
Requires-Dist: pytest<9,>=8.2; extra == "dev"
Requires-Dist: pytest-asyncio<1,>=0.23; extra == "dev"
Requires-Dist: pytest-mock<4,>=3.12; extra == "dev"
Requires-Dist: coverage<8,>=7.4; extra == "dev"
Requires-Dist: ruff<0.7,>=0.6; extra == "dev"
Requires-Dist: pre-commit<4,>=3.6; extra == "dev"
Requires-Dist: mypy<2,>=1.8; extra == "dev"
Requires-Dist: import-linter<3,>=2.0; extra == "dev"
Requires-Dist: black<25,>=24.0; extra == "dev"
Requires-Dist: isort<6,>=5.13; extra == "dev"

crypto-ai-bot



Автотрейдинг криптовалют (Gate.io через CCXT) с единой логикой для paper и live:

strategies → regime filter → risk/limits → execute\_trade → protective\_exits → reconcile → watchdog → settlement.



Чистая архитектура: строгие границы app / core (application → domain → infrastructure) / utils и контроль импортов.

Безопасность по умолчанию: идемпотентность, лимиты риска, защитные выходы, DMS/InstanceLock, throttle брокера.

Наблюдаемость: Prometheus-метрики, health/ready, Telegram (алерты и команды), интеграция Alertmanager.

Восстановление: сверки и доведение частичных исполнений (settlement) с записью в БД.



📦 Установка и запуск



1\) Окружение



python -m venv .venv

\# Windows

.\\.venv\\Scripts\\Activate.ps1

\# Linux/macOS

source .venv/bin/activate



pip install -U pip wheel

pip install -e .





2\) Конфигурация



Скопируйте .env.example → .env и задайте переменные.

Секреты поддерживаются в форматах: NAME\_FILE (путь к файлу), NAME\_B64 (base64), или единый SECRETS\_FILE (JSON).



3\) API (локально)



uvicorn crypto\_ai\_bot.app.server:app --host 0.0.0.0 --port 8000





4\) CLI (сервисные команды)



\# Быстрый smoke-чек

cab-smoke



\# БД: бэкап/ротация/вакуум/интегрити/список

cab-maintenance backup

cab-maintenance rotate --days 30

cab-maintenance vacuum

cab-maintenance integrity

cab-maintenance list



\# Сверки (балансы/позиции)

cab-reconcile



\# Мониторинг health (когда API запущен)

cab-health-monitor --oneshot --url http://127.0.0.1:8000/health



\# Отчёт по сделкам/PNL (FIFO) за сегодня

cab-perf



🔌 HTTP-эндпоинты



GET /health — текущее состояние (БД/шина/биржа).



GET /ready — готовность (200/503).



GET /metrics — Prometheus.



GET /orchestrator/status?symbol=BTC/USDT — состояние оркестратора.



POST /orchestrator/(start|stop|pause|resume)?symbol=... — управление (Bearer API\_TOKEN).



GET /pnl/today?symbol=... — PnL за сегодня (FIFO) + оборот и счетчик ордеров. Источник истины: storage.trades (daily\_pnl\_quote, daily\_turnover\_quote, count\_orders\_today), без запасных обходов.



🤖 Telegram (многоуровневая интеграция)



Разделение обязанностей (без дублей):



app/telegram.py — publisher: только исходящие алерты (ретраи, HTML, дедуп/антишторм).



app/telegram\_bot.py — operator bot: только входящие команды (whitelist/roles).



app/telegram\_alerts.py — подписчик EventBus → Telegram (в т.ч. Alertmanager вебхуки).



Команды бота (основные):

/status, /today, /pnl, /position, /balance, /limits, /pause, /resume, /stop, /health.



Alertmanager → /alertmanager/webhook → EventBus → app/telegram\_alerts.py → Telegram.

Если TELEGRAM\_\* не заданы — интеграции работают в no-op (безопасно).



🧱 Архитектура и правила слоёв



Слои и зависимости



app/ — HTTP API (FastAPI), DI/compose, Telegram адаптеры/подписчики.

Может импортировать: core.application, core.infrastructure, utils.



core/application/ — оркестрация, use-cases, protective exits, reconciliation, monitoring, реестр тем событий.

Может импортировать: core.domain, utils. Не может: app, core.infrastructure.



core/domain/ — чистые бизнес-правила (risk, стратегии, сигналы, режимы).

Может импортировать: utils. Не может: app, core.application, core.infrastructure.



core/infrastructure/ — брокеры (CCXT/Paper), шина (Redis/in-mem), storage (SQLite+миграции), safety (DMS/lock), settings.

Может импортировать: utils. Не может: app, core.application, core.domain.



utils/ — общие утилиты (Decimal, логи, метрики, retry, http, pnl, trace, symbols).



Контроль слоёв: importlinter.ini (CI падает при нарушении).



Инварианты (валидация при старте)



RiskManager не публикует события и не ходит во внешние системы; он только возвращает (ok, reason\[, extra]). Публикация RISK\_\* событий — в orchestrator/use-cases.



Баланс брокера: контракт BrokerPort.fetch\_balance(symbol) -> dict\[str, Decimal] c ключами free\_base, free\_quote (никаких DTO).



InstanceLock: захватывается на старте, освобождается при shutdown (graceful).



MTF weights: 15m=0.40, 1h=0.25, 4h=0.20, 1d=0.10, 1w=0.05 (сумма = 1.0).



Fusion weights: technical=0.65, ai=0.35 (сумма = 1.0).



Settings читаются только через core/infrastructure/settings.py.



Деньги — только Decimal (utils.decimal.dec()).



Асинхронщина без time.sleep (только asyncio.sleep).



Темы событий — только константы core/application/events\_topics.py (никаких «магических строк»).



EventBus auto-detect: EVENT\_BUS\_URL c redis://… → RedisEventBus, пусто → AsyncEventBus (in-memory).



🗂️ Актуальная файловая структура



Важно: папка ops/prometheus/ (Prometheus/Alertmanager/Grafana) уже развернута на Railway и из репозитория исключена — мы оставили только обработчик вебхука Alertmanager в приложении. Это снижает шум в репо и поддерживает «инфру как внешний сервис».



crypto-ai-bot/

├─ README.md

├─ pyproject.toml

├─ requirements\*.txt

├─ Makefile

├─ Procfile

├─ .gitignore

├─ pytest.ini

├─ importlinter.ini

├─ scripts/

│  ├─ backup\_db.py

│  ├─ rotate\_backups.py

│  ├─ integrity\_check.py

│  ├─ run\_server.sh

│  └─ run\_server.ps1

└─ src/crypto\_ai\_bot/

&nbsp;  ├─ app/

&nbsp;  │  ├─ server.py                 # 🌐 FastAPI (health/metrics/pnl/orchestrator/telegram webhook)

&nbsp;  │  ├─ compose.py                # 🔌 DI-компоновка (broker/storage/bus/health/lock/оркестраторы)

&nbsp;  │  ├─ logging\_bootstrap.py      # 🧾 Инициализация структурного логирования

&nbsp;  │  ├─ http\_dxy.py               # 🌍 DXY HTTP-источник (change\_pct)

&nbsp;  │  ├─ http\_btc\_dominance.py     # 🌍 BTC Dominance HTTP-источник (change\_pct)

&nbsp;  │  ├─ http\_fomc.py              # 🌍 FOMC HTTP-источник (event\_today)

&nbsp;  │  ├─ telegram.py               # 📣 Telegram publisher (исходящие алерты)

&nbsp;  │  ├─ telegram\_bot.py           # 🤖 Telegram bot (входящие команды /status|/pause|/resume)

&nbsp;  │  └─ telegram\_alerts.py        # 🔔 Alertmanager→EventBus→Telegram (маршрутизация алертов)

&nbsp;  ├─ cli/

&nbsp;  │  ├─ smoke.py

&nbsp;  │  ├─ maintenance.py

&nbsp;  │  ├─ reconcile.py

&nbsp;  │  ├─ performance.py

&nbsp;  │  └─ health\_monitor.py

&nbsp;  ├─ core/

&nbsp;  │  ├─ application/

&nbsp;  │  │  ├─ orchestrator.py

&nbsp;  │  │  ├─ ports.py

&nbsp;  │  │  ├─ events\_topics.py       # ← единый реестр событий

&nbsp;  │  │  ├─ protective\_exits.py

&nbsp;  │  │  ├─ use\_cases/

&nbsp;  │  │  │  ├─ eval\_and\_execute.py

&nbsp;  │  │  │  ├─ execute\_trade.py    # ← единственная точка размещения ордеров

&nbsp;  │  │  │  └─ partial\_fills.py    # settlement/доведение частичных

&nbsp;  │  │  ├─ reconciliation/

&nbsp;  │  │  │  ├─ orders.py

&nbsp;  │  │  │  ├─ positions.py

&nbsp;  │  │  │  └─ balances.py

&nbsp;  │  │  ├─ regime/

&nbsp;  │  │  │  └─ gated\_broker.py

&nbsp;  │  │  └─ monitoring/

&nbsp;  │  │     └─ health\_checker.py

&nbsp;  │  ├─ domain/

&nbsp;  │  │  ├─ risk/

&nbsp;  │  │  │  ├─ manager.py

&nbsp;  │  │  │  └─ rules/

&nbsp;  │  │  │     ├─ loss\_streak.py

&nbsp;  │  │  │     ├─ max\_drawdown.py

&nbsp;  │  │  │     ├─ max\_orders\_5m.py

&nbsp;  │  │  │     ├─ max\_turnover\_5m.py

&nbsp;  │  │  │     ├─ cooldown.py

&nbsp;  │  │  │     ├─ daily\_loss.py

&nbsp;  │  │  │     ├─ spread\_cap.py

&nbsp;  │  │  │     └─ correlation\_manager.py

&nbsp;  │  │  ├─ strategies/ ...        # (EMA/RSI/Bollinger/ATR/…)

&nbsp;  │  │  ├─ signals/

&nbsp;  │  │  │  ├─ timeframes.py

&nbsp;  │  │  │  ├─ fusion.py

&nbsp;  │  │  │  ├─ ai\_model.py

&nbsp;  │  │  │  ├─ ai\_scoring.py

&nbsp;  │  │  │  └─ feature\_pipeline.py

&nbsp;  │  │  └─ macro/

&nbsp;  │  │     ├─ regime\_detector.py

&nbsp;  │  │     └─ types.py

&nbsp;  │  └─ infrastructure/

&nbsp;  │     ├─ settings.py

&nbsp;  │     ├─ settings\_schema.py

&nbsp;  │     ├─ brokers/

&nbsp;  │     │  ├─ base.py

&nbsp;  │     │  ├─ factory.py

&nbsp;  │     │  ├─ ccxt\_adapter.py

&nbsp;  │     │  ├─ live.py

&nbsp;  │     │  └─ paper.py

&nbsp;  │     ├─ events/

&nbsp;  │     │  ├─ bus.py

&nbsp;  │     │  ├─ bus\_adapter.py

&nbsp;  │     │  └─ redis\_bus.py

&nbsp;  │     ├─ safety/

&nbsp;  │     │  ├─ dead\_mans\_switch.py

&nbsp;  │     │  └─ instance\_lock.py

&nbsp;  │     ├─ storage/

&nbsp;  │     │  ├─ facade.py

&nbsp;  │     │  ├─ sqlite\_adapter.py

&nbsp;  │     │  ├─ backup.py

&nbsp;  │     │  └─ migrations/

&nbsp;  │     │     ├─ runner.py

&nbsp;  │     │     ├─ V0001\_\_init.sql

&nbsp;  │     │     ├─ V0006\_\_trades\_indexes.sql

&nbsp;  │     │     ├─ V0007\_\_idempotency\_unique\_and\_ts.sql

&nbsp;  │     │     ├─ V0008\_\_positions\_idx.sql

&nbsp;  │     │     ├─ V0009\_\_trades\_unique\_ids.sql

&nbsp;  │     │     ├─ V0010\_\_audit\_ts\_idx.sql

&nbsp;  │     │     └─ V0012\_\_orders\_table.sql

&nbsp;  └─ utils/

&nbsp;     ├─ decimal.py

&nbsp;     ├─ pnl.py

&nbsp;     ├─ metrics.py

&nbsp;     ├─ logging.py

&nbsp;     ├─ retry.py

&nbsp;     ├─ http\_client.py

&nbsp;     ├─ symbols.py

&nbsp;     ├─ time.py

&nbsp;     └─ trace.py





Примечание: place\_order.py исторически существовал как мостик — теперь вся постановка ордеров идёт через execute\_trade.py. Если нет внешних импортов на place\_order.py, файл можно убрать.



🔄 Торговый конвейер (сигнальный пайплайн)



Multi-Timeframe Analysis (signals/timeframes.py)

15m=40% · 1h=25% · 4h=20% · 1d=10% · 1w=5% (инвариант, фиксируется в settings\_schema.py)



Signal Fusion (signals/fusion.py)

Technical=65% · AI=35% (инвариант)



Strategy Aggregation (strategies/strategy\_manager.py)

first | vote | weighted



Regime Filtering (application/regime/gated\_broker.py)

Источники: DXY, BTC dominance, FOMC. risk\_off блокирует новые входы/сужает объём.



Risk Management (domain/risk/)

LossStreak, MaxDrawdown, MaxOrders5m, MaxTurnover5m, Cooldown, DailyLoss, SpreadCap, Anti-Correlation.



Execute (use\_cases/execute\_trade.py) — единая точка исполнения + идемпотентность.

Protective Exits (protective\_exits.py) — hard/trailing стопы.

Reconcile (reconciliation/\*) — позиции/балансы.

Watchdog (monitoring/health\_checker.py) — health/DMS.

Settlement (use\_cases/partial\_fills.py) — доведение частично исполненных ордеров.



🛡️ Безопасность по умолчанию



Идемпотентность: client\_order\_id + idempotency-репозиторий (TTL).



Бюджеты: дневные лимиты количества ордеров и оборота (quote).



Анти-бёрст: лимиты на 5 минут (orders/turnover).



Cooldown: минимальный интервал между сделками.



SpreadCap: запрет сделок при завышенном спрэде.



DailyLoss: стоп по дневному реализованному убытку (quote).



Anti-Correlation: запрет одновременных позиций в высоко-коррелированных группах.



Throttle брокера: BROKER\_RATE\_RPS/BURST.



DMS: защищённая распродажа при зависаниях.



Секреты: только через \*\_FILE/\*\_B64/SECRETS\_FILE.



⚙️ ENV (основные)



Торговля



MODE=paper|live

EXCHANGE=gateio

SYMBOLS=BTC/USDT,ETH/USDT

FIXED\_AMOUNT=50

PRICE\_FEED=fixed

FIXED\_PRICE=100





MTF / Fusion (инварианты: сумма = 1.0)



MTF\_W\_M15=0.40

MTF\_W\_H1=0.25

MTF\_W\_H4=0.20

MTF\_W\_D1=0.10

MTF\_W\_W1=0.05



FUSION\_W\_TECHNICAL=0.65

FUSION\_W\_AI=0.35





Risk \& Safety



RISK\_COOLDOWN\_SEC=60

RISK\_MAX\_SPREAD\_PCT=0.30

RISK\_MAX\_SLIPPAGE\_PCT=0.10

RISK\_DAILY\_LOSS\_LIMIT\_QUOTE=100



RISK\_MAX\_ORDERS\_5M=0

RISK\_MAX\_TURNOVER\_5M\_QUOTE=0

SAFETY\_MAX\_ORDERS\_PER\_DAY=7

SAFETY\_MAX\_TURNOVER\_QUOTE\_PER\_DAY=5000





Regime



REGIME\_ENABLED=1

REGIME\_DXY\_URL=...

REGIME\_BTC\_DOM\_URL=...

REGIME\_FOMC\_URL=...

REGIME\_DXY\_LIMIT\_PCT=0.35

REGIME\_BTC\_DOM\_LIMIT\_PCT=0.60

REGIME\_FOMC\_BLOCK\_HOURS=8





Telegram



TELEGRAM\_ENABLED=1

TELEGRAM\_BOT\_TOKEN=...

TELEGRAM\_CHAT\_ID=...

TELEGRAM\_ALERTS\_CHAT\_ID=...

TELEGRAM\_BOT\_COMMANDS\_ENABLED=1

TELEGRAM\_ALLOWED\_USERS=123,456





Инфраструктура



EVENT\_BUS\_URL=redis://redis:6379/0   # пусто = in-memory

DB\_PATH=./data/trader-gateio-BTCUSDT-paper.sqlite3

API\_TOKEN=...           # для HTTP управления

API\_KEY=...             # Gate.io live

API\_SECRET=...



🧪 Тестирование и мониторинг



CLI: cab-smoke, cab-health-monitor, cab-perf, cab-reconcile.



Prometheus: /metrics + Alertmanager → Telegram (через app/telegram\_alerts.py).



Health/Ready: чёткие статусы для оркестратора и зависимостей.



🔎 Контроль качества (что проверяем регулярно)



Бизнес-цикл: цепочка evaluate → risk → execute\_trade → protective\_exits → reconcile → watchdog → settlement согласована.



PnL/FIFO/fees: верный учёт комиссий (fee\_quote), консистентность /pnl/today.



Risk: LossStreak, MaxDrawdown, лимиты 5m/day — срабатывают и логируются.



Graceful shutdown: корректно закрываются orchestrator, EventBus, CCXT-клиент, InstanceLock освобождается.



Интеграции: Gate.io (CCXT), Redis, SQLite, Alertmanager→Telegram, Telegram-бот.



Мультисимвольность: поддержка SYMBOLS во всех узлах (orchestrator/PnL/reconciler).



Наблюдаемость: метрики и health-чеки соответствуют описанию.



Prod-готовность: Railway манифест/секреты/переменные, бэкапы БД и восстановление.



CI: ruff + mypy + pytest + import-linter (включая правила по обработке исключений: ruff BLE, TRY).



🚀 Деплой на Railway



Procfile



web: uvicorn crypto\_ai\_bot.app.server:app --host 0.0.0.0 --port $PORT

worker: python -m crypto\_ai\_bot.cli.health\_monitor --daemon





Интеграции: Railway (приложение), Redis (шина событий), Prometheus/Alertmanager/Grafana (внешние, вебхук в приложение), SQLite (WAL) + бэкапы/ротация.



Примечания по чистке артефактов



Когда все импорты переведены на execute\_trade, файл-мостик place\_order.py можно удалить.



Ранее хранившийся в репо ops/prometheus/ удалён, т.к. мониторинг развёрнут как внешний сервис на Railway (конфиги держим там).

