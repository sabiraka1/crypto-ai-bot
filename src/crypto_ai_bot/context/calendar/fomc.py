# fomc.py - FOMC events tracker
"""
üìÖ FOMC Events Tracker - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å crypto_ai_bot:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ embargo windows
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏—è–º–∏
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ score fusion (—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏—è–º–∏)
"""

from __future__ import annotations
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class FOMCEventType(Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π FOMC"""
    RATE_DECISION = "rate_decision"          # –†–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–≤–∫–µ
    PRESS_CONFERENCE = "press_conference"     # –ü—Ä–µ—Å—Å-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è Powell
    MINUTES_RELEASE = "minutes_release"       # –í—ã—Ö–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    SPEECH = "speech"                        # –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è —á–ª–µ–Ω–æ–≤ –§–†–°
    BEIGE_BOOK = "beige_book"               # –ë–µ–∂–µ–≤–∞—è –∫–Ω–∏–≥–∞
    ECONOMIC_PROJECTIONS = "economic_projections"  # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã


@dataclass
class FOMCEvent:
    """–°–æ–±—ã—Ç–∏–µ FOMC"""
    datetime: datetime
    event_type: FOMCEventType
    title: str
    description: str
    impact_level: str = "HIGH"  # LOW, MEDIUM, HIGH, CRITICAL
    speaker: Optional[str] = None
    expected_rate: Optional[float] = None
    previous_rate: Optional[float] = None
    
    def time_until_event(self, timestamp: Optional[datetime] = None) -> float:
        """–ú–∏–Ω—É—Ç—ã –¥–æ —Å–æ–±—ã—Ç–∏—è"""
        now = timestamp or datetime.now(timezone.utc)
        return (self.datetime - now).total_seconds() / 60.0
    
    def is_upcoming(self, hours_ahead: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ N —á–∞—Å–æ–≤"""
        return 0 <= self.time_until_event() <= hours_ahead * 60


class FOMCTracker:
    """
    –¢—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π FOMC —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å + –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ embargo windows
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏—è–º–∏
    - –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
    """
    
    def __init__(self, settings: Optional[Any] = None, embargo_manager=None, notifier=None):
        self.settings = settings
        self.embargo_manager = embargo_manager
        self.notifier = notifier
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_fomc_tracking = getattr(settings, "ENABLE_FOMC_TRACKING", True)
        self.notification_hours_ahead = getattr(settings, "FOMC_NOTIFICATION_HOURS", [24, 4, 1])
        self.impact_score_reduction = getattr(settings, "FOMC_SCORE_REDUCTION", 0.15)
        
        # –°–æ–±—ã—Ç–∏—è
        self.events: List[FOMCEvent] = []
        self.notified_events: set = set()  # –ò–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        self._load_fomc_calendar_2025()
        
        logger.info(f"üìÖ FOMC Tracker initialized: {len(self.events)} events loaded")
    
    # === –û—Å–Ω–æ–≤–Ω–æ–π API ===
    def get_next_event(self, event_types: Optional[List[FOMCEventType]] = None) -> Optional[FOMCEvent]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ FOMC"""
        now = datetime.now(timezone.utc)
        upcoming = [e for e in self.events if e.datetime > now]
        
        if event_types:
            upcoming = [e for e in upcoming if e.event_type in event_types]
            
        return min(upcoming, key=lambda x: x.datetime) if upcoming else None
    
    def get_upcoming_events(self, hours_ahead: int = 48) -> List[FOMCEvent]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ N —á–∞—Å–æ–≤"""
        return [e for e in self.events if e.is_upcoming(hours_ahead)]
    
    def is_fomc_impact_period(self, timestamp: Optional[datetime] = None,
                             hours_before: int = 4, hours_after: int = 2) -> Tuple[bool, Optional[FOMCEvent]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤–ª–∏—è–Ω–∏—è FOMC –Ω–∞ —Ä—ã–Ω–∫–∏
        
        Returns:
            (is_impact_period, closest_event)
        """
        now = timestamp or datetime.now(timezone.utc)
        
        for event in self.events:
            start_impact = event.datetime - timedelta(hours=hours_before)
            end_impact = event.datetime + timedelta(hours=hours_after)
            
            if start_impact <= now <= end_impact:
                return True, event
                
        return False, None
    
    def get_score_adjustment(self, base_score: float, 
                           timestamp: Optional[datetime] = None) -> Tuple[float, str]:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∫–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ FOMC —Å–æ–±—ã—Ç–∏—è–º–∏
        
        Returns:
            (adjusted_score, reason)
        """
        is_impact, event = self.is_fomc_impact_period(timestamp)
        
        if not is_impact or not event:
            return base_score, "no_fomc_impact"
            
        # –°–Ω–∏–∂–∞–µ–º score –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è
        impact_multipliers = {
            "LOW": 0.95,
            "MEDIUM": 0.90,
            "HIGH": 0.85,
            "CRITICAL": 0.75
        }
        
        multiplier = impact_multipliers.get(event.impact_level, 0.85)
        adjusted = base_score * multiplier
        
        reason = f"fomc_{event.event_type.value}_{event.impact_level.lower()}"
        
        logger.info(f"üìÖ FOMC score adjustment: {base_score:.3f} ‚Üí {adjusted:.3f} ({reason})")
        return adjusted, reason
    
    # === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π ===
    def process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
        if not self.notifier:
            return
            
        for hours in self.notification_hours_ahead:
            upcoming = [e for e in self.events 
                       if 0 <= e.time_until_event() <= hours * 60 + 5]  # +5 –º–∏–Ω –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            
            for event in upcoming:
                event_key = f"{event.datetime.isoformat()}_{hours}h"
                
                if event_key not in self.notified_events:
                    self._send_fomc_notification(event, hours)
                    self.notified_events.add(event_key)
    
    def schedule_embargo_windows(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        if not self.embargo_manager:
            return
            
        high_impact_events = [e for e in self.events 
                             if e.event_type in [FOMCEventType.RATE_DECISION, 
                                               FOMCEventType.PRESS_CONFERENCE]]
        
        for event in high_impact_events:
            if event.time_until_event() > 0:  # –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                self.embargo_manager.schedule_fomc_embargo(
                    event.datetime, 
                    f"{event.title} ({event.impact_level})"
                )
    
    # === –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ===
    def _load_fomc_calendar_2025(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞—Ç FOMC –Ω–∞ 2025 –≥–æ–¥"""
        # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∑–∞—Å–µ–¥–∞–Ω–∏–π FOMC 2025
        fomc_meetings_2025 = [
            # –§–æ—Ä–º–∞—Ç: (–¥–∞—Ç–∞, –≤—Ä–µ–º—è_—É—Çc, –æ–∂–∏–¥–∞–µ–º–∞—è_—Å—Ç–∞–≤–∫–∞)
            ("2025-01-29", "19:00", None),  # –Ø–Ω–≤–∞—Ä—å
            ("2025-03-19", "19:00", None),  # –ú–∞—Ä—Ç  
            ("2025-04-30", "19:00", None),  # –ê–ø—Ä–µ–ª—å
            ("2025-06-11", "19:00", None),  # –ò—é–Ω—å
            ("2025-07-30", "19:00", None),  # –ò—é–ª—å
            ("2025-09-17", "19:00", None),  # –°–µ–Ω—Ç—è–±—Ä—å
            ("2025-11-05", "19:00", None),  # –ù–æ—è–±—Ä—å
            ("2025-12-17", "19:00", None),  # –î–µ–∫–∞–±—Ä—å
        ]
        
        for date_str, time_str, expected_rate in fomc_meetings_2025:
            dt = datetime.fromisoformat(f"{date_str}T{time_str}+00:00")
            
            # –†–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–≤–∫–µ
            self.events.append(FOMCEvent(
                datetime=dt,
                event_type=FOMCEventType.RATE_DECISION,
                title=f"FOMC Rate Decision - {dt.strftime('%B %Y')}",
                description="Federal Reserve interest rate decision",
                impact_level="CRITICAL",
                expected_rate=expected_rate
            ))
            
            # –ü—Ä–µ—Å—Å-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (—Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö)
            if dt.month in [1, 3, 6, 9, 12]:  # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –∑–∞—Å–µ–¥–∞–Ω–∏—è
                self.events.append(FOMCEvent(
                    datetime=dt + timedelta(minutes=30),
                    event_type=FOMCEventType.PRESS_CONFERENCE,
                    title=f"Powell Press Conference - {dt.strftime('%B %Y')}",
                    description="Federal Reserve Chair press conference",
                    impact_level="HIGH",
                    speaker="Jerome Powell"
                ))
        
        # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –∑–∞—Å–µ–¥–∞–Ω–∏–π (–≤—ã—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ 3 –Ω–µ–¥–µ–ª–∏)
        for event in self.events:
            if event.event_type == FOMCEventType.RATE_DECISION:
                minutes_date = event.datetime + timedelta(weeks=3)
                self.events.append(FOMCEvent(
                    datetime=minutes_date.replace(hour=19, minute=0),  # 2PM ET
                    event_type=FOMCEventType.MINUTES_RELEASE,
                    title=f"FOMC Minutes - {event.datetime.strftime('%B %Y')}",
                    description="Federal Reserve meeting minutes release",
                    impact_level="MEDIUM"
                ))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.events.sort(key=lambda x: x.datetime)
    
    def add_custom_event(self, datetime: datetime, event_type: FOMCEventType,
                        title: str, impact_level: str = "MEDIUM"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        event = FOMCEvent(
            datetime=datetime,
            event_type=event_type,
            title=title,
            description=f"Custom {event_type.value}",
            impact_level=impact_level
        )
        
        self.events.append(event)
        self.events.sort(key=lambda x: x.datetime)
        logger.info(f"üìÖ Added custom FOMC event: {title}")
    
    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
    def _send_fomc_notification(self, event: FOMCEvent, hours_ahead: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"""
        try:
            time_str = event.datetime.strftime("%Y-%m-%d %H:%M UTC")
            message = (
                f"üìÖ FOMC Alert ({hours_ahead}h ahead)\n"
                f"Event: {event.title}\n"
                f"Time: {time_str}\n"
                f"Impact: {event.impact_level}\n"
                f"Type: {event.event_type.value.replace('_', ' ').title()}"
            )
            
            if event.speaker:
                message += f"\nSpeaker: {event.speaker}"
                
            self.notifier(message)
            logger.info(f"üìÖ FOMC notification sent: {event.title}")
            
        except Exception as e:
            logger.error(f"‚ùå FOMC notification failed: {e}")
    
    def get_status_summary(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        next_event = self.get_next_event()
        upcoming = self.get_upcoming_events(48)
        is_impact, impact_event = self.is_fomc_impact_period()
        
        return {
            "total_events": len(self.events),
            "next_event": {
                "title": next_event.title if next_event else None,
                "datetime": next_event.datetime.isoformat() if next_event else None,
                "hours_until": next_event.time_until_event() / 60 if next_event else None
            },
            "upcoming_48h": len(upcoming),
            "impact_period": {
                "active": is_impact,
                "event": impact_event.title if impact_event else None
            },
            "settings": {
                "tracking_enabled": self.enable_fomc_tracking,
                "notification_hours": self.notification_hours_ahead
            }
        }


# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Score Fusion ===
def integrate_with_score_fusion():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π scoring
    """
    # –í score_fusion.py –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    
    def apply_fomc_adjustment(rule_score: float, ai_score: float, 
                             fomc_tracker) -> Tuple[float, float, str]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ FOMC –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∫ —Å–∫–æ—Ä–∞–º"""
        rule_adj, reason1 = fomc_tracker.get_score_adjustment(rule_score)
        ai_adj, reason2 = fomc_tracker.get_score_adjustment(ai_score) 
        
        reason = f"fomc_adjustment:{reason1}" if reason1 != "no_fomc_impact" else "no_fomc_adjustment"
        return rule_adj, ai_adj, reason


__all__ = ["FOMCTracker", "FOMCEvent", "FOMCEventType"]