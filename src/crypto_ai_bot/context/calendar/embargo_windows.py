# embargo_windows.py - –°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
"""
üö´ Trading Embargo Windows - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SignalValidator –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å TradingBot —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ Settings
"""

from __future__ import annotations
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Tuple, Any
from enum import Enum
from dataclasses import dataclass

logger = logging.getLogger(__name__)


class EmbargoReason(Enum):
    """–ü—Ä–∏—á–∏–Ω—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —ç–º–±–∞—Ä–≥–æ"""
    FOMC_MEETING = "fomc_meeting"
    ECONOMIC_DATA = "economic_data"
    LOW_LIQUIDITY = "low_liquidity"
    HIGH_VOLATILITY = "high_volatility"
    EXCHANGE_MAINTENANCE = "exchange_maintenance"
    MANUAL_OVERRIDE = "manual_override"
    WEEKEND = "weekend"
    HOLIDAY = "holiday"


@dataclass
class EmbargoWindow:
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    start: datetime
    end: datetime
    reason: EmbargoReason
    description: str
    severity: str = "BLOCK"  # BLOCK, WARN, REDUCE_SIZE
    affected_symbols: Optional[List[str]] = None  # None = –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
    
    def is_active(self, timestamp: Optional[datetime] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        now = timestamp or datetime.now(timezone.utc)
        return self.start <= now <= self.end
    
    def time_until_start(self, timestamp: Optional[datetime] = None) -> float:
        """–ú–∏–Ω—É—Ç—ã –¥–æ –Ω–∞—á–∞–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        now = timestamp or datetime.now(timezone.utc)
        return (self.start - now).total_seconds() / 60.0
    
    def time_until_end(self, timestamp: Optional[datetime] = None) -> float:
        """–ú–∏–Ω—É—Ç—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        now = timestamp or datetime.now(timezone.utc)
        return (self.end - now).total_seconds() / 60.0


class EmbargoManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
    - –í _validate_time_windows() SignalValidator
    - –í TradingBot._tick() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    - –í PositionManager –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    """
    
    def __init__(self, settings: Optional[Any] = None):
        self.settings = settings
        self.active_embargos: List[EmbargoWindow] = []
        self.scheduled_embargos: List[EmbargoWindow] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Settings
        self.enable_fomc_embargo = getattr(settings, "ENABLE_FOMC_EMBARGO", True)
        self.enable_weekend_embargo = getattr(settings, "DISABLE_WEEKEND_TRADING", False)
        self.fomc_embargo_minutes = getattr(settings, "FOMC_EMBARGO_MINUTES", 30)
        self.high_volatility_threshold = getattr(settings, "HIGH_VOLATILITY_EMBARGO_THRESHOLD", 8.0)
        
        logger.info(f"üö´ EmbargoManager initialized: FOMC={self.enable_fomc_embargo}")
    
    # === –û—Å–Ω–æ–≤–Ω–æ–π API ===
    def check_embargo_status(self, symbol: str = "BTC/USDT", 
                           timestamp: Optional[datetime] = None) -> Tuple[bool, List[str]]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
        Returns:
            (is_embargoed, reasons) - –º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∏ –ø—Ä–∏—á–∏–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        """
        now = timestamp or datetime.now(timezone.utc)
        reasons = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        for embargo in self.active_embargos:
            if embargo.is_active(now):
                if not embargo.affected_symbols or symbol in embargo.affected_symbols:
                    if embargo.severity == "BLOCK":
                        reasons.append(f"{embargo.reason.value}: {embargo.description}")
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        weekend_reason = self._check_weekend_embargo(now)
        if weekend_reason:
            reasons.append(weekend_reason)
            
        return len(reasons) > 0, reasons
    
    def get_next_embargo(self, symbol: str = "BTC/USDT") -> Optional[EmbargoWindow]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –±–ª–∏–∂–∞–π—à–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ"""
        now = datetime.now(timezone.utc)
        upcoming = [e for e in self.scheduled_embargos 
                   if e.start > now and (not e.affected_symbols or symbol in e.affected_symbols)]
        return min(upcoming, key=lambda x: x.start) if upcoming else None
    
    # === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FOMC ===
    def schedule_fomc_embargo(self, fomc_datetime: datetime, description: str = "FOMC Meeting"):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ —Å–æ–±—ã—Ç–∏–π FOMC"""
        if not self.enable_fomc_embargo:
            return
            
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∏ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ
        start = fomc_datetime - timedelta(minutes=self.fomc_embargo_minutes)
        end = fomc_datetime + timedelta(minutes=15)
        
        embargo = EmbargoWindow(
            start=start,
            end=end,
            reason=EmbargoReason.FOMC_MEETING,
            description=description,
            severity="BLOCK"
        )
        
        self.scheduled_embargos.append(embargo)
        logger.info(f"üìÖ FOMC embargo scheduled: {start} - {end}")
    
    # === –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ===
    def trigger_volatility_embargo(self, atr_pct: float, duration_minutes: int = 15):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if atr_pct < self.high_volatility_threshold:
            return
            
        now = datetime.now(timezone.utc)
        embargo = EmbargoWindow(
            start=now,
            end=now + timedelta(minutes=duration_minutes),
            reason=EmbargoReason.HIGH_VOLATILITY,
            description=f"High volatility: ATR {atr_pct:.2f}%",
            severity="BLOCK"
        )
        
        self.active_embargos.append(embargo)
        logger.warning(f"üå™Ô∏è Volatility embargo triggered: ATR {atr_pct:.2f}%")
    
    def add_manual_embargo(self, minutes: int, reason: str):
        """–†—É—á–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        now = datetime.now(timezone.utc)
        embargo = EmbargoWindow(
            start=now,
            end=now + timedelta(minutes=minutes),
            reason=EmbargoReason.MANUAL_OVERRIDE,
            description=f"Manual: {reason}",
            severity="BLOCK"
        )
        
        self.active_embargos.append(embargo)
        logger.warning(f"‚úã Manual embargo: {minutes}min - {reason}")
    
    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===
    def _check_weekend_embargo(self, timestamp: datetime) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π"""
        if not self.enable_weekend_embargo:
            return None
            
        if timestamp.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return f"weekend_trading_disabled: {timestamp.strftime('%A')}"
        return None
    
    def cleanup_expired_embargos(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        now = datetime.now(timezone.utc)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
        self.active_embargos = [e for e in self.active_embargos if e.end > now]
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞—á–∞–≤—à–∏–µ—Å—è –∏–∑ scheduled –≤ active
        started = [e for e in self.scheduled_embargos if e.start <= now <= e.end]
        self.active_embargos.extend(started)
        self.scheduled_embargos = [e for e in self.scheduled_embargos if e.start > now]
    
    def get_status_summary(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        now = datetime.now(timezone.utc)
        return {
            "active_embargos": len(self.active_embargos),
            "scheduled_embargos": len(self.scheduled_embargos),
            "next_embargo": self.get_next_embargo(),
            "settings": {
                "fomc_enabled": self.enable_fomc_embargo,
                "weekend_disabled": self.enable_weekend_embargo,
                "volatility_threshold": self.high_volatility_threshold
            }
        }


# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SignalValidator ===
def integrate_with_signal_validator():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º SignalValidator
    """
    # –í signal_validator.py –¥–æ–±–∞–≤–∏—Ç—å:
    
    def _validate_embargo_windows(cfg, embargo_manager) -> List[str]:
        reasons = []
        try:
            symbol = getattr(cfg, "SYMBOL", "BTC/USDT")
            is_embargoed, embargo_reasons = embargo_manager.check_embargo_status(symbol)
            
            if is_embargoed:
                reasons.extend([f"embargo:{r}" for r in embargo_reasons])
                logger.warning(f"üö´ Trading embargoed: {embargo_reasons}")
                
        except Exception as e:
            logger.error(f"‚ùå Embargo check failed: {e}")
            
        return reasons


# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TradingBot ===
def integrate_with_trading_bot():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TradingBot
    """
    # –í TradingBot.__init__ –¥–æ–±–∞–≤–∏—Ç—å:
    # self.embargo_manager = EmbargoManager(self.cfg)
    
    # –í TradingBot._tick() –≤ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–∏—Ç—å:
    def _check_embargo_before_trading(self):
        is_embargoed, reasons = self.embargo_manager.check_embargo_status(self.cfg.SYMBOL)
        if is_embargoed:
            self._notify(f"üö´ Trading embargoed: {', '.join(reasons)}")
            return False
        return True


__all__ = ["EmbargoManager", "EmbargoWindow", "EmbargoReason"]