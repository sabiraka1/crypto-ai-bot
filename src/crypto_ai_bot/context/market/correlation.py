# -*- coding: utf-8 -*-
"""
–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ —Å BTC.
–ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API: —Å—á–∏—Ç–∞–µ–º –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–≤–µ—á–∞–º —á–µ—Ä–µ–∑ ExchangeClient.get_ohlcv().
–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ü–∏—Ä—Å–æ–Ω –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π (pct_change), —É—Å–µ—á—ë–Ω–Ω—É—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–∫–Ω–∞.
"""

from __future__ import annotations

import logging
from typing import Optional, Tuple

import numpy as np
import pandas as pd

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï

def _ohlcv_to_series_close(ohlcv) -> pd.Series:
    """CCXT-—Å–æ–≤–º–µ—Å—Ç–Ω—ã–π OHLCV -> Series(close) —Å –∏–Ω–¥–µ–∫—Å–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC)."""
    if not ohlcv:
        return pd.Series(dtype=float)
    df = pd.DataFrame(
        ohlcv, columns=["time", "open", "high", "low", "close", "volume"]
    )
    df["time"] = pd.to_datetime(df["time"], unit="ms", utc=True)
    df.set_index("time", inplace=True)
    s = pd.to_numeric(df["close"], errors="coerce").dropna()
    return s

def _align_last_window(a: pd.Series, b: pd.Series, window: Optional[int]) -> Tuple[pd.Series, pd.Series]:
    """–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –æ–±—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö window —Ç–æ—á–µ–∫."""
    if a.empty or b.empty:
        return a, b
    joined = pd.concat([a, b], axis=1, join="inner").dropna()
    if joined.empty:
        return a.iloc[0:0], b.iloc[0:0]
    if window and len(joined) > window:
        joined = joined.iloc[-window:]
    a2 = joined.iloc[:, 0]
    b2 = joined.iloc[:, 1]
    return a2, b2

def _to_returns(s: pd.Series) -> pd.Series:
    """–ü—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏). –£–¥–∞–ª—è–µ–º NaN/inf."""
    if s.empty:
        return s
    r = s.pct_change()
    r = r.replace([np.inf, -np.inf], np.nan).dropna()
    return r

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò

def compute_correlation(a: pd.Series, b: pd.Series, window: Optional[int] = 96) -> Optional[float]:
    """
    –ü–∏—Ä—Å–æ–Ω –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–≤—É—Ö —Ü–µ–Ω–æ–≤—ã—Ö —Ä—è–¥–æ–≤.
    window: —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –±–µ—Ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 96 –¥–ª—è ~—Å—É—Ç–æ–∫ –Ω–∞ 15m).
    """
    try:
        if a is None or b is None:
            return None
        a_ret = _to_returns(a)
        b_ret = _to_returns(b)
        a_al, b_al = _align_last_window(a_ret, b_ret, window)

        if len(a_al) < 10 or len(b_al) < 10:
            return None

        corr = float(np.corrcoef(a_al.values, b_al.values)[0, 1])
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
        return max(-1.0, min(1.0, corr))
    except Exception as e:
        logger.error(f"‚ùå compute_correlation failed: {e}", exc_info=True)
        return None


def compute_symbol_btc_corr(
    exchange,  # –æ–∂–∏–¥–∞–µ—Ç—Å—è crypto_ai_bot.trading.exchange_client.ExchangeClient
    symbol: str,
    timeframe: str = "15m",
    limit: int = 200,
    btc_symbol: str = "BTC/USDT",
    window: int = 96,
) -> Optional[float]:
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ —Å BTC –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—è–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç exchange.get_ohlcv(). –ù–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    try:
        # 1) –°–≤–µ—á–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
        ohlcv_sym = exchange.get_ohlcv(symbol, timeframe=timeframe, limit=limit)
        close_sym = _ohlcv_to_series_close(ohlcv_sym)

        # 2) –°–≤–µ—á–∏ –ø–æ BTC
        ohlcv_btc = exchange.get_ohlcv(btc_symbol, timeframe=timeframe, limit=limit)
        close_btc = _ohlcv_to_series_close(ohlcv_btc)

        # 3) –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        corr = compute_correlation(close_sym, close_btc, window=window)
        logger.debug(
            f"üîó corr({symbol} ~ {btc_symbol}, tf={timeframe}, window={window}) -> {corr}"
        )
        return corr
    except Exception as e:
        logger.error(f"‚ùå compute_symbol_btc_corr failed: {e}", exc_info=True)
        return None


def classify_corr(value: Optional[float]) -> str:
    """
    –ì—Ä—É–±–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã —Å–≤—è–∑–∏ —Å BTC.
    """
    if value is None:
        return "unknown"
    v = float(value)
    if v >= 0.75:
        return "strong_pos"
    if v >= 0.4:
        return "moderate_pos"
    if v > -0.4:
        return "weak"
    if v > -0.75:
        return "moderate_neg"
    return "strong_neg"


__all__ = [
    "compute_correlation",
    "compute_symbol_btc_corr",
    "classify_corr",
]
