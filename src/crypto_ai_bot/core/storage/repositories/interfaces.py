from __future__ import annotations
from typing import Protocol, runtime_checkable, Any, Dict, List, Tuple, Optional

@runtime_checkable
class IdempotencyRepository(Protocol):
    def claim(self, key: str, payload: Dict[str, Any], ttl_seconds: int = 300) -> Tuple[bool, Optional[Dict[str, Any]]]: ...
    def commit(self, key: str, result: Dict[str, Any]) -> None: ...
    def release(self, key: str) -> None: ...
    def get_original(self, key: str) -> Optional[Dict[str, Any]]: ...

@runtime_checkable
class TradeRepository(Protocol):
    def insert(self, trade: Dict[str, Any]) -> None: ...
    def list_by_symbol(self, symbol: str, limit: int) -> List[Dict[str, Any]]: ...
    def get_stats(self, symbol: str, period: str) -> Dict[str, Any]: ...

@runtime_checkable
class PositionRepository(Protocol):
    def upsert(self, position: Dict[str, Any]) -> None: ...
    def get_open(self) -> List[Dict[str, Any]]: ...
    def get_by_id(self, pos_id: str) -> Optional[Dict[str, Any]]: ...

@runtime_checkable
class AuditRepository(Protocol):
    def append(self, event: Dict[str, Any]) -> None: ...
