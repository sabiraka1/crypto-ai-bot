from __future__ import annotations
from typing import Protocol, Optional, Dict, Any, List
from decimal import Decimal

class UnitOfWork(Protocol):
    def begin(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class PositionRepository(Protocol):
    def get_by_symbol(self, symbol: str) -> Optional[Dict[str, Any]]: ...
    def get_open(self) -> List[Dict[str, Any]]: ...
    def save(self, symbol: str, size: Decimal, avg_price: Decimal) -> None: ...
    def close_all(self, symbol: str) -> Dict[str, Any]: ...

class TradeRepository(Protocol):
    def insert(self, trade: Dict[str, Any]) -> None: ...
    def list_by_symbol(self, symbol: str, limit: int = 50) -> List[Dict[str, Any]]: ...

class AuditRepository(Protocol):
    def log(self, event_type: str, payload: Dict[str, Any]) -> None: ...
    def list_recent(self, limit: int = 100) -> List[Dict[str, Any]]: ...

class IdempotencyRepository(Protocol):
    def claim(self, key: str) -> bool: ...
    def commit(self, key: str, result: Dict[str, Any]) -> None: ...
    def release(self, key: str) -> None: ...
