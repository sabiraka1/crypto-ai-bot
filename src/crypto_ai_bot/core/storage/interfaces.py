from __future__ import annotations
from typing import Protocol, runtime_checkable, Iterable, Optional, Any, Dict
from decimal import Decimal

@runtime_checkable
class UnitOfWork(Protocol):
    def __enter__(self) -> "UnitOfWork": ...
    def __exit__(self, exc_type, exc, tb) -> None: ...

@runtime_checkable
class TradeRepository(Protocol):
    def insert(self, trade: Any) -> None: ...
    def list_recent(self, limit: int) -> Iterable[Any]: ...
    def list_by_symbol(self, symbol: str, limit: int) -> Iterable[Any]: ...
    # optional: list_since(ts: int), list_between(start_ts: int, end_ts: int)

@runtime_checkable
class PositionRepository(Protocol):
    def upsert(self, position: Any) -> None: ...
    def get_open(self) -> Iterable[Any]: ...
    def get_by_id(self, pos_id: str) -> Optional[Any]: ...
    # optional: list_open()

@runtime_checkable
class AuditRepository(Protocol):
    def append(self, event: Dict[str, Any]) -> None: ...

@runtime_checkable
class IdempotencyRepository(Protocol):
    """Order idempotency with spec-compliant keys:
       key = f"{symbol}:{side}:{size}:{timestamp_minute}:{decision_id8}"
    """
    def claim(self, key: str, payload: Dict[str, Any]) -> bool: ...
    def commit(self, key: str, result: Dict[str, Any]) -> None: ...
    def release(self, key: str) -> None: ...
    def check_and_store(self, key: str, payload: Dict[str, Any]) -> Dict[str, Any] | None: ...
    def get_original_order(self, key: str) -> Dict[str, Any] | None: ...
