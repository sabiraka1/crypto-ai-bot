# src/crypto_ai_bot/core/storage/interfaces.py
from __future__ import annotations

from decimal import Decimal
from typing import Any, Dict, List, Optional, Protocol


class TradeRepository(Protocol):
    def insert(self, tr: Any) -> None: ...
    def upsert_by_client_order_id(self, client_order_id: str, tr: Any) -> None: ...
    def list_recent(self, symbol: str, limit: int = 100) -> List[Dict[str, Any]]: ...


class PositionRepository(Protocol):
    def upsert(self, p: Any) -> None: ...
    def mark_closed(self, pos_id: str, realized_pnl: Decimal, closed_at_ms: int) -> None: ...
    def update_size_and_price(self, pos_id: str, new_size: Decimal, new_avg_price: Decimal, realized_pnl: Decimal, ts_ms: int) -> None: ...
    def get_open(self) -> List[Dict[str, Any]]: ...
    def get_by_id(self, pos_id: str) -> Optional[Dict[str, Any]]: ...


class SnapshotRepository(Protocol):
    def insert(self, taken_at_ms: int, payload: Dict[str, Any]) -> int: ...
    def last(self) -> Optional[Dict[str, Any]]: ...
    def list_recent(self, limit: int = 100) -> List[Dict[str, Any]]: ...


class AuditRepository(Protocol):
    def log(
        self,
        *,
        at_ms: int,
        actor: str,
        action: str,
        entity_type: str,
        entity_id: str | None,
        details: Dict[str, Any] | None = None,
        idempotency_key: str | None = None,
    ) -> None: ...
    def list_recent(self, limit: int = 200) -> List[Dict[str, Any]]: ...


class IdempotencyRepository(Protocol):
    """
    record(key, ttl) -> True, если ключ записан впервые (можно выполнять операцию).
    False, если ключ ещё «жив» (операцию нужно пропустить как дубль).
    """
    def record(self, key: str, ttl_seconds: int) -> bool: ...
    def purge_expired(self) -> int: ...
