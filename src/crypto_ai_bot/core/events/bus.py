from __future__ import annotations

import asyncio
from dataclasses import dataclass, field
from typing import Any, Awaitable, Callable, Dict, List, Optional, Tuple
from asyncio import TimeoutError as ATimeoutError

from ...utils.time import now_ms
from ...utils.metrics import inc, observe, timer
from ...utils.logging import get_logger
from ...utils.exceptions import TransientError, ValidationError, BrokerError

Handler = Callable[["Event"], Awaitable[None]]


@dataclass
class Event:
    """–ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ —à–∏–Ω—ã."""
    topic: str
    key: str  # –∫–ª—é—á —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
    payload: Dict[str, Any]
    ts_ms: int = field(default_factory=now_ms)
    correlation_id: Optional[str] = None


@dataclass
class DeadLetter:
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø–∞–≤—à–µ–µ –≤ DLQ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    event: Event
    handler_name: str
    attempts: int
    error: str
    ts_ms: int = field(default_factory=now_ms)


class AsyncEventBus:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —à–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π —Å –ø–æ—Ä—è–¥–∫–æ–º –ø–æ –∫–ª—é—á—É –∏ DLQ.
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    * –õ–ï–ù–ò–í–´–ô –ó–ê–ü–£–°–ö: –≤–æ—Ä–∫–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º async –≤—ã–∑–æ–≤–µ
    * –ü–æ—Ä—è–¥–æ–∫: –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (topic, key) —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ—Ä–∫–µ—Ä,
      –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
    * –ü–æ–¥–ø–∏—Å–∫–∏: –Ω–∞ —Ç–µ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤; –∫–∞–∂–¥—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏.
    * –†–µ—Ç—Ä–∞–∏: –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (N –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞—É–∑–æ–π).
    * DLQ: –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ DLQ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ.
    """
    
    def __init__(
        self,
        *,
        max_attempts: int = 3,
        backoff_base_ms: int = 250,
        backoff_factor: float = 2.0,
        retry_on: Tuple[type, ...] = (TransientError, TimeoutError, ConnectionError),
    ) -> None:
        self._log = get_logger("events.bus")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
        self._handlers: Dict[str, List[Handler]] = {}
        self._queues: Dict[Tuple[str, str], asyncio.Queue[Event]] = {}
        self._workers: Dict[Tuple[str, str], asyncio.Task] = {}
        self._dlq_queue: asyncio.Queue[DeadLetter] = asyncio.Queue()
        self._dlq_handlers: List[Handler] = []
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry (–ø–æ–ª–Ω–∞—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
        self._max_attempts = max_attempts
        self._backoff_base_ms = backoff_base_ms
        self._backoff_factor = backoff_factor
        self._retry_on = retry_on
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∏–Ω—ã (–¥–æ–±–∞–≤–ª—è–µ–º –ª–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫)
        self._closing = False
        self._started = False  # üÜï –§–ª–∞–≥ –¥–ª—è –ª–µ–Ω–∏–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self._dlq_worker: Optional[asyncio.Task] = None  # üÜï –õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ

    def qsize(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤–æ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥—è—Ö."""
        return sum(q.qsize() for q in self._queues.values())

    def subscribe(self, topic: str, handler: Handler) -> None:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ç–µ–º—É."""
        self._ensure_started()  # üÜï –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫
        self._handlers.setdefault(topic, []).append(handler)
        self._log.info("subscribed", extra={"topic": topic, "handler": getattr(handler, "__name__", str(handler))})

    def unsubscribe(self, topic: str, handler: Handler) -> None:
        lst = self._handlers.get(topic)
        if not lst:
            return
        try:
            lst.remove(handler)
            self._log.info("unsubscribed", extra={"topic": topic, "handler": getattr(handler, "__name__", str(handler))})
        except ValueError:
            pass

    def subscribe_dlq(self, handler: Handler) -> None:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è DLQ (–ø–æ–ª—É—á–∞–µ—Ç Event-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ DeadLetter->Event)."""
        self._ensure_started()  # üÜï –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫
        self._dlq_handlers.append(handler)

    async def publish(self, topic: str, payload: Dict[str, Any], *, key: str, correlation_id: Optional[str] = None) -> None:
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ö–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –ø–æ –∫–ª—é—á—É."""
        if self._closing:
            raise RuntimeError("EventBus is closing")
        if not topic or not isinstance(topic, str):
            raise ValueError("topic must be non-empty string")
        if not key or not isinstance(key, str):
            raise ValueError("key must be non-empty string")
            
        self._ensure_started()  # üÜï –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫
        
        event = Event(topic=topic, key=key, payload=dict(payload or {}), correlation_id=correlation_id)
        inc("events_published", {"topic": topic})
        await self._enqueue(event)

    async def start(self) -> None:
        """–Ø–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)."""
        self._ensure_started()

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏–Ω—É —Å–æ–±—ã—Ç–∏–π."""
        await self.close()

    async def close(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏."""
        self._closing = True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö per-key –≤–æ—Ä–∫–µ—Ä–æ–≤
        for task in list(self._workers.values()):
            if not task.done():
                task.cancel()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DLQ –≤–æ—Ä–∫–µ—Ä
        if self._dlq_worker and not self._dlq_worker.done():
            self._dlq_worker.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        all_tasks = list(self._workers.values())
        if self._dlq_worker:
            all_tasks.append(self._dlq_worker)
            
        if all_tasks:
            await asyncio.gather(*all_tasks, return_exceptions=True)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._workers.clear()
        self._queues.clear()
        self._started = False

    def _ensure_started(self) -> None:
        """üÜï –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫: —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π event loop."""
        if self._started:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            loop = asyncio.get_running_loop()
        except RuntimeError:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop - –æ—Ç–ª–æ–∂–∏–º –∑–∞–ø—É—Å–∫ –¥–æ –ø–µ—Ä–≤–æ–≥–æ async –≤—ã–∑–æ–≤–∞
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º DLQ –≤–æ—Ä–∫–µ—Ä
        if self._dlq_worker is None:
            self._dlq_worker = loop.create_task(self._run_dlq_worker(), name="eventbus-dlq-worker")
            
        self._started = True
        self._log.info("event_bus_started")

    async def _enqueue(self, event: Event) -> None:
        """üéØ –°–û–•–†–ê–ù–Ø–ï–ú PER-KEY ORDERING - –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞!"""
        key = (event.topic, event.key)
        
        if key not in self._queues:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ—Ä–∫–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
            q: asyncio.Queue[Event] = asyncio.Queue()
            self._queues[key] = q
            self._workers[key] = asyncio.create_task(
                self._run_worker(event.topic, event.key, q),
                name=f"eventbus-worker-{event.topic}-{event.key}"
            )
        
        await self._queues[key].put(event)

    async def _run_worker(self, topic: str, key: str, queue: asyncio.Queue[Event]) -> None:
        """üéØ PER-KEY –í–û–†–ö–ï–† - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–ª—è –∫–ª—é—á–∞."""
        tname = f"{topic}:{key}"
        self._log.info("worker_started", extra={"topic": topic, "key": key})
        
        try:
            while not self._closing:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º wait_for –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ _closing
                    event = await asyncio.wait_for(queue.get(), timeout=1.0)
                except asyncio.TimeoutError:
                    continue
                    
                with timer("event_handle_ms", {"topic": topic}):
                    await self._dispatch_event(event)
                queue.task_done()
                
        except asyncio.CancelledError:
            self._log.info("worker_cancelled", extra={"topic": topic, "key": key})
        except Exception as exc:  # safety net
            self._log.error("worker_crashed", extra={"topic": topic, "key": key, "error": str(exc)})

    async def _dispatch_event(self, event: Event) -> None:
        """üéØ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ retry."""
        handlers = list(self._handlers.get(event.topic, []))
        if not handlers:
            inc("events_processed", {"topic": event.topic, "status": "no_handlers"})
            return
            
        for handler in handlers:
            name = getattr(handler, "__name__", str(handler))
            ok = await self._call_with_retries(handler, event)
            if ok:
                inc("events_processed", {"topic": event.topic, "handler": name, "status": "ok"})
            else:
                await self._to_dlq(event, handler)
                inc("events_processed", {"topic": event.topic, "handler": name, "status": "dlq"})

    async def _call_with_retries(self, handler: Handler, event: Event) -> bool:
        """üéØ –£–ú–ù–´–ô RETRY —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫."""
        name = getattr(handler, "__name__", str(handler))
        attempt = 1
        
        while attempt <= self._max_attempts:
            try:
                await handler(event)
                return True
                
            except self._retry_on as exc:  # üéØ –¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                if attempt == self._max_attempts:
                    self._log.error("handler_failed_retriable", extra={
                        "handler": name, "topic": event.topic, "key": event.key, 
                        "attempts": attempt, "error": str(exc)
                    })
                    return False
                    
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                sleep_ms = int(self._backoff_base_ms * (self._backoff_factor ** (attempt - 1)))
                await asyncio.sleep(sleep_ms / 1000.0)
                attempt += 1
                
            except (ValidationError, BrokerError) as exc:  # üéØ –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                self._log.error("handler_failed_nonretriable", extra={
                    "handler": name, "topic": event.topic, "key": event.key, "error": str(exc)
                })
                return False
                
            except Exception as exc:  # üéØ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                self._log.error("handler_failed_unexpected", extra={
                    "handler": name, "topic": event.topic, "key": event.key, "error": str(exc)
                })
                return False
                
        return False

    async def _to_dlq(self, event: Event, handler: Handler) -> None:
        """üéØ –ü–û–õ–ù–ê–Ø DLQ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
        name = getattr(handler, "__name__", str(handler))
        dlq = DeadLetter(event=event, handler_name=name, attempts=self._max_attempts, error="handler failed")
        await self._dlq_queue.put(dlq)
        inc("events_dlq", {"topic": event.topic, "handler": name})

    async def _run_dlq_worker(self) -> None:
        """üéØ –ü–û–õ–ù–´–ô DLQ –í–û–†–ö–ï–† —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
        try:
            while not self._closing:
                try:
                    dlq = await asyncio.wait_for(self._dlq_queue.get(), timeout=1.0)
                except asyncio.TimeoutError:
                    continue
                    
                if self._dlq_handlers:
                    event = Event(
                        topic="dlq",
                        key=f"{dlq.event.topic}:{dlq.event.key}",
                        payload={
                            "original_topic": dlq.event.topic,
                            "original_key": dlq.event.key,
                            "payload": dlq.event.payload,
                            "handler": dlq.handler_name,
                            "attempts": dlq.attempts,
                            "error": dlq.error,
                            "ts_ms": dlq.ts_ms,
                        },
                        correlation_id=dlq.event.correlation_id,
                    )
                    for h in list(self._dlq_handlers):
                        try:
                            await h(event)
                        except Exception as exc:
                            self._log.error("dlq_handler_failed", extra={
                                "handler": getattr(h, "__name__", str(h)), "error": str(exc)
                            })
                self._dlq_queue.task_done()
                
        except asyncio.CancelledError:
            self._log.info("dlq_worker_cancelled")