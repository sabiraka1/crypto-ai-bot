# src/crypto_ai_bot/trading/exchange_client.py
from __future__ import annotations

import logging
import time
from typing import Any, Optional, List

from crypto_ai_bot.core.metrics import FETCH_OHLCV_LATENCY

logger = logging.getLogger(__name__)


class ExchangeClient:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç:
      - –ø—Ä–æ–±—É–µ—Ç ccxt (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gateio)
      - –µ—Å–ª–∏ –Ω–µ—Ç ccxt –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π HTTP —Ñ–æ–ª–±—ç–∫ (Binance)
    """

    def __init__(self, settings: Optional[Any] = None):
        self.settings = settings
        self.client = None  # ccxt –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)

        # –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º –±–∏—Ä–∂—É: settings.EXCHANGE_NAME –∏–ª–∏ 'gateio'
        ex_name = None
        if settings and hasattr(settings, "EXCHANGE_NAME"):
            ex_name = getattr(settings, "EXCHANGE_NAME")
        if not ex_name:
            ex_name = "gateio"

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å ccxt
        try:
            import ccxt  # type: ignore

            if not hasattr(ccxt, ex_name):
                logger.warning(f"ccxt: exchange '{ex_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º binance")
                ex_name = "binance"

            cls = getattr(ccxt, ex_name)
            kwargs = dict(enableRateLimit=True)
            # –∫–ª—é—á–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è OHLCV, –Ω–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã ‚Äî –ø–æ–¥–∫–ª—é—á–∏–º
            if settings:
                key = getattr(settings, "API_KEY", None)
                sec = getattr(settings, "API_SECRET", None)
                if key and sec:
                    kwargs.update(apiKey=key, secret=sec)
            self.client = cls(kwargs)
            # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ccxt —Ç—Ä–µ–±—É—é—Ç .load_markets()
            if hasattr(self.client, "load_markets"):
                self.client.load_markets()
            logger.info(f"ccxt client ready: {ex_name}")
        except Exception as e:
            logger.warning(f"ccxt –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è ({e}). –í–∫–ª—é—á–µ–Ω HTTP —Ñ–æ–ª–±—ç–∫.")

    # --- –ø—É–±–ª–∏—á–Ω—ã–π API –±–æ—Ç–∞ ---------------------------------------------------
    def get_ohlcv(self, symbol: str, timeframe: str = "15m", limit: int = 200) -> List[list]:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫: [[ts_ms, open, high, low, close, volume], ...]
        """
        try:
            # –ü—É—Ç—å 1: –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π fetch_ohlcv (–Ω–∏–∂–µ —Ä–µ–∞–ª–∏–∑—É–µ–º)
            fetch = getattr(self, "fetch_ohlcv", None)
            if callable(fetch):
                t0 = time.perf_counter()
                ohlcv = fetch(symbol, timeframe=timeframe, limit=limit)
                FETCH_OHLCV_LATENCY.observe(time.perf_counter() - t0)
                logger.debug(f"üìä Fetched {len(ohlcv)} candles for {symbol} via self.fetch_ohlcv")
                return ohlcv

            # –ü—É—Ç—å 2: –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ccxt-–∫–ª–∏–µ–Ω—Ç
            for attr in ("client", "api", "exchange"):
                obj = getattr(self, attr, None)
                fetch = getattr(obj, "fetch_ohlcv", None) if obj is not None else None
                if callable(fetch):
                    t0 = time.perf_counter()
                    ohlcv = fetch(symbol, timeframe=timeframe, limit=limit)
                    FETCH_OHLCV_LATENCY.observe(time.perf_counter() - t0)
                    logger.debug(f"üìä Fetched {len(ohlcv)} candles for {symbol} via self.{attr}.fetch_ohlcv")
                    return ohlcv

            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥–∏–∑–∞–π–Ω–∞
            raise NotImplementedError(
                "ExchangeClient.get_ohlcv: implement .fetch_ohlcv() "
                "–∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ self.client/self.api/self.exchange —Å .fetch_ohlcv()."
            )
        except NotImplementedError:
            raise
        except Exception as e:
            logger.error(f"‚ùå OHLCV fetch failed for {symbol} {timeframe}: {e}")
            raise

    # --- —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è fetch_ohlcv —Å ccxt –∏–ª–∏ HTTP —Ñ–æ–ª–±—ç–∫–æ–º ---------------------
    def fetch_ohlcv(self, symbol: str, timeframe: str = "15m", limit: int = 200) -> List[list]:
        """
        –°–Ω–∞—á–∞–ª–∞ ccxt (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π HTTP —Ñ–æ–ª–±—ç–∫ (Binance).
        """
        # 1) ccxt
        if self.client is not None and hasattr(self.client, "fetch_ohlcv"):
            return self.client.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)

        # 2) HTTP —Ñ–æ–ª–±—ç–∫ –Ω–∞ Binance (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        return self._fetch_ohlcv_http_binance(symbol, timeframe, limit)

    # --- Binance HTTP fallback ------------------------------------------------
    def _fetch_ohlcv_http_binance(self, symbol: str, timeframe: str, limit: int) -> List[list]:
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π REST Binance.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è '15m'/'1h'/'4h' –∏ —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ 'BTC/USDT' -> 'BTCUSDT'.
        """
        try:
            import json
            from urllib.request import urlopen, Request
            from urllib.parse import urlencode

            sym = symbol.replace("/", "")
            params = urlencode({"symbol": sym, "interval": timeframe, "limit": limit})
            url = f"https://api.binance.com/api/v3/klines?{params}"

            req = Request(url, headers={"User-Agent": "crypto-ai-bot/1.0"})
            with urlopen(req, timeout=10) as resp:
                data = json.loads(resp.read().decode("utf-8"))

            # Binance —Ñ–æ—Ä–º–∞—Ç: [ openTime, o, h, l, c, v, closeTime, ... ]
            out: List[list] = []
            for k in data:
                ts = int(k[0])  # ms
                o = float(k[1]); h = float(k[2]); l = float(k[3]); c = float(k[4]); v = float(k[5])
                out.append([ts, o, h, l, c, v])

            if not out:
                raise RuntimeError("empty klines")
            logger.debug(f"üìä HTTP fallback fetched {len(out)} candles for {symbol}@{timeframe}")
            return out
        except Exception as e:
            raise RuntimeError(f"HTTP fallback failed: {e}") from e


# ‚îÄ‚îÄ –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ —Ç–∏–ø—ã) -----------------------------------------
class APIException(Exception):
    """–û—à–∏–±–∫–∞ API –±–∏—Ä–∂–∏"""
    pass


class NetworkException(Exception):
    """–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞"""
    pass


__all__ = ["ExchangeClient", "APIException", "NetworkException"]
