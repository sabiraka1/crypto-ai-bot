from __future__ import annotations

import asyncio
import os
import sqlite3
from dataclasses import dataclass
from typing import Dict, List, Any

from crypto_ai_bot.core.infrastructure.settings import Settings
from crypto_ai_bot.core.infrastructure.storage.migrations.runner import run_migrations
from crypto_ai_bot.core.infrastructure.storage.facade import Storage
from crypto_ai_bot.core.infrastructure.events.bus import AsyncEventBus
from crypto_ai_bot.core.infrastructure.events.redis_bus import RedisEventBus
from crypto_ai_bot.core.infrastructure.brokers.factory import make_broker
from crypto_ai_bot.core.infrastructure.safety.dead_mans_switch import DeadMansSwitch
from crypto_ai_bot.core.domain.risk.manager import RiskManager, RiskConfig
from crypto_ai_bot.core.application.protective_exits import ProtectiveExits
from crypto_ai_bot.core.application.monitoring.health_checker import HealthChecker
from crypto_ai_bot.core.application.orchestrator import Orchestrator
from crypto_ai_bot.utils.symbols import canonical
from crypto_ai_bot.core.application.ports import SafetySwitchPort
from crypto_ai_bot.utils.logging import get_logger
from crypto_ai_bot.app.adapters.telegram import TelegramAlerts
from crypto_ai_bot.utils.time import now_ms  # <‚Äî –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π

_log = get_logger("compose")


@dataclass
class Container:
    settings: Settings
    storage: Storage
    broker: Any
    bus: Any
    risk: RiskManager
    exits: ProtectiveExits
    health: HealthChecker
    orchestrators: Dict[str, Orchestrator]


def _open_storage(settings: Settings) -> Storage:
    # –ü—É—Ç—å –ë–î –±–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫; –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db_path = settings.DB_PATH
    db_dir = os.path.dirname(db_path) or "."
    os.makedirs(db_dir, exist_ok=True)
    conn = sqlite3.connect(db_path, check_same_thread=False)
    conn.row_factory = sqlite3.Row

    # PRAGMA —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ —Ä–∞–Ω–Ω–µ—Ä–µ, –Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–¥–µ—Å—å –Ω–µ –º–µ—à–∞—é—Ç
    conn.execute("PRAGMA journal_mode=WAL;")
    conn.execute("PRAGMA synchronous=NORMAL;")
    conn.execute("PRAGMA busy_timeout = 5000;")

    # –í–∞–∂–Ω–æ: —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ runner —Ç—Ä–µ–±—É–µ—Ç now_ms –∏ db_path
    run_migrations(conn, now_ms=now_ms(), db_path=db_path, do_backup=True,
                   backup_retention_days=int(getattr(settings, "BACKUP_RETENTION_DAYS", 30) or 30))
    return Storage(conn)


# --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ Event Bus: Redis –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ in-memory ---
def _build_event_bus(settings: Settings) -> Any:
    redis_url = getattr(settings, "EVENT_BUS_URL", "") or ""
    if redis_url:
        bus = RedisEventBus(redis_url)
    else:
        bus = AsyncEventBus()
    return bus


def attach_alerts(bus: Any, settings: Settings) -> None:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º —à–∏–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    tg = TelegramAlerts(bot_token=getattr(settings, "TELEGRAM_BOT_TOKEN", ""),
                        chat_id=getattr(settings, "TELEGRAM_CHAT_ID", ""))
    if not tg.enabled():
        _log.info("telegram_alerts_disabled")
        return

    async def _send(text: str) -> None:
        try:
            ok = await tg.send(text)
            if not ok:
                _log.warning("telegram_send_not_ok")
        except Exception as exc:
            _log.error("telegram_send_exception", extra={"error": str(exc)})

    def _sub(topic: str, coro):
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–¥–ª—è AsyncEventBus –∏–ª–∏ RedisEventBus)
        for attr in ("subscribe", "on"):
            if hasattr(bus, attr):
                try:
                    getattr(bus, attr)(topic, coro)
                    return
                except Exception as exc:
                    _log.error("bus_subscribe_failed", extra={"topic": topic, "error": str(exc)})
        _log.error("bus_has_no_subscribe_api")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    async def on_auto_paused(evt: dict):
        await _send(f"‚ö†Ô∏è <b>AUTO-PAUSE</b> {evt.get('symbol','')}\n–ü—Ä–∏—á–∏–Ω–∞: <code>{evt.get('reason','')}</code>")

    async def on_auto_resumed(evt: dict):
        await _send(f"üü¢ <b>AUTO-RESUME</b> {evt.get('symbol','')}\n–ü—Ä–∏—á–∏–Ω–∞: <code>{evt.get('reason','')}</code>")

    async def on_pos_mm(evt: dict):
        await _send(f"üîÑ <b>RECONCILE</b> {evt.get('symbol','')}\n–ë–∏—Ä–∂–∞: <code>{evt.get('exchange','')}</code>\n–õ–æ–∫–∞–ª—å–Ω–æ: <code>{evt.get('local','')}</code>")

    async def on_dms_triggered(evt: dict):
        await _send(f"üõë <b>DMS TRIGGERED</b> {evt.get('symbol','')}\n–ü—Ä–æ–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ: <code>{evt.get('amount','')}</code>")

    async def on_dms_skipped(evt: dict):
        await _send(f"‚õî <b>DMS SKIPPED</b> {evt.get('symbol','')}\n–ü–∞–¥–µ–Ω–∏–µ: <code>{evt.get('drop_pct','')}%</code>")

    async def on_trade_completed(evt: dict):
        s = evt.get("symbol",""); side = evt.get("side","")
        cost = evt.get("cost",""); fee = evt.get("fee_quote","")
        price = evt.get("price",""); amt = evt.get("amount","")
        await _send(f"‚úÖ <b>TRADE</b> {s} {side.upper()}\nAmt: <code>{amt}</code> @ <code>{price}</code>\nCost: <code>{cost}</code> Fee: <code>{fee}</code>")

    async def on_budget_exceeded(evt: dict):
        s = evt.get("symbol",""); kind = evt.get("type","")
        detail = f"count_5m={evt.get('count_5m','')}/{evt.get('limit','')}" if kind == "max_orders_5m" else f"turnover={evt.get('turnover','')}/{evt.get('limit','')}"
        await _send(f"‚è≥ <b>BUDGET</b> {s} –ø—Ä–µ–≤—ã—à–µ–Ω ({kind})\n{detail}")

    async def on_trade_blocked(evt: dict):
        s = evt.get("symbol",""); reason = evt.get("reason","")
        await _send(f"üö´ <b>BLOCKED</b> {s}\n–ü—Ä–∏—á–∏–Ω–∞: <code>{reason}</code>")

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é _sub
    for topic, handler in [
        ("orchestrator.auto_paused", on_auto_paused),
        ("orchestrator.auto_resumed", on_auto_resumed),
        ("reconcile.position_mismatch", on_pos_mm),
        ("safety.dms.triggered", on_dms_triggered),
        ("safety.dms.skipped", on_dms_skipped),
        ("trade.completed", on_trade_completed),
        ("budget.exceeded", on_budget_exceeded),
        ("trade.blocked", on_trade_blocked),
    ]:
        _sub(topic, handler)

    _log.info("telegram_alerts_enabled")


async def build_container_async() -> Container:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è/—Ñ–∞–π–ª–∞
    s = Settings.load()
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏) —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
    st = _open_storage(s)
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —à–∏–Ω—É —Å–æ–±—ã—Ç–∏–π
    bus = _build_event_bus(s)
    await bus.start() if hasattr(bus, "start") else None

    # –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä –∫ –±–∏—Ä–∂–µ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ paper-—Å–∏–º—É–ª—è—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
    br = make_broker(exchange=s.EXCHANGE, mode=s.MODE, settings=s)
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ª–∏–º–∏—Ç–æ–≤ (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É)
    risk = RiskManager(RiskConfig.from_settings(s))
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—ã –∑–∞—â–∏—Ç–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
    exits = ProtectiveExits(storage=st, broker=br, bus=bus, settings=s)
    health = HealthChecker(storage=st, broker=br, bus=bus, settings=s)

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: —Å–ø–∏—Å–æ–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    symbols: List[str] = [canonical(x.strip()) for x in (s.SYMBOLS or "").split(",") if x.strip()] or [canonical(s.SYMBOL)]
    orchs: Dict[str, Orchestrator] = {}

    def _make_dms(sym: str) -> SafetySwitchPort:
        # –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è DeadMan'sSwitch –ø–æ–¥ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        return DeadMansSwitch(
            storage=st, broker=br, symbol=sym,
            timeout_ms=int(getattr(s, "DMS_TIMEOUT_MS", 120_000) or 120_000),
            rechecks=int(getattr(s, "DMS_RECHECKS", 2) or 2),
            recheck_delay_sec=float(getattr(s, "DMS_RECHECK_DELAY_SEC", 3.0) or 3.0),
            max_impact_pct=getattr(s, "DMS_MAX_IMPACT_PCT", 0),
            bus=bus,
        )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for sym in symbols:
        orchs[sym] = Orchestrator(
            symbol=sym, storage=st, broker=br, bus=bus,
            risk=risk, exits=exits, health=health, settings=s, dms=_make_dms(sym),
        )

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram-–∞–ª–µ—Ä—Ç—ã –∫ —Å–æ–±—ã—Ç–∏—è–º, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã
    attach_alerts(bus, s)
    return Container(settings=s, storage=st, broker=br, bus=bus, risk=risk, exits=exits, health=health, orchestrators=orchs)
