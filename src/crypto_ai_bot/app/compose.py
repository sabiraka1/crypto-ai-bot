from __future__ import annotations
from dataclasses import dataclass
from decimal import Decimal
from typing import Optional, Callable
import contextlib
import os

from ..core.settings import Settings
from ..core.events.bus import AsyncEventBus
from ..core.brokers.backtest_exchange import BacktestExchange
from ..core.brokers.ccxt_exchange import CcxtExchange
from ..core.storage.sqlite_adapter import connect
from ..core.storage.migrations.runner import run_migrations
from ..core.storage.facade import Storage
from ..core.monitoring.health_checker import HealthChecker
from ..core.risk.manager import RiskManager, RiskConfig
from ..core.risk.protective_exits import ProtectiveExits, ExitPolicy
from ..core.orchestrator import Orchestrator
from ..utils.logging import get_logger
from ..utils.time import now_ms

_log = get_logger("compose")

@dataclass(frozen=True)
class Container:
    """üéØ DI Container —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    settings: Settings
    storage: Storage
    broker: object  # IBroker
    bus: AsyncEventBus
    health: HealthChecker
    risk: RiskManager
    exits: ProtectiveExits
    orchestrator: Orchestrator


def _mk_price_feed(storage: Storage, default: Decimal = Decimal("50000")) -> Callable[[], Decimal]:
    """–°–æ–∑–¥–∞–µ–º price feed –¥–ª—è BacktestExchange –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ storage."""
    from ..core.storage.repositories.market_data import TickerRow  # local import to avoid cycles
    
    def feed() -> Decimal:
        row = storage.market_data.get_last_ticker("BTC/USDT")
        if row and row.last > 0:
            return row.last
        return default
    return feed


def _create_broker_for_mode(settings: Settings, storage: Storage) -> object:
    """üéØ –°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ë–†–û–ö–ï–†–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –ê–†–ì–£–ú–ï–ù–¢–ê–ú–ò."""
    
    if settings.MODE == "live":
        # üî¥ LIVE MODE - CcxtExchange —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        if not settings.API_KEY or not settings.API_SECRET:
            raise ValueError("Live mode requires API_KEY and API_SECRET")
        
        _log.info("creating_live_broker", extra={
            "exchange": settings.EXCHANGE,
            "has_api_key": bool(settings.API_KEY),
            "has_api_secret": bool(settings.API_SECRET),
        })
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ –¥–ª—è CcxtExchange:
        return CcxtExchange(
            exchange=settings.EXCHANGE,           # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            api_key=settings.API_KEY,            # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            api_secret=settings.API_SECRET,      # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            enable_rate_limit=True,              # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            timeout_ms=20_000,                   # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        )
    
    else:  # paper, backtest –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º
        # üü¢ PAPER/BACKTEST MODE - BacktestExchange —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ)
        initial_balances = {
            "USDT": getattr(settings, "PAPER_INITIAL_BALANCE_USDT", Decimal("10000")),
            "BTC": getattr(settings, "PAPER_INITIAL_BALANCE_BTC", Decimal("0")),
        }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not hasattr(settings, "PAPER_INITIAL_BALANCE_USDT"):
            initial_balances = {"USDT": Decimal("10000")}
        
        _log.info("creating_paper_broker", extra={
            "mode": settings.MODE,
            "balances": {k: str(v) for k, v in initial_balances.items()},
        })
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ –¥–ª—è BacktestExchange:
        return BacktestExchange(
            symbol=settings.SYMBOL,                    # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            balances=initial_balances,                 # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ (Dict[str, Decimal])
            fee_rate=Decimal("0.001"),                 # ‚úÖ 0.1% –∫–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            spread=Decimal("0.0002"),                  # ‚úÖ 0.02% —Å–ø—Ä–µ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
            price_feed=_mk_price_feed(storage),        # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ (Optional[Callable[[], Decimal]])
        )


def _create_storage_for_mode(settings: Settings) -> Storage:
    """üéØ –°–û–ó–î–ê–ù–ò–ï STORAGE –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –¢–ê–ë–õ–ò–¶–ê–ú–ò –ü–û –†–ï–ñ–ò–ú–£."""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db_path = settings.DB_PATH
    db_dir = os.path.dirname(db_path)
    
    if db_dir and db_dir != '.' and not os.path.exists(db_dir):
        os.makedirs(db_dir, exist_ok=True)
        _log.info("created_db_directory", extra={"path": db_dir})
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = connect(db_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    applied = run_migrations(conn, now_ms=now_ms())
    if applied:
        _log.info("migrations_applied", extra={"versions": applied})
    
    # –°–æ–∑–¥–∞–µ–º Storage facade
    storage = Storage.from_connection(conn)
    
    _log.info("storage_created", extra={
        "mode": settings.MODE,
        "db_path": db_path,
        "migrations_applied": len(applied),
    })
    
    return storage


def build_container() -> Container:
    """üéØ –°–ë–û–†–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–´–ë–û–†–û–ú –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ü–û –†–ï–ñ–ò–ú–£."""
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = Settings.load()
    
    _log.info("building_container", extra={
        "mode": settings.MODE,
        "exchange": settings.EXCHANGE,
        "symbol": settings.SYMBOL,
    })
    
    # 2. –°–æ–∑–¥–∞–µ–º storage
    storage = _create_storage_for_mode(settings)
    
    # 3. –°–æ–∑–¥–∞–µ–º event bus
    bus = AsyncEventBus(
        max_attempts=3,
        backoff_base_ms=250,
        backoff_factor=2.0,
    )
    
    # 4. –°–æ–∑–¥–∞–µ–º broker –¥–ª—è —Ä–µ–∂–∏–º–∞
    broker = _create_broker_for_mode(settings, storage)
    
    # 5. –°–æ–∑–¥–∞–µ–º risk manager
    risk_config = RiskConfig(
        cooldown_sec=30,
        max_spread_pct=0.3,
    )
    risk = RiskManager(storage=storage, config=risk_config)  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    
    # 6. –°–æ–∑–¥–∞–µ–º protective exits
    exit_policy = ExitPolicy(
        take_profit_pct=2.0,  # +2%
        stop_loss_pct=1.5,    # -1.5%
    )
    exits = ProtectiveExits(storage=storage, policy=exit_policy, bus=bus)  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    
    # 7. –°–æ–∑–¥–∞–µ–º health checker
    health = HealthChecker(storage=storage, broker=broker, bus=bus)

    # 8. –°–æ–∑–¥–∞—ë–º orchestrator (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
    orchestrator = Orchestrator(
        symbol=settings.SYMBOL,
        storage=storage,
        broker=broker,
        bus=bus,
        risk=risk,
        exits=exits,
        health=health,
        settings=settings,
        # –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        eval_interval_sec=1.0,
        exits_interval_sec=2.0,
        reconcile_interval_sec=5.0,
        watchdog_interval_sec=2.0,
    )
    
    # 9. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = Container(
        settings=settings,
        storage=storage,
        broker=broker,
        bus=bus,
        health=health,
        risk=risk,
        exits=exits,
        orchestrator=orchestrator,
    )
    
    _log.info("container_built", extra={
        "mode": settings.MODE,
        "components": ["settings", "storage", "broker", "bus", "health", "risk", "exits", "orchestrator"],
    })
    
    return container


@contextlib.asynccontextmanager
async def lifespan(app):
    """üéØ LIFECYCLE MANAGER –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ó–ê–ö–†–´–¢–ò–ï–ú –ü–û –†–ï–ñ–ò–ú–ê–ú."""
    
    container = build_container()
    app.state.container = container
    
    _log.info("lifespan_started", extra={"mode": container.settings.MODE})
    
    try:
        # –°—Ç–∞—Ä—Ç—É–µ–º event bus —è–≤–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await container.bus.start()
        
        yield
        
    finally:
        _log.info("lifespan_stopping", extra={"mode": container.settings.MODE})
        
        # 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º broker
        try:
            if hasattr(container.broker, "close"):
                close_method = getattr(container.broker, "close")
                if callable(close_method):
                    result = close_method()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ async –º–µ—Ç–æ–¥
                    if hasattr(result, "__await__"):
                        await result
                    _log.info("broker_closed")
        except Exception as exc:
            _log.error("broker_close_error", extra={"error": str(exc)})
        
        # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º event bus
        try:
            await container.bus.close()
            _log.info("event_bus_closed")
        except Exception as exc:
            _log.error("event_bus_close_error", extra={"error": str(exc)})
        
        # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        try:
            container.storage.conn.close()
            _log.info("storage_closed")
        except Exception as exc:
            _log.error("storage_close_error", extra={"error": str(exc)})
        
        _log.info("lifespan_stopped")


# üéØ –£–î–û–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

def build_test_container(*, mode: str = "paper", symbol: str = "BTC/USDT") -> Container:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å in-memory –ë–î."""
    import tempfile
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ.update({
        "MODE": mode,
        "SYMBOL": symbol,
        "DB_PATH": f"{tempfile.gettempdir()}/test_crypto_bot.db",
    })
    
    return build_container()


def build_live_container_with_credentials(api_key: str, api_secret: str) -> Container:
    """–°–æ–∑–¥–∞—Ç—å live –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª–∞–º–∏."""
    os.environ.update({
        "MODE": "live",
        "API_KEY": api_key,
        "API_SECRET": api_secret,
    })
    
    return build_container()
