from __future__ import annotations

import logging


def setup_telegram_error_handler() -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç TelegramErrorHandler –ø—Ä–∏ LOG_TG_ERRORS=1.
    - –î–æ–±–∞–≤–ª—è–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∫ root-–ª–æ–≥–≥–µ—Ä—É.
    - –ù–µ —Ç—Ä–æ–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã/—É—Ä–æ–≤–Ω–∏, –Ω–µ –¥–µ–ª–∞–µ—Ç –¥—É–±–ª–µ–π.
    """
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        from crypto_ai_bot.app.telegram_log_handler import TelegramErrorHandler  # noqa: WPS433
    except Exception as exc:  # pragma: no cover
        logging.getLogger(__name__).warning("TG error handler disabled (import): %s", exc)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å, –µ—Å–ª–∏ ENV –Ω–µ –ø–æ–ª–æ–Ω ‚Äî –ª–æ–≤–∏–º —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏.
    try:
        handler = TelegramErrorHandler()
    except Exception as exc:  # pragma: no cover
        logging.getLogger(__name__).warning("TG error handler disabled (init): %s", exc)
        return

    handler.setLevel(logging.ERROR)

    # –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram (–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏–≤—è–∑–∫—É –∫ –º–µ—Å—Ç—É)
    fmt = logging.Formatter(fmt="üî¥ %(levelname)s | %(name)s | %(message)s\nat %(pathname)s:%(lineno)d")
    handler.setFormatter(fmt)

    root = logging.getLogger()
    # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª—å
    for h in root.handlers:
        if type(h) is type(handler):  # noqa: E721 ‚Äî –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
            return

    root.addHandler(handler)
