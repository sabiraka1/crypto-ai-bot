# src/crypto_ai_bot/telegram/bot.py
"""
Telegram webhook router
- FastAPI APIRouter —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ query (?token=...)
- –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤ telegram.commands / telegram.api_utils
- –ù–∏–∫–∞–∫–∏—Ö —Ç—è–∂—ë–ª—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
"""

from __future__ import annotations

import os
import logging
from typing import Any, Dict, Optional

from fastapi import APIRouter, Request, HTTPException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã (–ª—ë–≥–∫–∏–µ)
try:
    from crypto_ai_bot.config.settings import Settings
except Exception:
    Settings = None  # –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å –∏–∑ os.environ

from crypto_ai_bot.telegram.api_utils import send_message  # –ª—ë–≥–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Telegram API

logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥
# -----------------------------------------------------------------------------
def _get_env(key: str, default: Optional[str] = None) -> Optional[str]:
    val = os.getenv(key, default)
    return val

def _cfg() -> Dict[str, Any]:
    # –ï—Å–ª–∏ –µ—Å—Ç—å Settings ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ —á–∏—Ç–∞–µ–º –∏–∑ env
    data: Dict[str, Any] = {}
    if Settings is not None:
        try:
            s = Settings()
            data = {
                "BOT_TOKEN": s.BOT_TOKEN,
                "TELEGRAM_SECRET_TOKEN": s.TELEGRAM_SECRET_TOKEN,
                "CHAT_ID": s.CHAT_ID,
                "ENABLE_WEBHOOK": int(os.getenv("ENABLE_WEBHOOK", "1")),
            }
        except Exception as e:
            logger.warning("Settings fallback to ENV: %s", e)

    # Fallback/override –∏–∑ ENV
    data.setdefault("BOT_TOKEN", _get_env("BOT_TOKEN", ""))
    data.setdefault("TELEGRAM_SECRET_TOKEN", _get_env("TELEGRAM_SECRET_TOKEN", ""))
    data.setdefault("CHAT_ID", _get_env("CHAT_ID", ""))
    data.setdefault("ENABLE_WEBHOOK", int(_get_env("ENABLE_WEBHOOK", "1") or "1"))
    return data

CFG = _cfg()

# -----------------------------------------------------------------------------
# –†–æ—É—Ç–µ—Ä
# -----------------------------------------------------------------------------
router = APIRouter(prefix="/telegram", tags=["telegram"])


@router.get("/ping")
async def ping() -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω."""
    return {"ok": True, "service": "telegram", "webhook_enabled": bool(CFG.get("ENABLE_WEBHOOK", 1))}


@router.get("/test")
async def test_message() -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ CHAT_ID, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω/–¥–æ—Å—Ç—É–ø.
    –ù–ï —Ç—Ä–µ–±—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—É–¥–æ–±–Ω–æ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞).
    """
    bot_token = CFG.get("BOT_TOKEN", "")
    chat_id = CFG.get("CHAT_ID", "")
    if not bot_token or not chat_id:
        raise HTTPException(status_code=400, detail="BOT_TOKEN or CHAT_ID not configured")
    try:
        send_message(chat_id, "‚úÖ Telegram router is alive.")
        return {"ok": True}
    except Exception as e:
        logger.error("Telegram test failed: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/webhook")
async def telegram_webhook(request: Request, token: Optional[str] = None) -> Dict[str, Any]:
    """
    –ì–ª–∞–≤–Ω—ã–π webhook-—ç–Ω–¥–ø–æ–∏–Ω—Ç. Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å—é–¥–∞ –∞–ø–¥–µ–π—Ç—ã.
    –ú—ã –ü–†–û–í–ï–†–Ø–ï–ú —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ query (?token=...) –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    """
    if not CFG.get("ENABLE_WEBHOOK", 1):
        raise HTTPException(status_code=403, detail="Webhook disabled by config")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    expected = CFG.get("TELEGRAM_SECRET_TOKEN", "")
    if not expected:
        logger.warning("TELEGRAM_SECRET_TOKEN is empty ‚Äî webhook is not protected!")
    if expected and token != expected:
        logger.warning("Webhook token mismatch")
        raise HTTPException(status_code=403, detail="Invalid webhook token")

    try:
        update: Dict[str, Any] = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    # –ú–∏–Ω–∏-–ø–∞—Ä—Å–µ—Ä –∞–ø–¥–µ–π—Ç–∞
    message = update.get("message") or update.get("edited_message")
    callback = update.get("callback_query")

    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á–∞—Ç
    chat_id: Optional[str] = None
    text: Optional[str] = None

    if message:
        chat = message.get("chat") or {}
        chat_id = str(chat.get("id")) if chat.get("id") is not None else None
        text = message.get("text")
    elif callback:
        msg = callback.get("message") or {}
        chat = msg.get("chat") or {}
        chat_id = str(chat.get("id")) if chat.get("id") is not None else None
        text = callback.get("data")

    if not chat_id:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–ø–¥–µ–π—Ç–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
        logger.debug("Update without chat_id: %s", update)
        return {"ok": True}

    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ commands
    try:
        # –∏–º–ø–æ—Ä—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π/—Ü–∏–∫–ª–æ–≤
        from crypto_ai_bot.telegram.commands import process_command
    except Exception as e:
        logger.error("Failed to import commands.process_command: %s", e, exc_info=True)
        # —Ö–æ—Ç—è –±—ã —ç—Ö–æ, —á—Ç–æ–±—ã –Ω–µ –º–æ–ª—á–∞—Ç—å
        if text:
            try:
                send_message(chat_id, f"ü§ñ Received: {text}")
            except Exception:
                pass
        return {"ok": True}

    try:
        await process_command(chat_id=chat_id, text=text or "", update=update)
    except Exception as e:
        logger.error("Command processing failed: %s", e, exc_info=True)
        # –ù–µ –ø–∞–¥–∞–µ–º ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –¥–æ–ª–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏
        try:
            send_message(chat_id, "‚ö†Ô∏è Internal error while processing your command.")
        except Exception:
            pass

    return {"ok": True}


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ webhook (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä—É–∫–∞–º–∏)
@router.get("/webhook/info")
async def webhook_info() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–µ –≤–µ–±—Ö—É–∫–∞ (—Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).
    –≠—Ç–æ –ù–ï –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Telegram getWebhookInfo, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤–∏–¥–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ.
    """
    return {
        "ok": True,
        "configured": bool(CFG.get("ENABLE_WEBHOOK", 1)),
        "secret_set": bool(CFG.get("TELEGRAM_SECRET_TOKEN", "")),
        "chat_id_set": bool(CFG.get("CHAT_ID", "")),
    }


__all__ = ["router"]
