import logging
import time
import pandas as pd
import schedule
from datetime import datetime, timedelta
import os
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler()
    ]
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config.settings import TradingConfig, TradingState, MarketCondition
from core.state_manager import StateManager
from core.exceptions import *
from analysis.market_analyzer import MultiTimeframeAnalyzer
from analysis.technical_indicators import TechnicalIndicators
from analysis.scoring_engine import ScoringEngine
from trading.exchange_client import ExchangeClient
from trading.position_manager import PositionManager
from telegram.bot_handler import TelegramBot
from ml.adaptive_model import AdaptiveMLModel
from utils.csv_handler import CSVHandler

class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.state_manager = StateManager()
        self.exchange_client = ExchangeClient()
        self.position_manager = PositionManager(self.exchange_client, self.state_manager)
        self.market_analyzer = MultiTimeframeAnalyzer()
        self.scoring_engine = ScoringEngine()
        self.telegram_bot = TelegramBot(
            TradingConfig.BOT_TOKEN,
            TradingConfig.CHAT_ID,
            self.state_manager
        )
        self.ml_model = AdaptiveMLModel()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–∏
        self.ml_model.load_models()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.rsi_over_70_candles = 0
        self.last_market_reevaluation = datetime.now()
        
        logging.info("üöÄ Trading bot initialized")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""
        try:
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
            schedule.every(TradingConfig.ANALYSIS_INTERVAL).minutes.do(self.main_trading_cycle)
            schedule.every(TradingConfig.MARKET_REEVALUATION).hours.do(self.reevaluate_market)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            self.telegram_bot.send_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            logging.info("üìä Bot started, entering main loop...")
            
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logging.info("üõë Bot stopped by user")
            self.telegram_bot.send_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.critical(f"Critical error in main loop: {e}")
            self.telegram_bot.send_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def main_trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        try:
            logging.info("üîÑ Starting trading cycle...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è cooldown
            if self.state_manager.is_in_cooldown():
                logging.info("‚ùÑÔ∏è Bot in cooldown, skipping cycle")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            df_15m = self._fetch_market_data('15m', 100)
            df_1h = self._fetch_market_data('1h', 100)
            df_4h = self._fetch_market_data('4h', 100)
            df_1d = self._fetch_market_data('1d', 100)
            
            if any(df is None for df in [df_15m, df_1h, df_4h, df_1d]):
                logging.error("Failed to fetch market data")
                return
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df_15m = TechnicalIndicators.calculate_all_indicators(df_15m)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            market_condition, market_confidence = self.market_analyzer.analyze_market_condition(df_1d, df_4h)
            
            # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            ml_prediction, ml_confidence = self._get_ml_prediction(df_15m, market_condition)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = self.state_manager.get_trading_state()
            
            if current_state == TradingState.WAITING:
                self._handle_waiting_state(df_15m, market_condition, ml_confidence)
            elif current_state == TradingState.IN_POSITION:
                self._handle_position_state(df_15m)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ RSI
            self._update_rsi_counter(df_15m)
            
        except Exception as e:
            logging.error(f"Error in trading cycle: {e}")
            self.telegram_bot.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    def _handle_waiting_state(self, df: pd.DataFrame, market_condition: MarketCondition, ml_confidence: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        try:
            # –†–∞—Å—á–µ—Ç –±–∞–ª–ª–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            buy_score, score_details = self.scoring_engine.calculate_buy_score(
                df, market_condition, ml_confidence
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if buy_score >= score_details.get('threshold', TradingConfig.MIN_SCORE_TO_BUY):
                position = self.position_manager.open_position(
                    TradingConfig.SYMBOL,
                    TradingConfig.POSITION_SIZE_USD
                )
                
                if position:
                    message = f"""
üéØ <b>–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê</b>

üìä {position['symbol']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position['entry_price']:.2f}
üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position['quantity']:.6f}
üéØ –ë–∞–ª–ª —Ä–µ—à–µ–Ω–∏—è: {buy_score:.2f}/{score_details['threshold']:.2f}
ü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_confidence:.1%}
üìä –†—ã–Ω–æ–∫: {market_condition.value}

üéØ Take Profit: {TradingConfig.TAKE_PROFIT_PCT}%
üõë Stop Loss: {TradingConfig.STOP_LOSS_PCT}%
                    """
                    self.telegram_bot.send_message(message)
                    
        except Exception as e:
            logging.error(f"Error in waiting state: {e}")
    
    def _handle_position_state(self, df: pd.DataFrame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        try:
            position_profit = self.position_manager.get_position_profit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            should_sell, sell_reason = self.scoring_engine.should_sell(
                df, position_profit, self.rsi_over_70_candles
            )
            
            if should_sell:
                result = self.position_manager.close_position(sell_reason)
                
                if result:
                    profit_emoji = "üíö" if result['profit_pct'] > 0 else "‚ùå"
                    message = f"""
{profit_emoji} <b>–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê</b>

üìä {result['symbol']}
üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${result['exit_price']:.2f}
üìà –ü—Ä–∏–±—ã–ª—å: {result['profit_pct']:.2f}% (${result['profit_usd']:.2f})
üîç –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.state_manager.state['total_trades']}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.state_manager.state['win_trades']}
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.state_manager.state['total_profit']:.2f}
                    """
                    self.telegram_bot.send_message(message)
                    
        except Exception as e:
            logging.error(f"Error in position state: {e}")
    
    def _fetch_market_data(self, timeframe: str, limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            ohlcv = self.exchange_client.fetch_ohlcv(TradingConfig.SYMBOL, timeframe, limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df
            
        except Exception as e:
            logging.error(f"Failed to fetch {timeframe} data: {e}")
            return None
    
    def _get_ml_prediction(self, df: pd.DataFrame, market_condition: MarketCondition) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            if len(df) < 20:
                return 0.5, 0.5
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML
            latest = df.iloc[-1]
            features = np.array([
                latest['rsi'],
                latest['macd'],
                latest['ema_cross'],
                latest['bb_position'],
                latest['stoch_k'],
                latest['adx'],
                latest['volume_ratio'],
                latest['close'] / latest['open'] - 1  # price change
            ])
            
            prediction, confidence = self.ml_model.predict(features, market_condition.value)
            return prediction, confidence
            
        except Exception as e:
            logging.error(f"ML prediction failed: {e}")
            return 0.5, 0.5
    
    def _update_rsi_counter(self, df: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ RSI >70"""
        try:
            latest_rsi = df['rsi'].iloc[-1]
            if latest_rsi > TradingConfig.RSI_OVERBOUGHT:
                self.rsi_over_70_candles += 1
            else:
                self.rsi_over_70_candles = 0
                
        except Exception as e:
            logging.error(f"Failed to update RSI counter: {e}")
    
    def reevaluate_market(self):
        """–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            logging.info("üîÑ Market reevaluation started...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏
            # self.retrain_ml_model()
            
            self.last_market_reevaluation = datetime.now()
            logging.info("‚úÖ Market reevaluation completed")
            
        except Exception as e:
            logging.error(f"Market reevaluation failed: {e}")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs("models", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = TradingBot()
    bot.run()
