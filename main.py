import os
import time
import logging
import traceback
import threading
from typing import Optional, Tuple, Dict, Any
from datetime import datetime, timezone

import pandas as pd
import numpy as np

# ‚îÄ‚îÄ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from core.state_manager import StateManager
from trading.exchange_client import ExchangeClient, APIException
from analysis.scoring_engine import ScoringEngine
from telegram import bot_handler as tgbot
from utils.csv_handler import CSVHandler
from config.settings import TradingConfig

# ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CFG = TradingConfig()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config_errors = CFG.validate_config()
if config_errors:
    logging.warning("‚ö†Ô∏è Configuration issues found:")
    for error in config_errors:
        logging.warning(f"  - {error}")

# ‚îÄ‚îÄ ENV-–ø–æ—Ä–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ENV_MIN_SCORE = CFG.MIN_SCORE_TO_BUY
ENV_ENFORCE_AI_GATE = CFG.ENFORCE_AI_GATE
ENV_AI_MIN_TO_TRADE = CFG.AI_MIN_TO_TRADE

AI_ENABLE = CFG.AI_ENABLE
AI_FAILOVER_SCORE = CFG.AI_FAILOVER_SCORE

SYMBOL_DEFAULT = CFG.SYMBOL
TIMEFRAME_DEFAULT = CFG.TIMEFRAME

# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∏–Ω—Ñ–æ-–ª–æ–≥–æ–≤
ANALYSIS_INTERVAL_MIN = CFG.ANALYSIS_INTERVAL
INFO_LOG_INTERVAL_SEC = int(os.getenv("INFO_LOG_INTERVAL_SEC", "300"))  # 5 –º–∏–Ω—É—Ç


# ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è OHLCV -> DataFrame ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def ohlcv_to_df(ohlcv) -> pd.DataFrame:
    """CCXT OHLCV -> pandas DataFrame c –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume."""
    if not ohlcv:
        return pd.DataFrame()
    cols = ["time", "open", "high", "low", "close", "volume"]
    df = pd.DataFrame(ohlcv, columns=cols)
    df["time"] = pd.to_datetime(df["time"], unit="ms", utc=True)
    df.set_index("time", inplace=True)
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ float
    for c in ("open", "high", "low", "close", "volume"):
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df = df.dropna()
    return df


def atr(df: pd.DataFrame, period: int = 14) -> Optional[float]:
    """ATR –¥–ª—è risk-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""
    if df.empty or len(df) < period + 2:
        return None
    high = df["high"]
    low = df["low"]
    close = df["close"]
    prev_close = close.shift(1)

    tr1 = (high - low).abs()
    tr2 = (high - prev_close).abs()
    tr3 = (low - prev_close).abs()
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    atr_series = tr.ewm(alpha=1 / period, adjust=False).mean()
    val = float(atr_series.iloc[-1])
    return val


# ‚îÄ‚îÄ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏—á ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def ema(series: pd.Series, span: int) -> pd.Series:
    return series.ewm(span=span, adjust=False).mean()


def sma(series: pd.Series, window: int) -> pd.Series:
    return series.rolling(window=window, min_periods=window).mean()


def rsi(series: pd.Series, period: int = 14) -> pd.Series:
    delta = series.diff()
    up = np.where(delta > 0, delta, 0.0)
    down = np.where(delta < 0, -delta, 0.0)
    roll_up = pd.Series(up, index=series.index).rolling(period, min_periods=period).mean()
    roll_down = pd.Series(down, index=series.index).rolling(period, min_periods=period).mean()
    rs = roll_up / (roll_down + 1e-12)
    return 100.0 - (100.0 / (1.0 + rs))


def macd(series: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9) -> Tuple[pd.Series, pd.Series, pd.Series]:
    macd_line = ema(series, fast) - ema(series, slow)
    signal_line = ema(macd_line, signal)
    hist = macd_line - signal_line
    return macd_line, signal_line, hist


# ‚îÄ‚îÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–∞–¥–∞–ø—Ç–µ—Ä—ã –ø–æ–¥ —Ç–µ–∫—É—â–∏–π PositionManager ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _notify_entry_tg(symbol: str, entry_price: float, amount_usd: float,
                     tp_pct: float, sl_pct: float, tp1_atr: float, tp2_atr: float,
                     buy_score: float = None, ai_score: float = None, amount_frac: float = None):
    """–ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ —Å–∏–≥–Ω–∞—Ç—É—Ä—É notify_entry(...) –∏–∑ PositionManager."""
    parts = [f"üì• –í—Ö–æ–¥ LONG {symbol} @ {entry_price:.6f}"]
    parts.append(f"–°—É–º–º–∞: ${amount_usd:.2f}")
    parts.append(f"TP%‚âà{tp_pct:.6f} | SL%‚âà{sl_pct:.6f}")
    extra = []
    if buy_score is not None and ai_score is not None:
        extra.append(f"Score {buy_score:.2f} / AI {ai_score:.2f}")
    if amount_frac is not None:
        extra.append(f"Size {int(amount_frac * 100)}%")
    if extra:
        parts.append(" | ".join(extra))
    try:
        tgbot.send_message("\n".join(parts))
    except Exception:
        logging.exception("notify_entry send failed")


def _notify_close_tg(symbol: str, price: float, reason: str,
                     pnl_pct: float, pnl_abs: float = None,
                     buy_score: float = None, ai_score: float = None, amount_usd: float = None):
    """–ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ notify_close(...) —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏."""
    emoji = "‚úÖ" if (pnl_pct or 0) >= 0 else "‚ùå"
    parts = [f"{emoji} –ó–∞–∫—Ä—ã—Ç–∏–µ {symbol} @ {price:.6f}", f"{reason} | PnL {pnl_pct:.2f}%"]
    extra = []
    if pnl_abs is not None:
        extra.append(f"{pnl_abs:.2f}$")
    if amount_usd is not None:
        extra.append(f"Size ${amount_usd:.2f}")
    if buy_score is not None and ai_score is not None:
        extra.append(f"Score {buy_score:.2f} / AI {ai_score:.2f}")
    if extra:
        parts[-1] += f" ({' | '.join(extra)})"
    try:
        tgbot.send_message("\n".join(parts))
    except Exception:
        logging.exception("notify_close send failed")


# ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –∫–ª–∞—Å—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TradingBot:
    def __init__(self):
        # –∫–æ–Ω—Ñ–∏–≥–∏
        self.symbol = SYMBOL_DEFAULT
        self.timeframe_15m = TIMEFRAME_DEFAULT
        self.trade_amount_usd = CFG.POSITION_SIZE_USD
        self.cycle_minutes = ANALYSIS_INTERVAL_MIN

        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self._trading_lock = threading.RLock()
        self._last_decision_candle = None  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏

        # –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        self.state = StateManager()
        self.exchange = ExchangeClient(
            api_key=CFG.GATE_API_KEY,
            api_secret=CFG.GATE_API_SECRET,
            safe_mode=CFG.SAFE_MODE
        )

        # PositionManager - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        from trading.position_manager import SimplePositionManager
        self.pm = SimplePositionManager(self.exchange, self.state, _notify_entry_tg, _notify_close_tg)

        # –°–∫–æ—É—Ä–∏–Ω–≥
        self.scorer = ScoringEngine()
        try:
            if hasattr(self.scorer, "min_score_to_buy"):
                self.scorer.min_score_to_buy = ENV_MIN_SCORE
        except Exception:
            pass

        # –¢–∏–∫–∞—é—â–∏–π –ª–æ–≥ –∫–∞–∂–¥—ã–µ INFO_LOG_INTERVAL_SEC
        self._last_info_log_ts = 0.0

        # ‚îÄ‚îÄ AI –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.ai_enabled = AI_ENABLE
        self.ai_failover = AI_FAILOVER_SCORE
        self.ml_model = None
        self.ml_ready = False
        if self.ai_enabled:
            try:
                from ml.adaptive_model import AdaptiveMLModel
                self.ml_model = AdaptiveMLModel(models_dir="models")
                if hasattr(self.ml_model, "load_models"):
                    try:
                        self.ml_model.load_models()
                    except Exception:
                        pass
                self.ml_ready = True
                logging.info("‚úÖ AI model initialized")
            except Exception as e:
                self.ml_model = None
                self.ml_ready = False
                logging.warning(f"AI model not available: {e}")

        logging.info("üöÄ Trading bot initialized")

    # ‚îÄ‚îÄ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏—á –¥–ª—è AI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _build_features(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–§–∏—á–∏ —Å—Ç—Ä–æ—è—Ç—Å—è –ø–æ –ó–ê–ö–†–´–¢–û–ô —Å–≤–µ—á–µ (t-1), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –±—É–¥—É—â–µ–≥–æ."""
        feats: Dict[str, Any] = {}
        try:
            if df is None or df.empty or len(df) < 60:
                return feats
            
            x = df.copy()
            close = x["close"]

            # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi_14 = rsi(close, 14)
            macd_line, macd_sig, macd_hist = macd(close, 12, 26, 9)
            ema_20 = ema(close, 20)
            ema_50 = ema(close, 50)
            sma_20 = sma(close, 20)
            sma_50 = sma(close, 50)

            # –∏–∑–º–µ–Ω–µ–Ω–∏—è
            price_change_1 = close.pct_change(1)
            price_change_3 = close.pct_change(3)
            price_change_5 = close.pct_change(5)
            vol_change = x["volume"].pct_change(5)

            # ATR 14
            atr_val_series = self._series_atr(x, 14)

            # –±–µ—Ä–µ–º t-1
            feats = {
                "rsi": float(rsi_14.iloc[-2]) if not np.isnan(rsi_14.iloc[-2]) else None,
                "macd": float(macd_line.iloc[-2]),
                "macd_signal": float(macd_sig.iloc[-2]),
                "macd_hist": float(macd_hist.iloc[-2]),
                "ema_20": float(ema_20.iloc[-2]),
                "ema_50": float(ema_50.iloc[-2]),
                "sma_20": float(sma_20.iloc[-2]) if not np.isnan(sma_20.iloc[-2]) else None,
                "sma_50": float(sma_50.iloc[-2]) if not np.isnan(sma_50.iloc[-2]) else None,
                "atr_14": float(atr_val_series.iloc[-2]) if not np.isnan(atr_val_series.iloc[-2]) else None,
                "price_change_1": float(price_change_1.iloc[-2]) if not np.isnan(price_change_1.iloc[-2]) else None,
                "price_change_3": float(price_change_3.iloc[-2]) if not np.isnan(price_change_3.iloc[-2]) else None,
                "price_change_5": float(price_change_5.iloc[-2]) if not np.isnan(price_change_5.iloc[-2]) else None,
                "vol_change": float(vol_change.iloc[-2]) if not np.isnan(vol_change.iloc[-2]) else None,
                "market_condition": self._market_condition_guess(close.iloc[:-1]),
            }
        except Exception as e:
            logging.exception(f"Feature build failed: {e}")
        return feats

    def _series_atr(self, df: pd.DataFrame, period: int = 14) -> pd.Series:
        high = df["high"]
        low = df["low"]
        close = df["close"]
        prev_close = close.shift(1)
        tr1 = (high - low).abs()
        tr2 = (high - prev_close).abs()
        tr3 = (low - prev_close).abs()
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        return tr.ewm(alpha=1 / period, adjust=False).mean()

    def _market_condition_guess(self, close_series: pd.Series) -> str:
        try:
            e20 = ema(close_series, 20).iloc[-1]
            e50 = ema(close_series, 50).iloc[-1]
            if np.isnan(e20) or np.isnan(e50):
                return "sideways"
            if e20 > e50 * 1.002:
                return "bull"
            if e20 < e50 * 0.998:
                return "bear"
            return "sideways"
        except Exception:
            return "sideways"

    # ‚îÄ‚îÄ AI-–º–æ–¥–µ–ª—å (–æ—Ü–µ–Ω–∫–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _predict_ai_score(self, df_15m: pd.DataFrame) -> float:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ AI score —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."""
        try:
            if not self.ai_enabled or not self.ml_ready or self.ml_model is None:
                logging.debug("ü§ñ AI disabled or not ready, returning failover")
                return self.ai_failover

            feats = self._build_features(df_15m)
            if not feats:
                logging.debug("ü§ñ No features built, returning failover")
                return self.ai_failover

            logging.debug(f"üîç AI Features built: {len(feats)} features")

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å predict() method
            if hasattr(self.ml_model, "predict"):
                try:
                    res = self.ml_model.predict(feats, feats.get("market_condition"))
                    logging.debug(f"üîç AI predict() returned: {res}, type: {type(res)}")
                    
                    if isinstance(res, tuple) and len(res) >= 2:
                        pred, conf = res  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
                        ai = float(conf)
                        logging.debug(f"ü§ñ AI predict [tuple]: pred={pred}, conf={conf}")
                    elif isinstance(res, dict):
                        ai = float(res.get("confidence", self.ai_failover))
                        logging.debug(f"ü§ñ AI predict [dict]: confidence={ai}")
                    else:
                        ai = float(res)
                        logging.debug(f"ü§ñ AI predict [scalar]: {ai}")
                    
                    result = max(0.0, min(1.0, ai))
                    logging.debug(f"ü§ñ AI predict result: {result}")
                    return result
                    
                except Exception as e:
                    logging.debug(f"predict(...) failed: {e}, trying predict_proba(...)")

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: Fallback –∫ predict_proba —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if hasattr(self.ml_model, "predict_proba"):
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å DataFrame
                    ai = self.ml_model.predict_proba(df_15m.tail(100))
                    ai = float(ai or self.ai_failover)
                    result = max(0.0, min(1.0, ai))
                    logging.debug(f"ü§ñ AI predict_proba result: {result}")
                    return result
                except Exception as e:
                    logging.debug(f"predict_proba(...) failed: {e}")

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if hasattr(self.ml_model, "_vec_from_features_dict"):
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dict –≤ –≤–µ–∫—Ç–æ—Ä
                    feats_vec = self.ml_model._vec_from_features_dict(feats)
                    res = self.ml_model.predict(feats_vec, feats.get("market_condition"))
                    
                    if isinstance(res, tuple) and len(res) >= 2:
                        pred, conf = res
                        ai = float(conf)
                    else:
                        ai = float(res)
                    
                    result = max(0.0, min(1.0, ai))
                    logging.debug(f"ü§ñ AI vector predict result: {result}")
                    return result
                    
                except Exception as e:
                    logging.debug(f"Vector prediction failed: {e}")

        except Exception as e:
            logging.exception(f"AI predict failed: {e}")

        logging.debug(f"ü§ñ AI returning failover: {self.ai_failover}")
        return self.ai_failover

    # ‚îÄ‚îÄ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fetch_market(self) -> Tuple[pd.DataFrame, Optional[float], Optional[float]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º 15m OHLCV, —Å—á–∏—Ç–∞–µ–º ATR."""
        try:
            ohlcv_15m = self.exchange.fetch_ohlcv(self.symbol, timeframe=self.timeframe_15m, limit=200)
            df_15m = ohlcv_to_df(ohlcv_15m)
            if df_15m.empty:
                return pd.DataFrame(), None, None
            last_price = float(df_15m["close"].iloc[-1])
            atr_val = atr(df_15m)
            return df_15m, last_price, atr_val
        except Exception as e:
            logging.error(f"Failed to fetch market data: {e}")
            return pd.DataFrame(), None, None

    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    def _is_position_active(self) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            with self._trading_lock:
                st = self.state.state
                return bool(st.get("in_position") or st.get("opening"))
        except Exception as e:
            logging.error(f"Error checking position state: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    def _get_candle_id(self, df: pd.DataFrame) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏"""
        try:
            if df.empty:
                return ""
            return df.index[-1].strftime("%Y%m%d_%H%M")
        except Exception:
            return ""

    # ‚îÄ‚îÄ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _trading_cycle(self):
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        with self._trading_lock:
            try:
                df_15m, last_price, atr_val = self._fetch_market()
                if df_15m.empty or last_price is None:
                    logging.error("Failed to fetch market data")
                    return

                # ‚úÖ –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
                if self._is_position_active():
                    logging.debug(f"üíº Position active, managing existing position")
                    # –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π
                    try:
                        self.pm.manage(self.symbol, last_price, atr_val or 0.0)
                    except Exception:
                        logging.exception("Error in manage state")
                    return  # ‚úÖ –ü–†–ï–†–´–í–ê–ï–ú —Ü–∏–∫–ª - –Ω–µ –∏—â–µ–º –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—ã

                # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ô –°–í–ï–ß–ò: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–≤—ã–º —Å–≤–µ—á–∞–º
                current_candle_id = self._get_candle_id(df_15m)
                if current_candle_id == self._last_decision_candle:
                    logging.debug(f"‚è© Same candle {current_candle_id}, skipping decision logic")
                    return

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI-—Å–∫–æ—Ä–∏–Ω–≥–∞
                ai_score_raw = self._predict_ai_score(df_15m)
                logging.debug(f"üîç AI Debug: raw_score={ai_score_raw}, type={type(ai_score_raw)}")

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ scorer
                try:
                    if hasattr(self.scorer, 'evaluate'):
                        result = self.scorer.evaluate(df_15m, ai_score=ai_score_raw)
                    elif hasattr(self.scorer, 'calculate_scores'):
                        result = self.scorer.calculate_scores(df_15m, ai_score=ai_score_raw)
                    elif hasattr(self.scorer, 'score'):
                        result = self.scorer.score(df_15m, ai_score=ai_score_raw)
                    else:
                        logging.warning("‚ö†Ô∏è No known scoring method found, using defaults")
                        result = (0.5, ai_score_raw, {})
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if isinstance(result, tuple) and len(result) >= 3:
                        buy_score, ai_score_eval, details = result
                    elif isinstance(result, tuple) and len(result) >= 2:
                        buy_score, ai_score_eval = result
                        details = {}
                    else:
                        buy_score, ai_score_eval, details = 0.5, ai_score_raw, {}
                        
                except Exception as e:
                    logging.error(f"Scoring failed: {e}")
                    buy_score, ai_score_eval, details = 0.5, ai_score_raw, {}

                ai_score = max(0.0, min(1.0, float(ai_score_eval if ai_score_eval is not None else ai_score_raw)))
                
                logging.debug(f"üîç Scoring Debug: buy={buy_score}, ai_eval={ai_score_eval}, final_ai={ai_score}")

                # ‚îÄ‚îÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–æ–≥ –∫–∞–∂–¥—ã–µ INFO_LOG_INTERVAL_SEC ‚îÄ‚îÄ
                now = time.time()
                if now - self._last_info_log_ts >= INFO_LOG_INTERVAL_SEC:
                    market_cond_info = details.get("market_condition", "sideways")
                    logging.info(f"üìä Market: {market_cond_info}")
                    logging.info(
                        f"üìä Buy Score: {buy_score:.2f}/{getattr(self.scorer, 'min_score_to_buy', ENV_MIN_SCORE):.2f} "
                        f"| AI: {ai_score:.2f}"
                    )
                    self._last_info_log_ts = now

                # ‚îÄ‚îÄ –õ–æ–≥ —Å–Ω–∏–º–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ (–¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è) ‚îÄ‚îÄ
                try:
                    CSVHandler.log_signal_snapshot({
                        "timestamp": df_15m.index[-1].isoformat().replace("+00:00", "Z"),
                        "symbol": self.symbol,
                        "timeframe": self.timeframe_15m,
                        "close": float(df_15m["close"].iloc[-1]),
                        "buy_score": float(buy_score),
                        "ai_score": float(ai_score),
                        "market_condition": details.get("market_condition", "sideways"),
                        "decision": "precheck",
                        "reason": "periodic_snapshot"
                    })
                except Exception:
                    pass

                # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–≤–æ–π —Å–≤–µ—á–µ
                try:
                    # ‚úÖ –ü–ï–†–ï–î –ö–ê–ñ–î–û–ô –ü–†–û–í–ï–†–ö–û–ô: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –ù–ï –∞–∫—Ç–∏–≤–Ω–∞
                    if self._is_position_active():
                        logging.info("‚è© Position became active during cycle, aborting entry logic")
                        self._last_decision_candle = current_candle_id
                        return

                    # 1) –ø–æ—Ä–æ–≥ –ø–æ buy_score
                    min_thr = getattr(self.scorer, "min_score_to_buy", ENV_MIN_SCORE)
                    if buy_score < float(min_thr):
                        logging.info(f"‚ùé Filtered by Buy Score (score={buy_score:.2f} < {float(min_thr):.2f})")
                        self._last_decision_candle = current_candle_id
                        return

                    # ‚úÖ –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ AI gate
                    if self._is_position_active():
                        logging.info("‚è© Position detected before AI gate, aborting")
                        self._last_decision_candle = current_candle_id
                        return

                    # 2) AI gate
                    if ENV_ENFORCE_AI_GATE and (ai_score < ENV_AI_MIN_TO_TRADE):
                        logging.info(f"‚õî AI gate: ai={ai_score:.2f} < {ENV_AI_MIN_TO_TRADE:.2f} ‚Üí –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω")
                        try:
                            tgbot.send_message(
                                f"‚õî –í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω AI-–≥–µ–π—Ç–æ–º: ai={ai_score:.2f} < {ENV_AI_MIN_TO_TRADE:.2f}"
                            )
                        except Exception:
                            pass
                        self._last_decision_candle = current_candle_id
                        return

                    # ‚úÖ –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
                    if self._is_position_active():
                        logging.info("‚è© Position detected before position sizing, aborting")
                        self._last_decision_candle = current_candle_id
                        return

                    # 3) —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    frac = self.scorer.position_fraction(ai_score)
                    usd_planned = float(self.trade_amount_usd) * float(frac)
                    min_cost = self.exchange.market_min_cost(self.symbol) or 0.0
                    logging.info(
                        f"SIZER: base={self.trade_amount_usd:.2f} ai={ai_score:.2f} "
                        f"-> planned={usd_planned:.2f}, min_cost={min_cost:.2f}"
                    )

                    if frac <= 0.0 or usd_planned <= 0.0:
                        msg = f"‚õî AI Score {ai_score:.2f} -> position 0%. –í—Ö–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω."
                        logging.info(msg)
                        try:
                            tgbot.send_message(msg)
                        except Exception:
                            pass
                        self._last_decision_candle = current_candle_id
                        return

                    # ‚îÄ‚îÄ market_condition / pattern –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±—ç–∫ ‚îÄ‚îÄ
                    market_condition = details.get("market_condition", self._market_condition_guess(df_15m["close"].iloc[:-1]))
                    pattern = details.get("pattern", "")

                    # ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
                    if self._is_position_active():
                        logging.info("‚è© Final check: position active, canceling entry")
                        self._last_decision_candle = current_candle_id
                        return

                    # 4) –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
                    try:
                        logging.info(f"üîí Attempting to open position: {self.symbol} ${usd_planned:.2f}")
                        
                        result = self.pm.open_long(
                            symbol=self.symbol,
                            amount_usd=usd_planned,
                            entry_price=last_price,
                            atr=(atr_val or 0.0),
                            buy_score=buy_score,
                            ai_score=ai_score,
                            amount_frac=frac,
                            market_condition=market_condition,
                            pattern=pattern,
                        )
                        
                        if result is not None:
                            logging.info(f"‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {self.symbol} –Ω–∞ ${usd_planned:.2f}")
                            # –ª–æ–≥ –≤—Ö–æ–¥–∞ –≤ CSV
                            try:
                                CSVHandler.log_open_trade({
                                    "timestamp": df_15m.index[-1].isoformat().replace("+00:00", "Z"),
                                    "symbol": self.symbol,
                                    "side": "LONG",
                                    "entry_price": float(last_price),
                                    "qty_usd": float(usd_planned),
                                    "reason": "strategy_enter",
                                    "buy_score": float(buy_score),
                                    "ai_score": float(ai_score),
                                    "entry_ts": df_15m.index[-1].isoformat().replace("+00:00", "Z"),
                                    "market_condition": market_condition,
                                    "pattern": pattern,
                                })
                            except Exception:
                                pass
                        else:
                            logging.warning("‚ö†Ô∏è Position opening returned None")

                    except APIException as e:
                        logging.warning(f"üí§ –ë–∏—Ä–∂–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –≤—Ö–æ–¥: {e}")
                        try:
                            tgbot.send_message(f"üí§ –í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω –±–∏—Ä–∂–µ–π: {e}")
                        except Exception:
                            pass
                    except Exception as e:
                        logging.exception("Error while opening long")
                        try:
                            tgbot.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (—Å–º. –ª–æ–≥–∏)")
                        except Exception:
                            pass
                finally:
                    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å–≤–µ—á—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    self._last_decision_candle = current_candle_id

            except Exception as e:
                logging.error(f"Trading cycle error: {e}")
                # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤–µ—á—É
                try:
                    if df_15m is not None and not df_15m.empty:
                        self._last_decision_candle = self._get_candle_id(df_15m)
                except Exception:
                    pass

    # ‚îÄ‚îÄ –≤–Ω–µ—à–Ω–∏–π –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def run(self):
        logging.info("üìä Bot started, entering main loop...")
        while True:
            try:
                self._trading_cycle()
            except Exception as e:
                logging.error(f"Cycle error: {e}\n{traceback.format_exc()}")
            time.sleep(self.cycle_minutes * 60)