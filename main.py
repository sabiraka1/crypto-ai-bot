import os
import time
import logging
import traceback
import pandas as pd
from typing import Optional, Tuple

# ‚îÄ‚îÄ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from core.state_manager import StateManager
from trading.exchange_client import ExchangeClient, APIException
from analysis.scoring_engine import ScoringEngine
from telegram import bot_handler as tgbot  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ send_message

# ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# ‚îÄ‚îÄ ENV-–ø–æ—Ä–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ—á–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ENV_MIN_SCORE = float(os.getenv("MIN_SCORE_TO_BUY", "0.65"))  # –µ—Å–ª–∏ scorer –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
ENV_ENFORCE_AI_GATE = str(os.getenv("ENFORCE_AI_GATE", "1")).strip().lower() in ("1", "true", "yes", "on")
ENV_AI_MIN_TO_TRADE = float(os.getenv("AI_MIN_TO_TRADE", "0.70"))

SYMBOL_DEFAULT = os.getenv("SYMBOL", "BTC/USDT")
TIMEFRAME_DEFAULT = os.getenv("TIMEFRAME", "15m")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∏–Ω—Ñ–æ-–ª–æ–≥–æ–≤
ANALYSIS_INTERVAL_MIN = int(os.getenv("ANALYSIS_INTERVAL", "15"))         # –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
INFO_LOG_INTERVAL_SEC = int(os.getenv("INFO_LOG_INTERVAL_SEC", "600"))    # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è OHLCV -> DataFrame ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def ohlcv_to_df(ohlcv) -> pd.DataFrame:
    """
    CCXT OHLCV -> pandas DataFrame c –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume.
    –ò–Ω–¥–µ–∫—Å ‚Äî UTC datetime.
    """
    if not ohlcv:
        return pd.DataFrame()
    cols = ["time", "open", "high", "low", "close", "volume"]
    df = pd.DataFrame(ohlcv, columns=cols)
    df["time"] = pd.to_datetime(df["time"], unit="ms", utc=True)
    df.set_index("time", inplace=True)
    return df


def atr(df: pd.DataFrame, period: int = 14) -> Optional[float]:
    """
    ATR –¥–ª—è risk-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏: high, low, close.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR.
    """
    if df.empty or len(df) < period + 2:
        return None
    high = df["high"]
    low = df["low"]
    close = df["close"]
    prev_close = close.shift(1)

    tr1 = (high - low).abs()
    tr2 = (high - prev_close).abs()
    tr3 = (low - prev_close).abs()
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    atr_series = tr.ewm(alpha=1 / period, adjust=False).mean()
    val = float(atr_series.iloc[-1])
    return val


# ‚îÄ‚îÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-–∞–¥–∞–ø—Ç–µ—Ä—ã –ø–æ–¥ —Ç–µ–∫—É—â–∏–π PositionManager ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _notify_entry_tg(symbol: str, entry_price: float, amount_usd: float,
                     tp_pct: float, sl_pct: float, tp1_atr: float, tp2_atr: float,
                     buy_score: float = None, ai_score: float = None, amount_frac: float = None):
    """–ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ —Å–∏–≥–Ω–∞—Ç—É—Ä—É notify_entry(...) –∏–∑ PositionManager."""
    parts = [f"üì• –í—Ö–æ–¥ LONG {symbol} @ {entry_price:.4f}"]
    parts.append(f"–°—É–º–º–∞: ${amount_usd:.2f}")
    parts.append(f"TP%‚âà{tp_pct:.4f} | SL%‚âà{sl_pct:.4f}")
    parts.append(f"TP1‚âà{tp1_atr:.4f} | TP2‚âà{tp2_atr:.4f}")
    extra = []
    if buy_score is not None and ai_score is not None:
        extra.append(f"Score {buy_score:.2f} / AI {ai_score:.2f}")
    if amount_frac is not None:
        extra.append(f"Size {int(amount_frac * 100)}%")
    if extra:
        parts.append(" | ".join(extra))
    try:
        tgbot.send_message("\n".join(parts))
    except Exception:
        logging.exception("notify_entry send failed")


def _notify_close_tg(symbol: str, price: float, reason: str,
                     pnl_pct: float, pnl_abs: float = None,
                     buy_score: float = None, ai_score: float = None, amount_usd: float = None):
    """–ê–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ notify_close(...) —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏."""
    emoji = "‚úÖ" if (pnl_pct or 0) >= 0 else "‚ùå"
    parts = [f"{emoji} –ó–∞–∫—Ä—ã—Ç–∏–µ {symbol} @ {price:.4f}", f"{reason} | PnL {pnl_pct:.2f}%"]
    extra = []
    if pnl_abs is not None:
        extra.append(f"{pnl_abs:.2f}$")
    if amount_usd is not None:
        extra.append(f"Size ${amount_usd:.2f}")
    if buy_score is not None and ai_score is not None:
        extra.append(f"Score {buy_score:.2f} / AI {ai_score:.2f}")
    if extra:
        parts[-1] += f" ({' | '.join(extra)})"
    try:
        tgbot.send_message("\n".join(parts))
    except Exception:
        logging.exception("notify_close send failed")


# ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –∫–ª–∞—Å—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TradingBot:
    def __init__(self):
        # –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ .env
        self.symbol = SYMBOL_DEFAULT
        self.timeframe_15m = TIMEFRAME_DEFAULT
        self.trade_amount_usd = float(os.getenv("TRADE_AMOUNT", "50"))
        self.cycle_minutes = ANALYSIS_INTERVAL_MIN

        # –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        self.state = StateManager()
        self.exchange = ExchangeClient(
            api_key=os.getenv("GATE_API_KEY"),
            api_secret=os.getenv("GATE_API_SECRET"),
        )

        # PositionManager (+ TG —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        from trading.position_manager import PositionManager
        self.pm = PositionManager(self.exchange, self.state, _notify_entry_tg, _notify_close_tg)

        # –°–∫–æ—É—Ä–∏–Ω–≥
        self.scorer = ScoringEngine()
        # –µ—Å–ª–∏ ScoringEngine –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç min_score, –ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ ENV
        try:
            if hasattr(self.scorer, "min_score_to_buy"):
                self.scorer.min_score_to_buy = ENV_MIN_SCORE
        except Exception:
            pass

        # –¢–∏–∫–∞—é—â–∏–π –ª–æ–≥ –∫–∞–∂–¥—ã–µ INFO_LOG_INTERVAL_SEC
        self._last_info_log_ts = 0.0

        logging.info("‚úÖ Loaded 0 models")
        logging.info("üöÄ Trading bot initialized")

    # ‚îÄ‚îÄ AI-–º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _predict_ai_score(self, df_15m: pd.DataFrame) -> float:
        """
        –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –æ—Ü–µ–Ω–∫—É AI –∏–∑ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.55 (—É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å).
        """
        try:
            from ml.adaptive_model import AdaptiveMLModel  # type: ignore
            model = AdaptiveMLModel()
            prob = getattr(model, "predict_proba", None)
            if callable(prob):
                ai = float(prob(df_15m.tail(100)) or 0.55)
                return max(0.0, min(1.0, ai))
        except Exception:
            pass
        return 0.55

    # ‚îÄ‚îÄ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _fetch_market(self) -> Tuple[pd.DataFrame, Optional[float], Optional[float]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ–º 15m OHLCV, —Å—á–∏—Ç–∞–µ–º ATR.
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º: (df_15m, last_price, atr_val)
        """
        try:
            ohlcv_15m = self.exchange.fetch_ohlcv(self.symbol, timeframe=self.timeframe_15m, limit=200)
            df_15m = ohlcv_to_df(ohlcv_15m)
            if df_15m.empty:
                return pd.DataFrame(), None, None
            last_price = float(df_15m["close"].iloc[-1])
            atr_val = atr(df_15m)
            return df_15m, last_price, atr_val
        except Exception as e:
            logging.error(f"Failed to fetch market data: {e}")
            return pd.DataFrame(), None, None

    # ‚îÄ‚îÄ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _trading_cycle(self):
        df_15m, last_price, atr_val = self._fetch_market()
        if df_15m.empty or last_price is None:
            logging.error("Failed to fetch market data")
            return

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π (–ø–æ—Å–ª–µ–¥–Ω–µ–π) —Å–≤–µ—á–∏
        candle_ts = int(df_15m.index[-1].timestamp())
        last_seen = self.state.state.get("last_candle_ts")

        # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è –ª–æ–≥–æ–≤ –∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏–π)
        ai_score_raw = self._predict_ai_score(df_15m)
        buy_score, ai_score_eval, details = self.scorer.evaluate(df_15m, ai_score=ai_score_raw)
        ai_score = max(0.0, min(1.0, float(ai_score_eval if ai_score_eval is not None else ai_score_raw)))

        macd_hist = details.get("macd_hist")
        rsi_val = details.get("rsi")
        macd_growing = details.get("macd_growing", False)

        macd_pts = (1.0 if (macd_hist is not None and macd_hist > 0) else 0.0) + (1.0 if macd_growing else 0.0)
        rsi_pts = 1.0 if (rsi_val is not None and 45 <= rsi_val <= 65) else 0.0

        # ‚îÄ‚îÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–æ–≥ –∫–∞–∂–¥—ã–µ INFO_LOG_INTERVAL_SEC (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é) ‚îÄ‚îÄ
        now = time.time()
        if now - self._last_info_log_ts >= INFO_LOG_INTERVAL_SEC:
            market_cond = "sideways"  # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
            confidence = 0.01
            logging.info(f"üìä Market Analysis: {market_cond}, Confidence: {confidence:.2f}")
            logging.info("‚úÖ RSI in healthy range (+1 point)" if rsi_pts > 0 else "‚ÑπÔ∏è RSI outside healthy range")
            logging.info(
                f"üìä Buy Score: {buy_score:.2f}/{getattr(self.scorer, 'min_score_to_buy', ENV_MIN_SCORE):.2f} "
                f"| MACD: {macd_pts:.1f} | AI: {ai_score:.2f}"
            )
            self._last_info_log_ts = now

        # ‚îÄ‚îÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –¥–µ–ª–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ ‚îÄ‚îÄ
        if self.state.state.get("in_position"):
            try:
                self.pm.manage(self.symbol, last_price, atr_val or 0.0)
            except Exception:
                logging.exception("Error in manage state")

        # ‚îÄ‚îÄ –†–µ—à–µ–Ω–∏–µ ¬´–≤–æ–π—Ç–∏/–Ω–µ—Ç¬ª –¢–û–õ–¨–ö–û –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ ‚îÄ‚îÄ
        # –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ —Å–≤–µ—á–∞, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ ‚Äî —Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
        if last_seen is not None and candle_ts == int(last_seen):
            return

        # –ù–æ–≤–∞—è —Å–≤–µ—á–∞: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ, –∞ –ø–æ—Ç–æ–º –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë ts
        try:
            # 1) –ø–æ—Ä–æ–≥ –ø–æ buy_score
            min_thr = getattr(self.scorer, "min_score_to_buy", ENV_MIN_SCORE)
            if buy_score < float(min_thr):
                logging.info(f"‚ùé Filtered by Buy Score (score={buy_score:.2f} < {float(min_thr):.2f})")
                return

            # 2) AI gate (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
            if ENV_ENFORCE_AI_GATE and (ai_score < ENV_AI_MIN_TO_TRADE):
                logging.info(f"‚õî AI gate: ai={ai_score:.2f} < {ENV_AI_MIN_TO_TRADE:.2f} ‚Üí –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω")
                try:
                    tgbot.send_message(
                        f"‚õî –í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω AI-–≥–µ–π—Ç–æ–º: ai={ai_score:.2f} < {ENV_AI_MIN_TO_TRADE:.2f}"
                    )
                except Exception:
                    pass
                return

            # 3) —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            frac = self.scorer.position_fraction(ai_score)  # 0..1
            usd_planned = float(self.trade_amount_usd) * float(frac)
            min_cost = self.exchange.market_min_cost(self.symbol) or 0.0
            logging.info(
                f"SIZER: base={self.trade_amount_usd:.2f} ai={ai_score:.2f} "
                f"-> planned={usd_planned:.2f}, min_cost={min_cost:.2f}"
            )

            if frac <= 0.0 or usd_planned <= 0.0:
                msg = f"‚õî AI Score {ai_score:.2f} -> position 0%. –í—Ö–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω."
                logging.info(msg)
                try:
                    tgbot.send_message(msg)
                except Exception:
                    pass
                return

            # 4) –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ (PM —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç –¥–æ min_notional –∏ –Ω–µ –¥–∞—Å—Ç –¥–≤–æ–π–Ω–æ–π –≤—Ö–æ–¥)
            try:
                self.pm.open_long(
                    self.symbol,
                    usd_planned,
                    entry_price=last_price,
                    atr=(atr_val or 0.0),
                    buy_score=buy_score,
                    ai_score=ai_score,
                    amount_frac=frac,
                )
                logging.info(f"‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {self.symbol} –Ω–∞ ${usd_planned:.2f}")
            except APIException as e:
                logging.warning(f"üí§ –ë–∏—Ä–∂–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –≤—Ö–æ–¥: {e}")
                try:
                    tgbot.send_message(f"üí§ –í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω –±–∏—Ä–∂–µ–π: {e}")
                except Exception:
                    pass
            except Exception:
                logging.exception("Error while opening long")
                try:
                    tgbot.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (—Å–º. –ª–æ–≥–∏)")
                except Exception:
                    pass
        finally:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å–≤–µ—á—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            try:
                self.state.state["last_candle_ts"] = candle_ts
                self.state.save_state()
            except Exception:
                pass

    # ‚îÄ‚îÄ –≤–Ω–µ—à–Ω–∏–π –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def run(self):
        logging.info("üìä Bot started, entering main loop...")
        while True:
            try:
                self._trading_cycle()
            except Exception as e:
                logging.error(f"Cycle error: {e}\n{traceback.format_exc()}")
            time.sleep(self.cycle_minutes * 60)
