# main.py ‚Äî —Ç–æ–Ω–∫–∏–π –ª–∞—É–Ω—á–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ (–±–æ—Ç–∞)

import os
import sys
import time
import signal
import logging
from pathlib import Path
from typing import Type

# --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π –∏ –ª–æ–≥–æ–≤ ------------------------------------------------
REPO_ROOT = Path(__file__).resolve().parent
SRC_DIR = REPO_ROOT / "src"
DATA_DIR = REPO_ROOT / "data"
LOG_DIR = DATA_DIR / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

if str(SRC_DIR) not in sys.path:
    sys.path.insert(0, str(SRC_DIR))

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_DIR / "bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ ------------------------------------------------
from crypto_ai_bot.config.settings import Settings
from crypto_ai_bot.core.state_manager import StateManager
from crypto_ai_bot.core.events import EventBus
from crypto_ai_bot.trading.exchange_client import ExchangeClient
from crypto_ai_bot.trading.position_manager import PositionManager
from crypto_ai_bot.trading.risk_manager import RiskManager

# –ü–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∞—Ç–∞–∫–ª–∞—Å—Å–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Deps –∏–ª–∏ TradingDeps)
try:
    from crypto_ai_bot.trading.bot import TradingBot, Deps as _Deps  # —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–π–º–∏–Ω–≥
except Exception:
    from crypto_ai_bot.trading.bot import TradingBot, TradingDeps as _Deps  # –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π

Deps: Type[_Deps] = _Deps  # type: ignore[assignment]


def build_deps() -> Deps:
    """–°–æ–∑–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("üîß Building bot dependencies...")

    # 1) –ö–æ–Ω—Ñ–∏–≥
    cfg = Settings.load() if hasattr(Settings, "load") else Settings()  # type: ignore[operator]
    # NEW: –≤—ã—Å—Ç–∞–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –≤—ã–≤–µ–¥–µ–º —Å–≤–æ–¥–∫—É/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    try:
        logging.getLogger().setLevel(getattr(logging, str(cfg.LOG_LEVEL).upper(), logging.INFO))
    except Exception:
        pass
    logger.info(cfg.summary())
    issues = cfg.validate()
    for err in issues:
        logger.warning(f"‚ö†Ô∏è Config issue: {err}")
    logger.info("‚úÖ Configuration loaded")

    # 2) –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    events = EventBus()
    exchange = ExchangeClient(cfg)
    state = StateManager(cfg)
    risk = RiskManager(cfg)

    # 3) PositionManager –æ–∂–∏–¥–∞–µ—Ç (exchange, state, settings, events)
    positions = PositionManager(
        exchange=exchange,
        state=state,
        settings=cfg,
        events=events,
    )

    deps = Deps(
        settings=cfg,
        exchange=exchange,
        state=state,
        risk=risk,
        positions=positions,
        events=events,
    )

    logger.info("‚úÖ All dependencies initialized")
    return deps


def run() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C / SIGTERM."""
    logger.info("üöÄ Trading bot starting...")

    deps = build_deps()
    bot = TradingBot(deps)

    def graceful_stop(*_args):
        logger.info("üõë Received shutdown signal, stopping bot gracefully...")
        try:
            bot.stop()
            logger.info("‚úÖ Bot stopped successfully")
        except Exception as e:
            logger.error(f"‚ùå Error during bot shutdown: {e}")
        finally:
            sys.exit(0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–∞ Windows SIGTERM –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —ç—Ç–æ –æ–∫)
    try:
        signal.signal(signal.SIGTERM, graceful_stop)
    except Exception as e:
        logger.debug(f"SIGTERM handler not set: {e}")
    try:
        signal.signal(signal.SIGINT, graceful_stop)
    except Exception as e:
        logger.debug(f"SIGINT handler not set: {e}")

    logger.info("üöÄ Trading bot started successfully!")
    bot.start()

    # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ ¬´–æ–∂–∏–¥–∞–Ω–∏–µ –∂–∏–∑–Ω–∏¬ª –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        while True:
            time.sleep(1.0)
    except KeyboardInterrupt:
        graceful_stop()


if __name__ == "__main__":
    run()
