import joblib
import os
import numpy as np
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MODEL_PATH = "models/ai_model.pkl"
model = None

try:
    if os.path.exists(MODEL_PATH):
        model = joblib.load(MODEL_PATH)
        logger.info("‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    else:
        logger.warning("‚ö†Ô∏è AI-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å...")
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        from generate_model import create_model
        create_model()
        if os.path.exists(MODEL_PATH):
            model = joblib.load(MODEL_PATH)
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è AI-–º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")

def encode_signal(signal):
    """–ö–æ–¥–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–æ–¥–µ–ª–∏"""
    mapping = {
        'BUY': 1, 'STRONG_BUY': 1.5, 
        'SELL': -1, 'STRONG_SELL': -1.5, 
        'HOLD': 0, 'ERROR': 0
    }
    return mapping.get(signal, 0)

def encode_pattern_direction(direction):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    mapping = {
        'BULLISH': 1, 'BEARISH': -1, 
        'REVERSAL': 0.5, 'INDECISION': 0, 
        'NEUTRAL': 0
    }
    return mapping.get(direction, 0)

def evaluate_signal(result):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–∏ –∏ fallback –ª–æ–≥–∏–∫–∏"""
    signal = result.get("signal", "HOLD")
    rsi = result.get("rsi", 50)
    macd = result.get("macd", 0)
    pattern = result.get("pattern", "NONE")
    pattern_score = result.get("pattern_score", 0)
    pattern_direction = result.get("pattern_direction", "NEUTRAL")
    confidence = result.get("confidence", 0)
    buy_score = result.get("buy_score", 0)
    sell_score = result.get("sell_score", 0)

    logger.info(f"üß™ –ê–Ω–∞–ª–∏–∑: {signal} | RSI: {rsi:.1f} | MACD: {macd:.4f} | Pattern: {pattern} | Confidence: {confidence:.1f}%")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –º–æ–¥–µ–ª—å
    if model and signal and rsi is not None and macd is not None:
        try:
            signal_encoded = encode_signal(signal)
            pattern_dir_encoded = encode_pattern_direction(pattern_direction)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            input_data = np.array([[
                rsi, macd, signal_encoded, 
                pattern_score, pattern_dir_encoded,
                confidence, buy_score, sell_score
            ]])
            
            prediction = model.predict_proba(input_data)[0]
            # –ë–µ—Ä–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            ai_score = round(float(prediction[1] if len(prediction) > 1 else prediction[0]), 3)
            
            logger.info(f"ü§ñ AI Score: {ai_score}")
            return ai_score
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback: {e}")

    # Fallback –æ—Ü–µ–Ω–∫–∞
    return fallback_score(result)

def fallback_score(result):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è fallback –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    signal = result.get("signal", "HOLD")
    rsi = result.get("rsi", 50)
    macd = result.get("macd", 0)
    pattern = result.get("pattern", "NONE")
    pattern_score = result.get("pattern_score", 0)
    pattern_direction = result.get("pattern_direction", "NEUTRAL")
    confidence = result.get("confidence", 0)
    buy_score = result.get("buy_score", 0)
    sell_score = result.get("sell_score", 0)
    support = result.get("support", 0)
    resistance = result.get("resistance", 0)
    price = result.get("price", 0)

    score = 0.0

    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –∏ confidence
    if signal in ["BUY", "STRONG_BUY"]:
        score += 0.3
        if signal == "STRONG_BUY":
            score += 0.2
    elif signal in ["SELL", "STRONG_SELL"]:
        score += 0.3
        if signal == "STRONG_SELL":
            score += 0.2

    # –û—Ü–µ–Ω–∫–∞ –ø–æ confidence
    score += (confidence / 100) * 0.3

    # RSI –∞–Ω–∞–ª–∏–∑
    if signal in ["BUY", "STRONG_BUY"] and rsi < 35:
        score += 0.15
    elif signal in ["SELL", "STRONG_SELL"] and rsi > 65:
        score += 0.15
    elif 35 <= rsi <= 65:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
        score += 0.05

    # MACD –∞–Ω–∞–ª–∏–∑
    if signal in ["BUY", "STRONG_BUY"] and macd > 0:
        score += 0.1
    elif signal in ["SELL", "STRONG_SELL"] and macd < 0:
        score += 0.1

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if pattern_score >= 4:
        score += 0.1
        if pattern_score >= 6:
            score += 0.05
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ —Å–∏–≥–Ω–∞–ª–∞
    if (signal in ["BUY", "STRONG_BUY"] and pattern_direction == "BULLISH") or \
       (signal in ["SELL", "STRONG_SELL"] and pattern_direction == "BEARISH"):
        score += 0.1

    # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    if support > 0 and resistance > 0 and price > 0:
        if signal in ["BUY", "STRONG_BUY"] and price <= support * 1.01:  # –†—è–¥–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            score += 0.1
        elif signal in ["SELL", "STRONG_SELL"] and price >= resistance * 0.99:  # –†—è–¥–æ–º —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º
            score += 0.1

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    if buy_score >= 5 or sell_score >= 5:
        score += 0.1
    elif buy_score >= 3 or sell_score >= 3:
        score += 0.05

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º score –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
    score = min(max(score, 0), 1)
    score = round(score, 3)
    
    logger.info(f"‚ÑπÔ∏è Fallback Score: {score}")
    return score

def should_trade(signal, score, min_score=0.65):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É"""
    if signal in ["ERROR", "HOLD"]:
        return False
    
    if signal in ["STRONG_BUY", "STRONG_SELL"]:
        return score >= (min_score - 0.1)  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    return score >= min_score
