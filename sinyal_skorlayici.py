import joblib
import os
import numpy as np

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
MODEL_PATH = "models/ai_model.pkl"
model = None

if os.path.exists(MODEL_PATH):
    model = joblib.load(MODEL_PATH)
    print("‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
else:
    print("‚ö†Ô∏è AI-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.")

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ ===
def encode_signal(signal):
    return {'BUY': 1, 'SELL': -1, 'NONE': 0}.get(signal, 0)

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def evaluate_signal(result):
    signal = result.get("signal")
    rsi = result.get("rsi")
    macd = result.get("macd")
    
    if model and signal is not None and rsi is not None and macd is not None:
        signal_encoded = encode_signal(signal)
        input_data = np.array([[rsi, macd, signal_encoded]])
        
        try:
            prediction = model.predict_proba(input_data)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
            score = round(float(prediction), 2)

            if score >= 0.8:
                print(f"ü§ñ AI: –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
            else:
                print(f"ü§ñ AI: –°–ª–∞–±—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
            
            return score
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI-–º–æ–¥–µ–ª–∏: {e}")

    # –§–æ–ª–ª–±—ç–∫ ‚Äî —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞.")
    return fallback_score(result)

# === –†—É—á–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∫–∞–∫ –±—ã–ª–∞ —Ä–∞–Ω—å—à–µ ===
def fallback_score(result):
    signal = result.get("signal")
    rsi = result.get("rsi")
    macd = result.get("macd")
    patterns = result.get("patterns", [])
    score = 0.0

    if signal == "BUY" and rsi < 30:
        score += 0.3
    elif signal == "SELL" and rsi > 70:
        score += 0.3
    elif 45 <= rsi <= 55:
        score += 0.1

    if signal == "BUY" and macd > 0:
        score += 0.3
    elif signal == "SELL" and macd < 0:
        score += 0.3

    strong_bullish = ["hammer", "engulfing_bullish"]
    strong_bearish = ["shooting_star", "engulfing_bearish"]

    if signal == "BUY" and any(p in strong_bullish for p in patterns):
        score += 0.3
    elif signal == "SELL" and any(p in strong_bearish for p in patterns):
        score += 0.3

    score = round(score, 2)

    if score >= 0.8:
        print(f"üîç –†—É—á–Ω–æ–π: –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
    else:
        print(f"‚ÑπÔ∏è –†—É—á–Ω–æ–π: –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
    return score
