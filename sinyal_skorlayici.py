import joblib
import os
import numpy as np
import logging

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ ===
MODEL_PATH = "models/ai_model.pkl"
model = None

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
try:
    if os.path.exists(MODEL_PATH):
        model = joblib.load(MODEL_PATH)
        logger.info("‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    else:
        logger.warning("‚ö†Ô∏è AI-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")

# === –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
def encode_signal(signal):
    return {'BUY': 1, 'SELL': -1, 'HOLD': 0}.get(signal, 0)

# === –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å AI –∏–ª–∏ fallback ===
def evaluate_signal(result):
    signal = result.get("signal")
    rsi = result.get("rsi")
    macd = result.get("macd")
    patterns = result.get("patterns", [])

    logger.info(f"üß™ –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal}, RSI: {rsi}, MACD: {macd}, Patterns: {patterns}")

    if model and signal is not None and rsi is not None and macd is not None:
        try:
            signal_encoded = encode_signal(signal)
            input_data = np.array([[rsi, macd, signal_encoded]])
            logger.info(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {input_data}")

            prediction = model.predict_proba(input_data)[0][1]
            score = round(float(prediction), 2)

            if score >= 0.6:
                logger.info(f"ü§ñ AI: –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
            else:
                logger.info(f"ü§ñ AI: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")

            return score
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI-–º–æ–¥–µ–ª–∏: {e}")

    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞.")
    return fallback_score(result)

# === Fallback –ª–æ–≥–∏–∫–∞ ===
def fallback_score(result):
    signal = result.get("signal")
    rsi = result.get("rsi")
    macd = result.get("macd")
    patterns = result.get("patterns", [])
    ema_signal = result.get("ema_signal")
    bollinger = result.get("bollinger")
    adx = result.get("adx")
    stochrsi = result.get("stochrsi")
    score = 0.0

    # RSI
    if signal == "BUY" and rsi < 30:
        score += 0.2
    elif signal == "SELL" and rsi > 70:
        score += 0.2

    # MACD
    if signal == "BUY" and macd > 0:
        score += 0.2
    elif signal == "SELL" and macd < 0:
        score += 0.2

    # EMA crossover
    if signal == "BUY" and ema_signal == "bullish":
        score += 0.15
    elif signal == "SELL" and ema_signal == "bearish":
        score += 0.15

    # Bollinger Bands
    if signal == "BUY" and bollinger == "low":
        score += 0.1
    elif signal == "SELL" and bollinger == "high":
        score += 0.1

    # ADX —Ç—Ä–µ–Ω–¥
    if adx and adx > 20:
        score += 0.1

    # Stochastic RSI
    if signal == "BUY" and stochrsi < 20:
        score += 0.1
    elif signal == "SELL" and stochrsi > 80:
        score += 0.1

    # –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    strong_bullish = ["hammer", "engulfing_bullish"]
    strong_bearish = ["shooting_star", "engulfing_bearish"]

    if signal == "BUY" and any(p in strong_bullish for p in patterns):
        score += 0.1
    elif signal == "SELL" and any(p in strong_bearish for p in patterns):
        score += 0.1

    score = round(score, 2)

    if score >= 0.6:
        logger.info(f"üîç –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑: –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")
    else:
        logger.info(f"‚ÑπÔ∏è –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} —Å –æ—Ü–µ–Ω–∫–æ–π {score}")

    return score
