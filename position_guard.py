# position_guard.py
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

import logging
import threading
import time
from typing import Optional
from datetime import datetime, timezone

class PositionGuard:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –∑–∞—â–∏—Ç—ã –∫ PositionManager.
    """
    
    _instance = None
    _lock = threading.RLock()
    
    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(PositionGuard, cls).__new__(cls)
                    cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        if self._initialized:
            return
            
        self._position_lock = threading.RLock()
        self._last_entry_time = None
        self._min_entry_interval = 60  # –ú–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤—Ö–æ–¥–∞–º–∏
        self._active_symbol = None
        self._entry_in_progress = False
        self._initialized = True
        
        logging.info("üõ°Ô∏è PositionGuard initialized")
    
    def can_open_position(self, symbol: str, state_manager) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –ø—Ä–∏—á–∏–Ω–∞_–æ—Ç–∫–∞–∑–∞)
        """
        with self._position_lock:
            now = datetime.now(timezone.utc)
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if self._entry_in_progress:
                return False, "entry_already_in_progress"
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ state_manager
            try:
                st = state_manager.state
                if st.get("in_position") or st.get("opening"):
                    return False, "position_active_in_state"
            except Exception as e:
                logging.error(f"Error checking state manager: {e}")
                return False, "state_check_error"
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if self._last_entry_time:
                time_since = (now - self._last_entry_time).total_seconds()
                if time_since < self._min_entry_interval:
                    return False, f"too_soon_{int(self._min_entry_interval - time_since)}s"
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª
            if self._active_symbol and self._active_symbol != symbol:
                return False, f"different_symbol_{self._active_symbol}"
            
            return True, "allowed"
    
    def begin_entry(self, symbol: str) -> bool:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.
        """
        with self._position_lock:
            if self._entry_in_progress:
                logging.warning(f"üõ°Ô∏è Entry already in progress for {self._active_symbol}")
                return False
            
            self._entry_in_progress = True
            self._active_symbol = symbol
            self._last_entry_time = datetime.now(timezone.utc)
            
            logging.info(f"üõ°Ô∏è Entry lock acquired for {symbol}")
            return True
    
    def complete_entry(self, symbol: str, success: bool):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞.
        """
        with self._position_lock:
            if not self._entry_in_progress or self._active_symbol != symbol:
                logging.warning(f"üõ°Ô∏è Complete entry called for wrong symbol: {symbol} vs {self._active_symbol}")
                return
            
            self._entry_in_progress = False
            
            if not success:
                # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª
                self._active_symbol = None
                # –ò –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ)
                self._last_entry_time = None
                logging.info(f"üõ°Ô∏è Entry failed, lock released for {symbol}")
            else:
                logging.info(f"üõ°Ô∏è Entry successful, position active for {symbol}")
    
    def position_closed(self, symbol: str):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.
        """
        with self._position_lock:
            if self._active_symbol == symbol:
                self._active_symbol = None
                self._entry_in_progress = False
                logging.info(f"üõ°Ô∏è Position closed, guard reset for {symbol}")
    
    def force_reset(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –¢–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
        """
        with self._position_lock:
            old_symbol = self._active_symbol
            self._entry_in_progress = False
            self._active_symbol = None
            self._last_entry_time = None
            logging.warning(f"üõ°Ô∏è Force reset executed, was tracking: {old_symbol}")
    
    def get_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å guard'–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
        """
        with self._position_lock:
            return {
                "entry_in_progress": self._entry_in_progress,
                "active_symbol": self._active_symbol,
                "last_entry_time": self._last_entry_time.isoformat() if self._last_entry_time else None,
                "min_entry_interval": self._min_entry_interval
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
position_guard = PositionGuard()