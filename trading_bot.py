import os
import json
import ccxt
from datetime import datetime, timedelta
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal
from technical_analysis import generate_signal
from data_logger import log_trade
from telegram_bot import send_telegram_message

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TRADE_AMOUNT = float(os.getenv("TRADE_AMOUNT", 10))
PROFIT_TARGET = 0.02  # 2%
MAX_HOLD_MINUTES = 120  # 2 —á–∞—Å–∞

POSITION_FILE = "open_position.json"

exchange = ccxt.gateio({
    'apiKey': os.getenv("GATE_API_KEY"),
    'secret': os.getenv("GATE_API_SECRET"),
    'enableRateLimit': True
})

# === –ß—Ç–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ ===
def get_open_position():
    if os.path.exists(POSITION_FILE):
        with open(POSITION_FILE, 'r') as f:
            return json.load(f)
    return None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ ===
def save_position(data):
    with open(POSITION_FILE, 'w') as f:
        json.dump(data, f)

# === –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ===
def clear_position():
    if os.path.exists(POSITION_FILE):
        os.remove(POSITION_FILE)

# === –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ ===
def close_position(position):
    symbol = position['symbol']
    side = 'sell' if position['type'] == 'buy' else 'buy'
    amount = position['amount']
    price_now = exchange.fetch_ticker(symbol)['last']

    try:
        order = exchange.create_order(symbol, 'market', side, amount)
        profit = (price_now - position['entry_price']) / position['entry_price']
        message = (
            f"‚ùé –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
            f"üíµ –¢–∏–ø: {side.upper()}\n"
            f"üìà –í—Ö–æ–¥: {position['entry_price']:.2f}, –í—ã—Ö–æ–¥: {price_now:.2f}\n"
            f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {profit*100:.2f}%"
        )
        send_telegram_message(CHAT_ID, message)
        clear_position()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏!")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ ===
def check_close_conditions(rsi):
    position = get_open_position()
    if not position:
        return

    now = datetime.utcnow()
    opened_at = datetime.fromisoformat(position['timestamp'])
    time_held = (now - opened_at).total_seconds() / 60
    price_now = exchange.fetch_ticker(position['symbol'])['last']
    profit = (price_now - position['entry_price']) / position['entry_price']
    if position['type'] == 'sell':
        profit = -profit  # –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    # –£—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è:
    if profit >= PROFIT_TARGET or rsi > 85 or time_held > MAX_HOLD_MINUTES:
        close_position(position)

# === –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ ===
def open_position(signal, amount_usdt):
    symbol = "BTC/USDT"
    price = exchange.fetch_ticker(symbol)['last']
    amount = round(amount_usdt / price, 6)
    side = 'buy' if signal == "BUY" else 'sell'

    try:
        order = exchange.create_order(symbol, 'market', side, amount)
        save_position({
            "symbol": symbol,
            "type": side,
            "entry_price": price,
            "amount": amount,
            "timestamp": datetime.utcnow().isoformat()
        })
        return order, price
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None, price

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
def check_and_trade():
    result = generate_signal()
    signal = result["signal"]
    rsi = result["rsi"]
    macd = result["macd"]
    price = result["price"]
    patterns = result.get("patterns", [])

    score = evaluate_signal(result)
    log_trade(signal, score, price, rsi, macd, success=(score >= 0.7))

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–æ–π ===
    check_close_conditions(rsi)

    # === –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ ===
    if signal in ["BUY", "SELL"] and score >= 0.7:
        if get_open_position():
            send_telegram_message(CHAT_ID, "‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è.")
            return

        order, exec_price = open_position(signal, TRADE_AMOUNT)
        if order:
            message = (
                f"üöÄ –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞!\n"
                f"–°–∏–≥–Ω–∞–ª: {signal}\n"
                f"üìå –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(patterns) if patterns else '–Ω–µ—Ç'}\n"
                f"ü§ñ –û—Ü–µ–Ω–∫–∞ AI: {score:.2f}\n"
                f"üí∞ –¶–µ–Ω–∞: {exec_price:.2f}\n"
                f"üíµ –û–±—ä—ë–º: {TRADE_AMOUNT} USDT"
            )
            send_telegram_message(CHAT_ID, message)
        else:
            send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞.")
    else:
        send_telegram_message(
            CHAT_ID,
            f"üìä –°–∏–≥–Ω–∞–ª: {signal} (–æ—Ü–µ–Ω–∫–∞ {score:.2f}) ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞."
        )
