import os
import json
import ccxt
from datetime import datetime
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal
from technical_analysis import generate_signal
from data_logger import log_trade, log_closed_trade
from telegram_bot import send_telegram_message

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TRADE_AMOUNT = float(os.getenv("TRADE_AMOUNT", 10))
PROFIT_TARGET = 0.02  # 2%
MAX_HOLD_MINUTES = 120

POSITION_FILE = "open_position.json"

exchange = ccxt.gateio({
    'apiKey': os.getenv("GATE_API_KEY"),
    'secret': os.getenv("GATE_API_SECRET"),
    'enableRateLimit': True
})


def get_open_position():
    if os.path.exists(POSITION_FILE):
        with open(POSITION_FILE, 'r') as f:
            return json.load(f)
    return None


def save_position(data):
    with open(POSITION_FILE, 'w') as f:
        json.dump(data, f)


def clear_position():
    if os.path.exists(POSITION_FILE):
        os.remove(POSITION_FILE)


# === –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º AI ===
def close_position(position, reason="manual", signal=None, score=None):
    from train_model import train_model  # ‚úÖ –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏

    symbol = position['symbol']
    side = 'sell' if position['type'] == 'buy' else 'buy'
    amount = position['amount']
    entry_price = position['entry_price']
    price_now = exchange.fetch_ticker(symbol)['last']

    try:
        order = exchange.create_order(symbol, 'market', side, amount)
        profit = (price_now - entry_price) / entry_price
        if position['type'] == 'sell':
            profit = -profit

        log_closed_trade(
            entry_price=entry_price,
            close_price=price_now,
            pnl_percent=profit,
            reason=reason,
            signal=signal or position['type'].upper(),
            score=score if score is not None else position.get("score", 0.0)
        )

        message = (
            f"‚ùé –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
            f"üìâ –¢–∏–ø: {side.upper()}\n"
            f"üíµ –í—Ö–æ–¥: {entry_price:.2f}, –í—ã—Ö–æ–¥: {price_now:.2f}\n"
            f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {profit*100:.2f}%\n"
            f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason.upper()}\n"
            f"ü§ñ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏..."
        )
        send_telegram_message(CHAT_ID, message)

        train_model()
        send_telegram_message(CHAT_ID, "‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

        clear_position()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏!")


def check_close_conditions(rsi):
    position = get_open_position()
    if not position:
        return

    now = datetime.utcnow()
    opened_at = datetime.fromisoformat(position['timestamp'])
    time_held = (now - opened_at).total_seconds() / 60
    price_now = exchange.fetch_ticker(position['symbol'])['last']
    profit = (price_now - position['entry_price']) / position['entry_price']
    if position['type'] == 'sell':
        profit = -profit

    if profit >= PROFIT_TARGET:
        close_position(position, reason="profit")
    elif rsi > 85:
        close_position(position, reason="rsi")
    elif time_held > MAX_HOLD_MINUTES:
        close_position(position, reason="timeout")


def open_position(signal, amount_usdt):
    symbol = "BTC/USDT"
    price = exchange.fetch_ticker(symbol)['last']
    amount = round(amount_usdt / price, 6)
    side = 'buy' if signal == "BUY" else 'sell'

    try:
        order = exchange.create_order(symbol, 'market', side, amount)
        save_position({
            "symbol": symbol,
            "type": side,
            "entry_price": price,
            "amount": amount,
            "timestamp": datetime.utcnow().isoformat(),
            "score": 0.0
        })
        return order, price
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None, price


def check_and_trade():
    result = generate_signal()
    signal = result["signal"]
    rsi = result["rsi"]
    macd = result["macd"]
    price = result["price"]
    patterns = result.get("patterns", [])

    score = evaluate_signal(result)
    log_trade(signal, score, price, rsi, macd, success=(score >= 0.7))

    check_close_conditions(rsi)

    if signal in ["BUY", "SELL"] and score >= 0.0:
        if get_open_position():
            send_telegram_message(CHAT_ID, "‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è.")
            return

        order, exec_price = open_position(signal, TRADE_AMOUNT)
        if order:
            message = (
                f"üöÄ –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞!\n"
                f"–°–∏–≥–Ω–∞–ª: {signal}\n"
                f"üìå –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(patterns) if patterns else '–Ω–µ—Ç'}\n"
                f"ü§ñ –û—Ü–µ–Ω–∫–∞ AI: {score:.2f}\n"
                f"üí∞ –¶–µ–Ω–∞: {exec_price:.2f}\n"
                f"üíµ –û–±—ä—ë–º: {TRADE_AMOUNT} USDT"
            )
            send_telegram_message(CHAT_ID, message)

            save_position({
                "symbol": "BTC/USDT",
                "type": 'buy' if signal == "BUY" else 'sell',
                "entry_price": exec_price,
                "amount": round(TRADE_AMOUNT / exec_price, 6),
                "timestamp": datetime.utcnow().isoformat(),
                "score": score
            })
        else:
            send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞.")
    else:
        send_telegram_message(
            CHAT_ID,
            f"üìä –°–∏–≥–Ω–∞–ª: {signal} (–æ—Ü–µ–Ω–∫–∞ {score:.2f}) ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞."
        )
