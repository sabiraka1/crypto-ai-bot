import os
import requests
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal
from technical_analysis import generate_signal
from grafik_olusturucu import draw_rsi_macd_chart
from profit_analysis import generate_profit_chart  # üìä –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
from signal_analyzer import analyze_bad_signals  # ‚ùå –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
from data_logger import log_test_trade
from trading_bot import get_open_position
import ccxt
from train_model import train_model

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def send_telegram_photo(chat_id, image_path, caption=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    try:
        with open(image_path, 'rb') as photo:
            files = {'photo': photo}
            data = {'chat_id': chat_id}
            if caption:
                data['caption'] = caption
            requests.post(url, data=data, files=files)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram ===
def handle_telegram_command(data):
    print("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data)

    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "").strip().lower()

    if not chat_id or not text:
        return

    if text in ["/start", "start", "–ø—Ä–∏–≤–µ—Ç", "—Ä–∞–±–æ—Ç–∞–µ—à—å?", "—Ç—ã —Ç—É—Ç?"]:
        send_telegram_message(chat_id, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7! –ù–∞–ø–∏—à–∏ /test, /profit, /errors –∏–ª–∏ /status.")

    elif text == "/test":
        result = generate_signal()
        signal = result.get("signal")
        rsi = result.get("rsi")
        macd = result.get("macd")
        price = result.get("price")
        patterns = result.get("patterns", [])

        score = evaluate_signal(result)
        log_test_trade(signal, score, price, rsi, macd)

        caption = (
            f"üß™ –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∞\n"
            f"üìä –°–∏–≥–Ω–∞–ª: {signal}\n"
            f"üìâ RSI: {rsi:.2f}, üìà MACD: {macd:.4f}\n"
            f"üìå –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(patterns) if patterns else '–Ω–µ—Ç'}\n"
            f"ü§ñ –û—Ü–µ–Ω–∫–∞ AI: {score:.2f}\n"
            f"üí∞ –¶–µ–Ω–∞: {price:.2f}"
        )

        if score >= 0.7:
            action = "üìà AL" if signal == "BUY" else "üìâ SAT"
            caption += f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {action}"
            image_path = draw_rsi_macd_chart(result)
            if image_path:
                send_telegram_photo(chat_id, image_path, caption)
                return

        send_telegram_message(chat_id, caption)

    elif text == "/profit":
        path, total_return = generate_profit_chart()
        if path:
            caption = (
                f"üíº –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return*100:.2f}%\n"
                f"üìà –ì—Ä–∞—Ñ–∏–∫: –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å"
            )
            send_telegram_photo(chat_id, path, caption)
        else:
            send_telegram_message(chat_id, "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏.")

    elif text == "/errors":
        summary, explanations = analyze_bad_signals()
        if not summary:
            send_telegram_message(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö.")
            return

        message = "üìâ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
        for key, value in summary.items():
            message += f"‚Ä¢ {key}: {value}\n"
        if explanations:
            message += "\n‚ùó –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:\n" + "\n".join(explanations)
        send_telegram_message(chat_id, message)

    elif text == "/status":
        position = get_open_position()
        if not position:
            send_telegram_message(chat_id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
            return

        exchange = ccxt.gateio({
            'apiKey': os.getenv("GATE_API_KEY"),
            'secret': os.getenv("GATE_API_SECRET"),
            'enableRateLimit': True
        })

        symbol = position['symbol']
        entry = position['entry_price']
        amount = position['amount']
        timestamp = position['timestamp']
        now_price = exchange.fetch_ticker(symbol)['last']
        profit = ((now_price - entry) / entry) * 100
        if position['type'] == 'sell':
            profit = -profit

        message = (
            f"üìà –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è\n"
            f"–¢–∏–ø: {position['type'].upper()}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:.2f}\n"
            f"–û–±—ä—ë–º: {amount:.6f}\n"
            f"–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {timestamp}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {now_price:.2f}\n"
            f"üìä –ü—Ä–∏–±—ã–ª—å: {profit:.2f}%"
        )
        send_telegram_message(chat_id, message)

    elif text == "/train":
        try:
            train_model()
            send_telegram_message(chat_id, "‚úÖ AI-–º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        except Exception as e:
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

    else:
        send_telegram_message(chat_id, f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}\n–î–æ—Å—Ç—É–ø–Ω–æ: /start, /test, /profit, /errors, /status, /train")
