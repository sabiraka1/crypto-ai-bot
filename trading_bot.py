import os, json, logging
import ccxt
from datetime import datetime
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal, should_trade
from technical_analysis import generate_signal
from data_logger import log_real_trade, log_closed_trade, get_recent_performance
from telegram_bot import bot
from train_model import retrain_model

load_dotenv()

CHAT_ID = os.getenv("CHAT_ID")
TRADE_AMOUNT = float(os.getenv("TRADE_AMOUNT", 50))
PROFIT_TARGET = 0.015  # 1.5% –ø—Ä–∏–±—ã–ª—å
STOP_LOSS = -0.02      # -2% —Å—Ç–æ–ø-–ª–æ—Å—Å  
MAX_HOLD_MINUTES = 240  # 4 —á–∞—Å–∞ –º–∞–∫—Å–∏–º—É–º
POSITION_FILE = "open_position.json"
RSI_MEMORY_FILE = "rsi_memory.json"

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gate.io
exchange = ccxt.gateio({
    'apiKey': os.getenv("GATE_API_KEY"),
    'secret': os.getenv("GATE_API_SECRET"),
    'enableRateLimit': True,
    'sandbox': False  # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—è
})

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.send_message(chat_id, text, parse_mode='HTML')
        logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

def get_open_position():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if os.path.exists(POSITION_FILE):
        try:
            with open(POSITION_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    return None

def save_position(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        with open(POSITION_FILE, 'w') as f:
            json.dump(data, f, indent=2)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data['type']} @ {data['entry_price']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

def clear_position():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    if os.path.exists(POSITION_FILE):
        try:
            os.remove(POSITION_FILE)
            logger.info("–ü–æ–∑–∏—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

def update_rsi_memory(rsi):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ RSI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"""
    memory = []
    if os.path.exists(RSI_MEMORY_FILE):
        try:
            with open(RSI_MEMORY_FILE, 'r') as f:
                memory = json.load(f)
        except:
            memory = []
    
    memory.append(rsi)
    memory = memory[-10:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
    
    try:
        with open(RSI_MEMORY_FILE, 'w') as f:
            json.dump(memory, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI –ø–∞–º—è—Ç–∏: {e}")

def analyze_rsi_trend():
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ RSI"""
    if not os.path.exists(RSI_MEMORY_FILE):
        return "UNKNOWN"
    
    try:
        with open(RSI_MEMORY_FILE, 'r') as f:
            memory = json.load(f)
        
        if len(memory) < 3:
            return "INSUFFICIENT_DATA"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
        recent = memory[-3:]
        
        if all(r > 75 for r in recent):
            return "EXTREMELY_OVERBOUGHT"
        elif all(r < 25 for r in recent):
            return "EXTREMELY_OVERSOLD"
        elif all(recent[i] > recent[i-1] for i in range(1, len(recent))):
            return "RISING"
        elif all(recent[i] < recent[i-1] for i in range(1, len(recent))):
            return "FALLING"
        else:
            return "SIDEWAYS"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ RSI —Ç—Ä–µ–Ω–¥–∞: {e}")
        return "ERROR"

def close_position(position, reason, current_result=None):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    symbol = position['symbol']
    side = 'sell' if position['type'] == 'buy' else 'buy'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        price_now = ticker['last']
        amount = position['amount']
        entry_price = position['entry_price']
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—è)
        # order = exchange.create_order(symbol, 'market', side, amount)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {side} {amount} {symbol} @ {price_now}")
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        if position['type'] == 'buy':
            profit = (price_now - entry_price) / entry_price
        else:
            profit = (entry_price - price_now) / entry_price
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
        log_closed_trade(
            entry_price=entry_price,
            close_price=price_now,
            pnl_percent=profit,
            reason=reason,
            signal=position.get('original_signal', position['type'].upper()),
            score=position.get('ai_score', 0),
            result_data=current_result
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        profit_emoji = "üü¢" if profit > 0 else "üî¥"
        message = (
            f"{profit_emoji} <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞</b>\n"
            f"üìä {position['type'].upper()}: {entry_price:.2f} ‚Üí {price_now:.2f}\n"
            f"üí∞ P&L: <b>{profit*100:+.2f}%</b>\n"
            f"‚è∞ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üïê –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {position.get('hold_time', 'N/A')}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
        if current_result:
            message += f"\nüìà RSI: {current_result.get('rsi', 0):.1f} | Pattern: {current_result.get('pattern', 'NONE')}"
        
        send_telegram_message(CHAT_ID, message)
        
        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
        try:
            retrain_model()
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        
        clear_position()
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        return False

def check_close_conditions(result_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    position = get_open_position()
    if not position:
        return
    
    try:
        symbol = position['symbol']
        ticker = exchange.fetch_ticker(symbol)
        price_now = ticker['last']
        entry_price = position['entry_price']
        entry_time = datetime.fromisoformat(position['timestamp'])
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        held_minutes = (datetime.utcnow() - entry_time).total_seconds() / 60
        position['hold_time'] = f"{int(held_minutes)} –º–∏–Ω"
        
        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏
        if position['type'] == 'buy':
            current_profit = (price_now - entry_price) / entry_price
        else:
            current_profit = (entry_price - price_now) / entry_price
        
        rsi = result_data.get("rsi", 50)
        rsi_trend = analyze_rsi_trend()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å RSI
        update_rsi_memory(rsi)
        
        # –£—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        if current_profit >= PROFIT_TARGET:
            close_position(position, f"üéØ Take Profit ({current_profit*100:.1f}%)", result_data)
            
        elif current_profit <= STOP_LOSS:
            close_position(position, f"üõë Stop Loss ({current_profit*100:.1f}%)", result_data)
            
        elif held_minutes > MAX_HOLD_MINUTES:
            close_position(position, f"‚è∞ Timeout ({held_minutes:.0f} –º–∏–Ω)", result_data)
            
        elif rsi_trend == "EXTREMELY_OVERBOUGHT" and position['type'] == 'buy':
            close_position(position, f"üìà RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫ ({rsi:.1f})", result_data)
            
        elif rsi_trend == "EXTREMELY_OVERSOLD" and position['type'] == 'sell':
            close_position(position, f"üìâ RSI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–æ–∫ ({rsi:.1f})", result_data)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

def open_position(signal, result_data, score):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    symbol = "BTC/USDT"
    
    try:
        ticker = exchange.fetch_ticker(symbol)
        price = ticker['last']
        amount = round(TRADE_AMOUNT / price, 6)
        side = 'buy' if signal in ['BUY', 'STRONG_BUY'] else 'sell'
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—è)
        # order = exchange.create_order(symbol, 'market', side, amount)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {side} {amount} {symbol} @ {price}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏
        position_data = {
            "symbol": symbol,
            "type": side,
            "entry_price": price,
            "amount": amount,
            "timestamp": datetime.utcnow().isoformat(),
            "original_signal": signal,
            "ai_score": score,
            "rsi": result_data.get("rsi"),
            "macd": result_data.get("macd"),
            "pattern": result_data.get("pattern"),
            "confidence": result_data.get("confidence")
        }
        
        save_position(position_data)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏
        log_real_trade(signal, score, price, result_data)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ RSI –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if os.path.exists(RSI_MEMORY_FILE):
            os.remove(RSI_MEMORY_FILE)
        
        return True, price
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
        return False, 0

def format_signal_message(result_data, score):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
    signal = result_data.get("signal", "NONE")
    confidence = result_data.get("confidence", 0)
    price = result_data.get("price", 0)
    rsi = result_data.get("rsi", 0)
    pattern = result_data.get("pattern", "NONE")
    pattern_score = result_data.get("pattern_score", 0)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_emoji = {
        "STRONG_BUY": "üöÄ", "BUY": "üìà",
        "STRONG_SELL": "üí•", "SELL": "üìâ",
        "HOLD": "‚è∏Ô∏è", "ERROR": "‚ùå"
    }
    
    emoji = signal_emoji.get(signal, "‚ùì")
    
    message = (
        f"{emoji} <b>{signal}</b> @ {price:.2f}\n"
        f"ü§ñ AI Score: <b>{score:.3f}</b>\n"
        f"üéØ Confidence: {confidence:.1f}%\n"
        f"üìä RSI: {rsi:.1f}\n"
        f"üïØÔ∏è Pattern: {pattern} ({pattern_score:.1f})"
    )
    
    return message

def check_and_trade():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ check_and_trade()")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        result_data = generate_signal()
        signal = result_data.get("signal", "ERROR")
        
        if signal == "ERROR":
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
            send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
            return
        
        # –û—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        score = evaluate_signal(result_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        check_close_conditions(result_data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–≥–Ω–∞–ª–µ
        signal_message = format_signal_message(result_data, score)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
        current_position = get_open_position()
        
        if should_trade(signal, score):
            if current_position:
                signal_message += "\n‚ö†Ô∏è <i>–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞</i>"
                send_telegram_message(CHAT_ID, signal_message)
            else:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                success, entry_price = open_position(signal, result_data, score)
                
                if success:
                    signal_message += f"\n‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!</b>"
                    send_telegram_message(CHAT_ID, signal_message)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    perf = get_recent_performance()
                    if perf:
                        perf_msg = (
                            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–¥–µ–ª–æ–∫):</b>\n"
                            f"üéØ Win Rate: {perf['win_rate']}%\n"
                            f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {perf['avg_profit']:.2f}%\n"
                            f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {perf['total_profit']:.2f}%"
                        )
                        send_telegram_message(CHAT_ID, perf_msg)
                else:
                    signal_message += "\n‚ùå <i>–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏</i>"
                    send_telegram_message(CHAT_ID, signal_message)
        else:
            # –°–∏–≥–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π
            if score < 0.3:
                signal_message += f"\nüî∏ <i>–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (–ø–æ—Ä–æ–≥: 0.65)</i>"
            else:
                signal_message += f"\nüî∏ <i>–°–∏–≥–Ω–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (–ø–æ—Ä–æ–≥: 0.65)</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            if current_position or result_data.get("pattern_score", 0) >= 4:
                send_telegram_message(CHAT_ID, signal_message)
        
        logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {signal} | Score: {score:.3f}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_and_trade: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def get_position_summary():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    position = get_open_position()
    if not position:
        return "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"
    
    try:
        symbol = position['symbol']
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        entry_price = position['entry_price']
        entry_time = datetime.fromisoformat(position['timestamp'])
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        held_minutes = (datetime.utcnow() - entry_time).total_seconds() / 60
        held_hours = held_minutes / 60
        
        # –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å
        if position['type'] == 'buy':
            current_profit = (current_price - entry_price) / entry_price
        else:
            current_profit = (entry_price - current_price) / entry_price
        
        profit_emoji = "üü¢" if current_profit > 0 else "üî¥"
        
        summary = (
            f"üìå <b>–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è:</b>\n"
            f"üîÑ {position['type'].upper()}: {entry_price:.2f} ‚Üí {current_price:.2f}\n"
            f"{profit_emoji} P&L: <b>{current_profit*100:+.2f}%</b>\n"
            f"‚è∞ –í—Ä–µ–º—è: {held_hours:.1f}—á ({held_minutes:.0f}–º)\n"
            f"ü§ñ AI Score: {position.get('ai_score', 0):.3f}\n"
            f"üïØÔ∏è Pattern: {position.get('pattern', 'N/A')}"
        )
        
        return summary
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

def emergency_close_position():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    position = get_open_position()
    if not position:
        return "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        current_result = generate_signal()
        success = close_position(position, "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ", current_result)
        
        if success:
            return "‚úÖ –ü–æ–∑–∏—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"
