import os, json, logging
import ccxt
from datetime import datetime
from dotenv import load_dotenv
from sinyal_skorlayici import evaluate_signal
from technical_analysis import generate_signal
from enhanced_data_logger import log_real_trade_enhanced, log_closed_trade_enhanced, get_enhanced_performance
from telegram_bot import bot
from train_model import retrain_model
from enhanced_smart_risk_manager import EnhancedSmartRiskManager

load_dotenv()

CHAT_ID = os.getenv("CHAT_ID")
TRADE_AMOUNT = float(os.getenv("TRADE_AMOUNT", 50))
POSITION_FILE = "open_position.json"

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
exchange = ccxt.gateio({
    'apiKey': os.getenv("GATE_API_KEY"),
    'secret': os.getenv("GATE_API_SECRET"),
    'enableRateLimit': True,
    'sandbox': False
})

risk_manager = EnhancedSmartRiskManager()

def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.send_message(chat_id, text, parse_mode='HTML')
        logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

def get_open_position():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if os.path.exists(POSITION_FILE):
        try:
            with open(POSITION_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    return None

def save_position(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        with open(POSITION_FILE, 'w') as f:
            json.dump(data, f, indent=2)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data['type']} @ {data['entry_price']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

def clear_position():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    if os.path.exists(POSITION_FILE):
        try:
            os.remove(POSITION_FILE)
            logger.info("–ü–æ–∑–∏—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

def close_position_enhanced(position, reason, current_result=None):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    symbol = position['symbol']
    side = 'sell' if position['type'] == 'buy' else 'buy'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        price_now = ticker['last']
        amount = position['amount']
        entry_price = position['entry_price']
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—è)
        # order = exchange.create_order(symbol, 'market', side, amount)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {side} {amount} {symbol} @ {price_now}")
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        if position['type'] == 'buy':
            profit = (price_now - entry_price) / entry_price
        else:
            profit = (entry_price - price_now) / entry_price
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        entry_time = datetime.fromisoformat(position['timestamp'])
        hold_time = datetime.utcnow() - entry_time
        hold_hours = hold_time.total_seconds() / 3600
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        entry_data = {
            "entry_price": entry_price,
            "timestamp": position['timestamp'],
            "original_signal": position.get('original_signal', position['type'].upper()),
            "ai_score": position.get('ai_score', 0),
            "market_data": position.get('market_data', {}),
            "signal_decision": position.get('signal_decision', {}),
            "targets": position.get('targets', {})
        }
        
        close_data = current_result if current_result else {}
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        log_closed_trade_enhanced(entry_data, close_data, profit, reason)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        profit_emoji = "üü¢" if profit > 0 else "üî¥"
        performance_rating = get_performance_emoji(profit)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–∫–∏
        entry_score = position.get('signal_decision', {}).get('score', 0)
        macd_contribution = position.get('signal_decision', {}).get('macd_contribution', 0)
        
        message = f"""
{profit_emoji} <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞</b> {performance_rating}

üìä <b>–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª: {position.get('original_signal', 'BUY')}
‚Ä¢ –í—Ö–æ–¥: ${entry_price:.2f} ‚Üí –í—ã—Ö–æ–¥: ${price_now:.2f}
‚Ä¢ –û–±—ä–µ–º: {amount:.6f} BTC (${TRADE_AMOUNT:.0f})

üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ P&L: <b>{profit*100:+.2f}%</b>
‚Ä¢ P&L USD: <b>${profit * entry_price * amount:+.2f}</b>
‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {hold_hours:.1f}—á

üéØ <b>–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–∞:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: {entry_score:.1f}
‚Ä¢ MACD –≤–∫–ª–∞–¥: {macd_contribution:.1f}
‚Ä¢ AI Score: {position.get('ai_score', 0):.3f}
‚Ä¢ Pattern: {position.get('market_data', {}).get('pattern', 'N/A')}

‚ö° <b>–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b>
{reason}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if current_result:
            message += f"""
üìà <b>–†—ã–Ω–æ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:</b>
‚Ä¢ RSI: {current_result.get('rsi', 0):.1f}
‚Ä¢ MACD: {current_result.get('macd', 0):.4f}
‚Ä¢ Pattern: {current_result.get('pattern', 'NONE')}
"""
        
        send_telegram_message(CHAT_ID, message)
        
        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            retrain_model()
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ç–∞–π–º-–∞—É—Ç–∞
        risk_manager.record_trade_time()
        
        clear_position()
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        return False

def get_performance_emoji(profit):
    """–≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–∫–∏"""
    if profit > 0.03:
        return "üèÜ"  # –û—Ç–ª–∏—á–Ω–æ > 3%
    elif profit > 0.015:
        return "ü•á"  # –•–æ—Ä–æ—à–æ > 1.5%
    elif profit > 0.005:
        return "üëç"  # –ù–æ—Ä–º–∞–ª—å–Ω–æ > 0.5%
    elif profit > -0.005:
        return "üòê"  # –û–∫–æ–ª–æ –Ω—É–ª—è
    elif profit > -0.015:
        return "üëé"  # –ù–µ–±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫
    else:
        return "üí•"  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫

def check_close_conditions_enhanced(result_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    position = get_open_position()
    if not position:
        return
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        should_close, reason = risk_manager.should_force_close_enhanced(position, result_data)
        
        if should_close:
            close_position_enhanced(position, reason, result_data)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

def open_position_enhanced(decision, market_data, ai_score):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    symbol = "BTC/USDT"
    action = decision["action"]
    
    try:
        ticker = exchange.fetch_ticker(symbol)
        price = ticker['last']
        amount = round(TRADE_AMOUNT / price, 6)
        side = 'buy'  # –¢–æ–ª—å–∫–æ LONG –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–∞–Ω–∏—è)
        # order = exchange.create_order(symbol, 'market', side, amount)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {side} {amount} {symbol} @ {price}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        targets = {
            "take_profit_pct": risk_manager.BASE_TAKE_PROFIT * 100,
            "stop_loss_pct": risk_manager.BASE_STOP_LOSS * 100,
            "take_profit_price": price * (1 + risk_manager.BASE_TAKE_PROFIT),
            "stop_loss_price": price * (1 - risk_manager.BASE_STOP_LOSS)
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        position_data = {
            "symbol": symbol,
            "type": side,
            "entry_price": price,
            "amount": amount,
            "timestamp": datetime.utcnow().isoformat(),
            "original_signal": action,
            "ai_score": ai_score,
            "market_data": market_data,
            "signal_decision": decision,
            "targets": targets
        }
        
        save_position(position_data)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        log_real_trade_enhanced(decision, market_data, ai_score)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
        trend_info = decision.get("trend_analysis", {})
        
        message = f"""
üöÄ <b>–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!</b>

üìä <b>–°–¥–µ–ª–∫–∞:</b>
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: <b>{action}</b>
‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.2f}
‚Ä¢ –û–±—ä–µ–º: {amount:.6f} BTC
‚Ä¢ –°—É–º–º–∞: ${TRADE_AMOUNT:.0f}

üéØ <b>–ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏—è:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: <b>{decision.get('score', 0):.1f}</b> (–º–∏–Ω: 3)
‚Ä¢ MACD –≤–∫–ª–∞–¥: {decision.get('macd_contribution', 0):.1f}
‚Ä¢ AI Score: <b>{ai_score:.3f}</b>

üìà <b>–†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>
‚Ä¢ RSI: {market_data.get('rsi', 0):.1f}
‚Ä¢ MACD: {market_data.get('macd', 0):.4f}
‚Ä¢ Pattern: {market_data.get('pattern', 'NONE')} ({market_data.get('pattern_score', 0):.1f})
‚Ä¢ Confidence: {market_data.get('confidence', 0):.1f}%

üåç <b>–¢—Ä–µ–Ω–¥—ã:</b>
‚Ä¢ 1D: {trend_info.get('trend_1d', 'Unknown')}
‚Ä¢ 4H: {trend_info.get('trend_4h', 'Unknown')}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {trend_info.get('market_state', 'Normal')}

üéØ <b>–¶–µ–ª–∏:</b>
‚Ä¢ Take Profit: {targets['take_profit_pct']:.1f}% (${targets['take_profit_price']:.2f})
‚Ä¢ Stop Loss: {targets['stop_loss_pct']:.1f}% (${targets['stop_loss_price']:.2f})
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
        reasons = decision.get("reasons", [])[:3]
        if reasons:
            message += "\nüí° <b>–ü—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞:</b>\n"
            for reason in reasons:
                message += f"‚Ä¢ {reason}\n"
        
        send_telegram_message(CHAT_ID, message)
        
        return True, price
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
        return False, 0

def format_market_analysis_enhanced(market_data, decision):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    price = market_data.get("price", 0)
    action = decision.get("action", "WAIT")
    score = decision.get("score", 0)
    trend_analysis = decision.get("trend_analysis", {})
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏–π
    action_emoji = {"BUY": "üü¢", "SELL": "üî¥", "WAIT": "üü°"}
    
    message = f"""
üìä <b>–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>

üí∞ BTC/USDT: <b>${price:.2f}</b>
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {trend_analysis.get('price_change_24h', 0)*100:+.1f}%

{action_emoji.get(action, "‚ö™")} <b>–†–µ—à–µ–Ω–∏–µ: {action}</b>
üìä –ë–∞–ª–ª: <b>{score:.1f}</b> (–º–∏–Ω: 3)
üéØ MACD –≤–∫–ª–∞–¥: {decision.get('macd_contribution', 0):.1f}

üåç <b>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ç—Ä–µ–Ω–¥:</b>
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π (1D): {trend_analysis.get('trend_1d', 'Unknown')}
‚Ä¢ 4-—á–∞—Å–æ–≤–æ–π: {trend_analysis.get('trend_4h', 'Unknown')}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {trend_analysis.get('market_state', 'Normal')}

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
‚Ä¢ RSI: {market_data.get('rsi', 0):.1f}
‚Ä¢ MACD: {market_data.get('macd', 0):.4f} / {market_data.get('macd_signal', 0):.4f}
‚Ä¢ Pattern: {market_data.get('pattern', 'NONE')} ({market_data.get('pattern_score', 0):.1f}/10)
‚Ä¢ Confidence: {market_data.get('confidence', 0):.1f}%

üí° <b>–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:</b>
‚Ä¢ BUY —É—Å–ª–æ–≤–∏—è: {market_data.get('buy_score', 0)}/8
‚Ä¢ SELL —É—Å–ª–æ–≤–∏—è: {market_data.get('sell_score', 0)}/8
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ä–µ—à–µ–Ω–∏—è
    reasons = decision.get("reasons", [])
    if reasons:
        message += f"\nüìã <b>–ê–Ω–∞–ª–∏–∑ ({len(reasons)} —Ñ–∞–∫—Ç–æ—Ä–æ–≤):</b>\n"
        for i, reason in enumerate(reasons[:4], 1):
            message += f"{i}. {reason}\n"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if decision.get("reason") == "TIMEOUT":
        message += f"\n‚è∞ <b>–¢–∞–π–º-–∞—É—Ç:</b> –û–∂–∏–¥–∞–Ω–∏–µ {risk_manager.TRADE_TIMEOUT_HOURS}—á –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏"
    
    market_state = trend_analysis.get('market_state', 'NORMAL')
    if market_state == "OVERHEATED_BULLISH":
        message += "\nüî• <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†—ã–Ω–æ–∫ –ø–µ—Ä–µ–≥—Ä–µ—Ç - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
    elif market_state == "OVERSOLD_BEARISH":
        message += "\n‚ùÑÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</b> –†—ã–Ω–æ–∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω - —Ö–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞"
    
    return message

def check_and_trade_enhanced():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –Ω–æ–≤–æ–π —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        logger.info("üß† –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        market_data = generate_signal()
        if market_data.get("signal") == "ERROR":
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            send_telegram_message(CHAT_ID, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
        
        # –û—Ü–µ–Ω–∫–∞ AI —Å–∏—Å—Ç–µ–º–æ–π (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        ai_score = evaluate_signal(market_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        check_close_conditions_enhanced(market_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
        current_position = get_open_position()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        market_analysis = format_market_analysis_enhanced(market_data, smart_decision)
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        action = smart_decision.get("action")
        score = smart_decision.get("score", 0)
        
        if action == "BUY" and score >= 3:
            
            if current_position:
                market_analysis += "\n‚ö†Ô∏è <i>–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –æ–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è</i>"
                send_telegram_message(CHAT_ID, market_analysis)
                
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ AI score (–¥–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞)
                if ai_score >= 0.6:
                    success, entry_price = open_position_enhanced(smart_decision, market_data, ai_score)
                    
                    if success:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        perf = get_enhanced_performance(days=30)
                        if perf and perf['total_trades'] > 0:
                            perf_msg = format_performance_stats(perf)
                            send_telegram_message(CHAT_ID, perf_msg)
                else:
                    market_analysis += f"\nü§ñ <i>AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–µ ({ai_score:.3f}), –∂–¥–µ–º –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π</i>"
                    send_telegram_message(CHAT_ID, market_analysis)
        
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            should_send_analysis = (
                current_position or 
                market_data.get("pattern_score", 0) >= 4 or
                score >= 2 or
                smart_decision.get("reason") == "TIMEOUT"
            )
            
            if should_send_analysis:
                if action == "WAIT" and score < 3:
                    market_analysis += f"\nüî∏ <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –≤—Ö–æ–¥–∞</i>"
                send_telegram_message(CHAT_ID, market_analysis)
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {action} | –ë–∞–ª–ª: {score:.1f} | AI: {ai_score:.3f}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_and_trade_enhanced: {e}")
        send_telegram_message(CHAT_ID, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")

def format_performance_stats(perf):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    message = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {perf['period_days']} –¥–Ω–µ–π:</b>

üéØ <b>–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: {perf['total_trades']}
‚Ä¢ Win Rate: <b>{perf['win_rate']}%</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {perf['avg_profit']:+.2f}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{perf['total_profit']:+.2f}%</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf['avg_hold_time']:.1f}—á
"""
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
    trend_perf = perf.get('trend_performance', {})
    if trend_perf:
        message += "\nüìä <b>–ü–æ —Ç—Ä–µ–Ω–¥–∞–º:</b>\n"
        for trend, data in trend_perf.items():
            message += f"‚Ä¢ {trend}: {data['win_rate']:.1f}% ({data['trades']} —Å–¥–µ–ª–æ–∫)\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ MACD
    macd_perf = perf.get('macd_performance', {})
    if macd_perf:
        message += "\nüéØ <b>–ü–æ MACD –≤–∫–ª–∞–¥—É:</b>\n"
        if 'high_macd' in macd_perf:
            data = macd_perf['high_macd']
            message += f"‚Ä¢ –í—ã—Å–æ–∫–∏–π MACD (‚â•2): {data['win_rate']:.1f}%\n"
        if 'low_macd' in macd_perf:
            data = macd_perf['low_macd']
            message += f"‚Ä¢ –ù–∏–∑–∫–∏–π MACD (<2): {data['win_rate']:.1f}%\n"
    
    return message

def get_position_summary_enhanced():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    position = get_open_position()
    if not position:
        return "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"
    
    try:
        symbol = position['symbol']
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        entry_price = position['entry_price']
        entry_time = datetime.fromisoformat(position['timestamp'])
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        held_hours = (datetime.utcnow() - entry_time).total_seconds() / 3600
        
        # –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å
        current_profit = (current_price - entry_price) / entry_price
        profit_emoji = "üü¢" if current_profit > 0 else "üî¥"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–∞
        targets = position.get('targets', {})
        signal_decision = position.get('signal_decision', {})
        market_data = position.get('market_data', {})
        
        summary = f"""
üìå <b>–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è</b> {get_performance_emoji(current_profit)}

üîÑ <b>–°–¥–µ–ª–∫–∞:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª: {position.get('original_signal', 'BUY')}
‚Ä¢ –í—Ö–æ–¥: ${entry_price:.2f} ‚Üí –¢–µ–∫—É—â–∞—è: ${current_price:.2f}
‚Ä¢ –û–±—ä–µ–º: {position.get('amount', 0):.6f} BTC

{profit_emoji} <b>P&L:</b> {current_profit*100:+.2f}%
‚è∞ <b>–£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:</b> {held_hours:.1f}—á

üéØ <b>–¶–µ–ª–∏:</b>
‚Ä¢ Take Profit: {targets.get('take_profit_pct', 1.5):.1f}% (${targets.get('take_profit_price', 0):.2f})
‚Ä¢ Stop Loss: {targets.get('stop_loss_pct', 2.0):.1f}% (${targets.get('stop_loss_price', 0):.2f})

üß† <b>–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–∞:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: {signal_decision.get('score', 0):.1f}
‚Ä¢ MACD –≤–∫–ª–∞–¥: {signal_decision.get('macd_contribution', 0):.1f}  
‚Ä¢ AI Score: {position.get('ai_score', 0):.3f}
‚Ä¢ Pattern: {market_data.get('pattern', 'N/A')} ({market_data.get('pattern_score', 0):.1f})

üìà <b>–£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞:</b>
‚Ä¢ RSI: {market_data.get('rsi', 0):.1f}
‚Ä¢ Confidence: {market_data.get('confidence', 0):.1f}%
‚Ä¢ Trend 1D: {signal_decision.get('trend_analysis', {}).get('trend_1d', 'Unknown')}
"""
        
        return summary
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

def emergency_close_position_enhanced():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    position = get_open_position()
    if not position:
        return "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
    
    try:
        current_market = generate_signal()
        success = close_position_enhanced(position, "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", current_market)
        
        if success:
            return "‚úÖ –ü–æ–∑–∏—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def check_and_trade():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)"""
    check_and_trade_enhanced()
