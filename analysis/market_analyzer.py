import pandas as pd
import numpy as np
from typing import Tuple
from config.settings import MarketCondition
import logging

class MultiTimeframeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
    
    def __init__(self):
        self.timeframes = {
            "1d": {"weight": 0.6, "period": 24},
            "4h": {"weight": 0.4, "period": 6}
        }
    
    def analyze_market_condition(self, df_1d: pd.DataFrame, df_4h: pd.DataFrame) -> Tuple[MarketCondition, float]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            daily_trend = self._analyze_trend(df_1d)
            daily_strength = self._analyze_strength(df_1d)
            
            # –ê–Ω–∞–ª–∏–∑ 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            h4_trend = self._analyze_trend(df_4h)
            h4_strength = self._analyze_strength(df_4h)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            combined_trend = (daily_trend * 0.6) + (h4_trend * 0.4)
            combined_strength = (daily_strength * 0.6) + (h4_strength * 0.4)
            
            condition = self._classify_market(combined_trend, combined_strength)
            confidence = abs(combined_trend) * combined_strength
            
            logging.info(f"üìä Market Analysis: {condition.value}, Confidence: {confidence:.2f}")
            return condition, confidence
            
        except Exception as e:
            logging.error(f"Market analysis failed: {e}")
            return MarketCondition.SIDEWAYS, 0.5
    
    def _analyze_trend(self, df: pd.DataFrame) -> float:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (-1 –¥–æ 1)"""
        if len(df) < 50:
            return 0.0
        
        # EMA —Ç—Ä–µ–Ω–¥
        ema_20 = df['close'].ewm(span=20).mean()
        ema_50 = df['close'].ewm(span=50).mean()
        ema_trend = (ema_20.iloc[-1] - ema_50.iloc[-1]) / ema_50.iloc[-1]
        
        # –¶–µ–Ω–æ–≤–æ–π –º–æ–º–µ–Ω—Ç—É–º
        price_momentum = (df['close'].iloc[-1] - df['close'].iloc[-20]) / df['close'].iloc[-20]
        
        # –û–±—ä–µ–º–Ω—ã–π —Ç—Ä–µ–Ω–¥
        volume_ma = df['volume'].rolling(20).mean()
        recent_volume = volume_ma.iloc[-5:].mean()
        old_volume = volume_ma.iloc[-25:-5].mean()
        volume_trend = (recent_volume - old_volume) / old_volume if old_volume > 0 else 0
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
        trend = (ema_trend * 0.4) + (price_momentum * 0.4) + (volume_trend * 0.2)
        return np.clip(trend, -1, 1)
    
    def _analyze_strength(self, df: pd.DataFrame) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (0 –¥–æ 1)"""
        if len(df) < 20:
            return 0.5
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        returns = df['close'].pct_change().dropna()
        volatility = returns.std()
        
        # ADX –¥–ª—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        high_low = df['high'] - df['low']
        high_close = np.abs(df['high'] - df['close'].shift())
        low_close = np.abs(df['low'] - df['close'].shift())
        true_range = np.maximum(high_low, np.maximum(high_close, low_close))
        atr = true_range.rolling(14).mean()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–ª—ã
        strength = 1 / (1 + volatility * 100)  # –û–±—Ä–∞—Ç–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        return np.clip(strength, 0, 1)
    
    def _classify_market(self, trend: float, strength: float) -> MarketCondition:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        if trend > 0.1 and strength > 0.7:
            return MarketCondition.STRONG_BULL
        elif trend > 0.05 and strength > 0.5:
            return MarketCondition.WEAK_BULL
        elif trend < -0.1 and strength > 0.7:
            return MarketCondition.STRONG_BEAR
        elif trend < -0.05 and strength > 0.5:
            return MarketCondition.WEAK_BEAR
        else:
            return MarketCondition.SIDEWAYS