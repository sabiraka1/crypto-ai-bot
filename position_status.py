import json
import os
from datetime import datetime
import ccxt

POSITION_FILE = "open_position.json"

def get_open_position_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if not os.path.exists(POSITION_FILE):
        return "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç"

    try:
        with open(POSITION_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

        entry_price = data.get("entry_price")
        entry_time = data.get("timestamp")
        position_type = data.get("type")
        symbol = data.get("symbol", "BTC/USDT")
        amount = data.get("amount", 0)
        ai_score = data.get("ai_score", 0)
        pattern = data.get("pattern", "N/A")
        confidence = data.get("confidence", 0)

        if not all([entry_price, entry_time, position_type]):
            return "üì≠ –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ"

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        entry_dt = datetime.fromisoformat(entry_time.replace('Z', '+00:00') if 'Z' in entry_time else entry_time)
        now = datetime.utcnow()
        time_diff = now - entry_dt
        
        hours = int(time_diff.total_seconds() // 3600)
        minutes = int((time_diff.total_seconds() % 3600) // 60)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        try:
            exchange = ccxt.gateio()
            ticker = exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            # –†–∞—Å—á–µ—Ç P&L
            if position_type == 'buy':
                pnl_percent = (current_price - entry_price) / entry_price * 100
            else:
                pnl_percent = (entry_price - current_price) / entry_price * 100
                
            pnl_usd = pnl_percent / 100 * entry_price * amount
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è P&L
            pnl_emoji = "üü¢" if pnl_percent > 0 else "üî¥" if pnl_percent < 0 else "üü°"
            
        except Exception as e:
            current_price = entry_price
            pnl_percent = 0
            pnl_usd = 0
            pnl_emoji = "‚ùì"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if hours > 0:
            time_str = f"{hours}—á {minutes}–º"
        else:
            time_str = f"{minutes}–º"

        status = f"""üìå <b>–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è</b>

üîÑ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {position_type.upper()}
üí∞ <b>–°–∏–º–≤–æ–ª:</b> {symbol}
üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amount:.6f}

üíµ <b>–¶–µ–Ω—ã:</b>
‚Ä¢ –í—Ö–æ–¥: ${entry_price:.2f}
‚Ä¢ –¢–µ–∫—É—â–∞—è: ${current_price:.2f}

{pnl_emoji} <b>P&L:</b> {pnl_percent:+.2f}% (${pnl_usd:+.2f})

‚è∞ <b>–í—Ä–µ–º—è:</b>
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∞: {entry_dt.strftime('%Y-%m-%d %H:%M')} UTC
‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {time_str}

ü§ñ <b>AI –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ Score: {ai_score:.3f}
‚Ä¢ Pattern: {pattern}
‚Ä¢ Confidence: {confidence:.1f}%

üìà <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {'–ü—Ä–∏–±—ã–ª—å–Ω–∞—è' if pnl_percent > 0 else '–£–±—ã—Ç–æ—á–Ω–∞—è' if pnl_percent < 0 else '–ù–∞ —É—Ä–æ–≤–Ω–µ'}
"""

        return status

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}"

def get_position_summary():
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    if not os.path.exists(POSITION_FILE):
        return "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

    try:
        with open(POSITION_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

        position_type = data.get("type", "UNKNOWN")
        entry_price = data.get("entry_price", 0)
        symbol = data.get("symbol", "BTC/USDT")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        try:
            exchange = ccxt.gateio()
            current_price = exchange.fetch_ticker(symbol)['last']
            
            if position_type == 'buy':
                pnl_percent = (current_price - entry_price) / entry_price * 100
            else:
                pnl_percent = (entry_price - current_price) / entry_price * 100
                
            pnl_emoji = "üü¢" if pnl_percent > 0 else "üî¥"
            
        except:
            current_price = entry_price
            pnl_percent = 0
            pnl_emoji = "‚ö™"

        return f"{pnl_emoji} {position_type.upper()}: {entry_price:.2f}‚Üí{current_price:.2f} ({pnl_percent:+.1f}%)"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

def get_position_risk_analysis():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if not os.path.exists(POSITION_FILE):
        return None

    try:
        with open(POSITION_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

        entry_price = data.get("entry_price", 0)
        position_type = data.get("type")
        symbol = data.get("symbol", "BTC/USDT")
        entry_time = data.get("timestamp")
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        entry_dt = datetime.fromisoformat(entry_time.replace('Z', '+00:00') if 'Z' in entry_time else entry_time)
        hold_hours = (datetime.utcnow() - entry_dt).total_seconds() / 3600

        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        try:
            exchange = ccxt.gateio()
            current_price = exchange.fetch_ticker(symbol)['last']
        except:
            current_price = entry_price

        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤
        if position_type == 'buy':
            pnl_percent = (current_price - entry_price) / entry_price * 100
            risk_to_support = 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –¥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        else:
            pnl_percent = (entry_price - current_price) / entry_price * 100
            risk_to_resistance = 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –¥–æ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è

        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        risk_level = "–ù–ò–ó–ö–ò–ô"
        if abs(pnl_percent) > 3:
            risk_level = "–í–´–°–û–ö–ò–ô"
        elif abs(pnl_percent) > 1.5:
            risk_level = "–°–†–ï–î–ù–ò–ô"

        time_risk = "–ù–û–†–ú–ê–õ–¨–ù–´–ô"
        if hold_hours > 6:
            time_risk = "–î–û–õ–ì–ò–ô"
        elif hold_hours > 12:
            time_risk = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"

        analysis = {
            "current_pnl": pnl_percent,
            "hold_hours": hold_hours,
            "risk_level": risk_level,
            "time_risk": time_risk,
            "position_type": position_type,
            "entry_price": entry_price,
            "current_price": current_price
        }

        return analysis

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤: {e}")
        return None

def format_position_alert():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    analysis = get_position_risk_analysis()
    
    if not analysis:
        return None
        
    if analysis["risk_level"] == "–í–´–°–û–ö–ò–ô" or analysis["time_risk"] == "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô":
        alert = f"""
üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏!</b>

üìä {analysis['position_type'].upper()}: {analysis['entry_price']:.2f} ‚Üí {analysis['current_price']:.2f}
üìâ P&L: {analysis['current_pnl']:+.2f}%
‚è∞ –£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {analysis['hold_hours']:.1f}—á

‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['risk_level']}
‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∏—Å–∫: {analysis['time_risk']}

ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
"""
        return alert
        
    return None

def save_position_snapshot():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    if not os.path.exists(POSITION_FILE):
        return False
        
    try:
        analysis = get_position_risk_analysis()
        if not analysis:
            return False
            
        snapshot = {
            "timestamp": datetime.utcnow().isoformat(),
            "analysis": analysis
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å–Ω–∞–ø—à–æ—Ç–æ–≤
        snapshots_file = "position_snapshots.json"
        snapshots = []
        
        if os.path.exists(snapshots_file):
            with open(snapshots_file, 'r') as f:
                snapshots = json.load(f)
                
        snapshots.append(snapshot)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–Ω–∞–ø—à–æ—Ç–æ–≤
        snapshots = snapshots[-100:]
        
        with open(snapshots_file, 'w') as f:
            json.dump(snapshots, f, indent=2)
            
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞: {e}")
        return False
