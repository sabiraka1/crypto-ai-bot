import os
import joblib
import pandas as pd
import numpy as np
import logging
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MODEL_PATH = "models/ai_model.pkl"
BACKUP_MODEL_PATH = "models/ai_model_old.pkl"
CSV_PATH = "sinyal_fiyat_analizi.xlsx"

def train_model():
    if not os.path.exists(CSV_PATH):
        logger.error(f"‚ùå –§–∞–π–ª {CSV_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
    df = pd.read_excel(CSV_PATH)
    df = df.dropna()

    features = ["rsi", "macd", "score", "stochrsi", "adx"]
    X = df[features]
    y = (df["result"] == "correct").astype(int)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # === –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ===
    new_model = RandomForestClassifier(n_estimators=100, random_state=42)
    new_model.fit(X_train, y_train)
    new_acc = accuracy_score(y_test, new_model.predict(X_test))

    logger.info(f"üìà –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. Accuracy: {new_acc:.2f}")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
    if os.path.exists(MODEL_PATH):
        try:
            old_model = joblib.load(MODEL_PATH)
            old_acc = accuracy_score(y_test, old_model.predict(X_test))
            logger.info(f"üìâ –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å. Accuracy: {old_acc:.2f}")

            if new_acc >= old_acc:
                # Backup —Å—Ç–∞—Ä–æ–π
                joblib.dump(old_model, BACKUP_MODEL_PATH)
                joblib.dump(new_model, MODEL_PATH)
                logger.info("‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é. Backup —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            else:
                logger.warning("‚ö†Ô∏è –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ö—É–∂–µ. –û—Ç–∫–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {e}")
            joblib.dump(new_model, MODEL_PATH)
            logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å.")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ø–µ—Ä–≤—ã–µ
        joblib.dump(new_model, MODEL_PATH)
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ.")

    # === –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
    importances = new_model.feature_importances_
    logger.info("üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for feat, imp in zip(features, importances):
        logger.info(f"  - {feat}: {imp:.4f}")
