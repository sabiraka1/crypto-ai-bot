import pandas as pd
import numpy as np
import os
import joblib
import logging
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "sinyal_fiyat_analizi.csv"
MODEL_DIR = "models"
MODEL_PATH = os.path.join(MODEL_DIR, "ai_model.pkl")
BACKUP_PATH = os.path.join(MODEL_DIR, "ai_model_backup.pkl")

def train_model():
    if not os.path.exists(DATA_FILE):
        logger.error("‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    df = pd.read_csv(DATA_FILE)

    if df.shape[0] < 50:
        logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        return

    df = df.dropna()
    df = df[df['signal'].isin(["BUY", "SELL"])]
    df["signal_code"] = df["signal"].map({"BUY": 1, "SELL": -1})

    X = df[["rsi", "macd", "signal_code"]]
    y = df["success"].astype(int)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
    old_accuracy = None
    if os.path.exists(MODEL_PATH):
        try:
            old_model = joblib.load(MODEL_PATH)
            y_pred_old = old_model.predict(X_test)
            old_accuracy = accuracy_score(y_test, y_pred_old)
            logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {old_accuracy:.4f}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {e}")

    # === –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ===
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred_new = model.predict(X_test)
    new_accuracy = accuracy_score(y_test, y_pred_new)
    logger.info(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {new_accuracy:.4f}")

    # === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ===
    if old_accuracy is not None and new_accuracy < old_accuracy:
        logger.warning("‚õî –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ö—É–∂–µ. –û—Ç–∫–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—É—é.")
        return  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    else:
        if os.path.exists(MODEL_PATH):
            os.rename(MODEL_PATH, BACKUP_PATH)
            logger.info("üì¶ –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ backup.")

        os.makedirs(MODEL_DIR, exist_ok=True)
        joblib.dump(model, MODEL_PATH)
        logger.info("‚úÖ –ù–æ–≤–∞—è AI-–º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

        # === –í—ã–≤–æ–¥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
        importances = model.feature_importances_
        for feature, imp in zip(X.columns, importances):
            logger.info(f"üìå –í–∞–∂–Ω–æ—Å—Ç—å {feature}: {imp:.4f}")
