import os
import ccxt
import time
import logging
from datetime import datetime
from typing import Dict, Optional, Any, List

class APIException(Exception):
    pass

class ExchangeClient:
    """
    Gate.io spot client via ccxt with:
      - SAFE_MODE (paper) support
      - min_notional (min cost) check & auto-adjust
      - retry policy (non-retryable errors are not retried)
      - buy by QUOTE amount (USDT) using params={'cost': ...}
      - structured logging
    """
    def __init__(self, api_key: Optional[str] = None, api_secret: Optional[str] = None):
        self.safe_mode = str(os.getenv("SAFE_MODE", "0")).strip().lower() in ("1", "true", "yes", "on")
        self.exchange = ccxt.gateio({
            "apiKey": api_key or os.getenv("GATE_API_KEY"),
            "secret": api_secret or os.getenv("GATE_API_SECRET"),
            "enableRateLimit": True,
            "options": {
                "defaultType": "spot",
                # –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ params.cost
                "createMarketBuyOrderRequiresPrice": False,
                "adjustForTimeDifference": True,
            }
        })

        self.markets: Dict[str, Any] = {}
        try:
            self.exchange.check_required_credentials()
        except Exception:
            # –Ω–µ —Ñ–µ–π–ª–∏–º, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–∞–±–ª–∏–∫-–º–µ—Ç–æ–¥—ã –Ω—É–∂–Ω—ã
            pass

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ + –∑–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤
        try:
            try:
                server_time = self.exchange.fetch_time()
                drift_ms = int(server_time) - int(time.time() * 1000)
                logging.info(f"‚è±Ô∏è Gate.io time drift ~ {drift_ms} ms")
            except Exception:
                logging.debug("fetch_time not available")

            self.markets = self.exchange.load_markets()
            logging.info("‚úÖ Exchange client initialized and markets loaded")
        except Exception as e:
            logging.error(f"‚ùå load_markets failed: {e}")

    # --------------------- helpers ---------------------
    def market_min_cost(self, symbol: str) -> Optional[float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ–ø—É—Å—Ç–∏–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ (USDT) –¥–ª—è —Å–∏–º–≤–æ–ª–∞,
        –µ—Å–ª–∏ –±–∏—Ä–∂–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–æ –≤ markets[symbol]['limits']['cost']['min'].
        """
        try:
            m = self.markets.get(symbol) or {}
            limits = m.get("limits") or {}
            cost = limits.get("cost") or {}
            mn = cost.get("min")
            return float(mn) if mn is not None else None
        except Exception:
            return None

    def _is_retryable(self, e: Exception) -> bool:
        """
        –†–∞—Å—Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏: –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º —è–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∏
        (–º–∏–∫—Ä–æ-—Å—É–º–º–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã).
        """
        msg = str(e).upper()
        non_retry_signals = [
            "INVALID_PARAM_VALUE",
            "BALANCE_NOT_ENOUGH",
            "INSUFFICIENT",
            "MIN_TRADE_REQUIREMENT",
            "MIN_NOTIONAL",
            "COST_MIN",
        ]
        return not any(s in msg for s in non_retry_signals)

    # --------------------- safe wrapper ---------------------
    def _safe(self, fn, *args, **kwargs):
        last_exc = None
        for attempt in range(3):
            try:
                return fn(*args, **kwargs)
            except Exception as e:
                last_exc = e
                # –î–ª—è –Ω–µ-—Ä–µ—Ç—Ä–∞–∏–±–ª ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
                if not self._is_retryable(e):
                    logging.error(f"‚ö†Ô∏è ccxt call failed (non-retryable): {e}")
                    break
                logging.warning(f"‚ö†Ô∏è ccxt call failed (retryable, attempt {attempt+1}/3): {e}")
                time.sleep(1.5)
        raise APIException(f"exchange call failed after retries: {last_exc}")

    # --------------------- diagnostics ---------------------
    def test_connection(self) -> bool:
        """–õ—ë–≥–∫–∏–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å."""
        try:
            bal = self._safe(self.exchange.fetch_balance)
            total = bal.get("total", {}) or {}
            logging.info(f"üîê Auth OK, assets: {len(total)}")
            return True
        except Exception as e:
            logging.error(f"‚ùå Auth/Balance test failed: {e}")
            return False

    # --------------------- market data ---------------------
    def fetch_ohlcv(self, symbol: str, timeframe: str = "15m", limit: int = 200) -> List[List[Any]]:
        return self._safe(self.exchange.fetch_ohlcv, symbol, timeframe, None, limit)

    def ticker(self, symbol: str) -> Dict[str, Any]:
        return self._safe(self.exchange.fetch_ticker, symbol)

    def get_last_price(self, symbol: str) -> float:
        t = self.ticker(symbol)
        return float(t.get("last") or t.get("close"))

    # --------------------- balance ---------------------
    def get_balance(self, asset: str) -> float:
        balance = self._safe(self.exchange.fetch_balance)
        return float((balance.get("free") or {}).get(asset, 0))

    # --------------------- trading ---------------------
    def create_market_buy_order(self, symbol: str, amount_usd: float):
        """
        –°–æ–∑–¥–∞—ë—Ç –º–∞—Ä–∫–µ—Ç BUY –æ—Ä–¥–µ—Ä –ø–æ **—Å—É–º–º–µ –≤ USDT**.
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç min_notional: auto-bump –¥–æ –º–∏–Ω–∏–º—É–º–∞
        - SAFE_MODE: paper-–æ—Ä–¥–µ—Ä –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        """
        # min_notional guard
        min_cost = self.market_min_cost(symbol) or 0.0
        final_cost = max(float(amount_usd), float(min_cost))
        if final_cost > amount_usd:
            logging.info(f"üß© amount bumped to min_notional: requested={amount_usd:.2f}, min={min_cost:.2f}, final={final_cost:.2f}")

        if self.safe_mode:
            order = {
                "id": f"paper-{int(time.time()*1000)}",
                "symbol": symbol,
                "side": "buy",
                "type": "market",
                "status": "filled",
                "cost_usd": final_cost,
                "paper": True,
            }
            self._log_trade("BUY[PAPER]", symbol, final_cost, self.get_last_price(symbol))
            return order

        # –ù–∞ Gate.io –ø–æ–∫—É–ø–∫–∞ –ø–æ 'cost' (quote-amount). amount(None) + params.cost
        order = self._safe(
            self.exchange.create_order,
            symbol,
            "market",
            "buy",
            None,             # amount –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ cost)
            None,
            {"cost": final_cost}
        )
        self._log_trade("BUY", symbol, final_cost, self.get_last_price(symbol))
        return order

    def create_market_sell_order(self, symbol: str, amount_base: float):
        """
        –ú–∞—Ä–∫–µ—Ç SELL –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.
        SAFE_MODE: paper-–æ—Ä–¥–µ—Ä –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ.
        """
        if self.safe_mode:
            order = {
                "id": f"paper-{int(time.time()*1000)}",
                "symbol": symbol,
                "side": "sell",
                "type": "market",
                "status": "filled",
                "amount": float(amount_base),
                "paper": True,
            }
            self._log_trade("SELL[PAPER]", symbol, float(amount_base), self.get_last_price(symbol))
            return order

        order = self._safe(self.exchange.create_order, symbol, "market", "sell", float(amount_base))
        self._log_trade("SELL", symbol, float(amount_base), self.get_last_price(symbol))
        return order

    # --------------------- aliases ---------------------
    def buy(self, symbol: str, amount_usd: float):
        return self.create_market_buy_order(symbol, amount_usd)

    def sell(self, symbol: str, amount: float):
        return self.create_market_sell_order(symbol, amount)

    # --------------------- trade logging ---------------------
    def _log_trade(self, action: str, symbol: str, amount: float, price: float):
        msg = (
            f"[TRADE] {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC | "
            f"{action} {symbol} amount={amount:.8f} @ {price:.2f} USDT"
        )
        logging.info(msg)
        try:
            with open("trades.log", "a", encoding="utf-8") as f:
                f.write(msg + "\n")
        except Exception as e:
            logging.error(f"‚ùå write trades.log failed: {e}")
