import ccxt
import os
import time
import logging
from datetime import datetime
from typing import Dict, Optional, Any, List

class APIException(Exception):
    pass

class ExchangeClient:
    """Gate.io spot client via ccxt with safe calls, precision handling, and logging."""
    def __init__(self, api_key: Optional[str] = None, api_secret: Optional[str] = None):
        self.exchange = ccxt.gateio({
            'apiKey': api_key or os.getenv("GATE_API_KEY"),
            'secret': api_secret or os.getenv("GATE_API_SECRET"),
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot',
                # ‚úÖ –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Å—É–º–º–µ (USDT), –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ price
                'createMarketBuyOrderRequiresPrice': False,
                # ‚úÖ ccxt –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∏—Ñ—Ç –≤—Ä–µ–º–µ–Ω–∏
                'adjustForTimeDifference': True,
            }
        })

        self.markets = None
        try:
            # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–¥–∞–Ω—ã (–∫–∏–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ)
            self.exchange.check_required_credentials()
        except Exception:
            # –Ω–µ –ø–∞–¥–∞–µ–º ‚Äî –ø–æ–∑–≤–æ–ª—è–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –∫–ª—é—á–µ–π (—á—Ç–µ–Ω–∏–µ)
            pass

        try:
            # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è (–µ—Å–ª–∏ –±–∏—Ä–∂–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            try:
                server_time = self.exchange.fetch_time()
                drift_ms = int(server_time) - int(time.time() * 1000)
                logging.info(f"‚è±Ô∏è Gate.io time drift ~ {drift_ms} ms")
            except Exception:
                # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logging.debug("fetch_time not available")

            self.markets = self.exchange.load_markets()
            logging.info("‚úÖ Exchange client initialized and markets loaded")
        except Exception as e:
            logging.error(f"‚ùå load_markets failed: {e}")

    # ---------- safe wrapper with retries ----------
    def _safe(self, fn, *args, **kwargs):
        for _ in range(3):
            try:
                return fn(*args, **kwargs)
            except Exception as e:
                logging.error(f"‚ö†Ô∏è ccxt call failed: {e}")
                time.sleep(1.5)
        raise APIException("exchange call failed after retries")

    # ---------- diagnostics ----------
    def test_connection(self) -> bool:
        """–õ—ë–≥–∫–∏–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å."""
        try:
            bal = self._safe(self.exchange.fetch_balance)
            # –µ—Å–ª–∏ –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–∫
            total = bal.get('total', {}) or {}
            logging.info(f"üîê Auth OK, assets: {len(total)}")
            return True
        except Exception as e:
            logging.error(f"‚ùå Auth/Balance test failed: {e}")
            return False

    # ---------- OHLCV & ticker ----------
    def fetch_ohlcv(self, symbol: str, timeframe: str = '15m', limit: int = 200) -> List[List[Any]]:
        """CCXT OHLCV: [ts, open, high, low, close, volume]"""
        return self._safe(self.exchange.fetch_ohlcv, symbol, timeframe, None, limit)

    def ticker(self, symbol: str) -> Dict[str, Any]:
        """Ticker: {'last': ..., 'close': ...}"""
        return self._safe(self.exchange.fetch_ticker, symbol)

    def get_last_price(self, symbol: str) -> float:
        t = self.ticker(symbol)
        return float(t.get('last') or t.get('close'))

    # ---------- balance ----------
    def get_balance(self, asset: str) -> float:
        balance = self._safe(self.exchange.fetch_balance)
        return float((balance.get('free') or {}).get(asset, 0))

    # ---------- orders ----------
    def create_market_buy_order(self, symbol: str, usd_amount: float):
        """
        –°–æ–∑–¥–∞—ë—Ç –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ —Å—É–º–º–µ –≤ USDT (quote).
        CCXT + Gate.io –ø—Ä–∏–º—É—Ç —ç—Ç–æ –ø—Ä–∏ createMarketBuyOrderRequiresPrice=False.
        """
        order = self._safe(
            self.exchange.create_order,
            symbol,
            'market',
            'buy',
            usd_amount,      # —Å—É–º–º–∞ –≤ USDT
            None,            # price –Ω–µ –Ω—É–∂–µ–Ω
            {'cost': usd_amount}  # –¥—É–±–ª–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —è–≤–Ω–æ
        )
        self._log_trade("BUY", symbol, usd_amount, self.get_last_price(symbol))
        return order

    def create_market_sell_order(self, symbol: str, amount: float):
        # –¥–ª—è sell –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
        order = self._safe(self.exchange.create_order, symbol, 'market', 'sell', amount)
        self._log_trade("SELL", symbol, amount, self.get_last_price(symbol))
        return order

    # ---------- short aliases ----------
    def buy(self, symbol: str, amount_usd: float):
        return self.create_market_buy_order(symbol, amount_usd)

    def sell(self, symbol: str, amount: float):
        return self.create_market_sell_order(symbol, amount)

    # ---------- trade logging ----------
    def _log_trade(self, action: str, symbol: str, amount: float, price: float):
        msg = f"[TRADE] {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC | {action.upper()} {amount} {symbol} @ {price} USDT"
        logging.info(msg)
        try:
            with open("trades.log", "a", encoding="utf-8") as f:
                f.write(msg + "\n")
        except Exception as e:
            logging.error(f"‚ùå write trades.log failed: {e}")
