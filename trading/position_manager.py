import os
import json
import threading
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from trading.risk_manager import AdaptiveRiskManager
from trading.profit_manager import MultiTakeProfitManager
from trading.performance_tracker import RealTimePerformanceTracker
from utils.csv_handler import CSVHandler
from utils.telegram_notifier import send_telegram_message
from exchange_client import ExchangeClient
from config import settings


class PositionManager:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π —Å:
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
    - 4 —É—Ä–æ–≤–Ω—è–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ + —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ CSV
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Telegram
    - –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
    """

    def __init__(self):
        self.lock = threading.RLock()
        self.position_file = "open_position.json"
        self.exchange = ExchangeClient()
        self.risk_manager = AdaptiveRiskManager()
        self.profit_manager = MultiTakeProfitManager()
        self.performance_tracker = RealTimePerformanceTracker()
        self.csv_handler = CSVHandler()

        self.current_position: Optional[Dict[str, Any]] = self._load_position()
        self.opening = False

    def _load_position(self) -> Optional[Dict[str, Any]]:
        if os.path.exists(self.position_file):
            try:
                with open(self.position_file, "r") as f:
                    return json.load(f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return None

    def _save_position(self, position: Dict[str, Any]) -> None:
        try:
            with open(self.position_file, "w") as f:
                json.dump(position, f, indent=4)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def _clear_position(self) -> None:
        if os.path.exists(self.position_file):
            try:
                os.remove(self.position_file)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        self.current_position = None

    def open_position(self, signal: str, price: float, ai_score: float) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∏ TP —É—Ä–æ–≤–Ω–µ–π
        """
        with self.lock:
            if self.current_position or self.opening:
                logging.warning("–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –∏–¥—ë—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ.")
                return False

            self.opening = True

            try:
                # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                position_size, stop_loss = self.risk_manager.calculate_position_size_and_sl(
                    symbol=settings.SYMBOL,
                    entry_price=price,
                    ai_score=ai_score
                )

                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
                order = self.exchange.open_market_order(settings.SYMBOL, signal, position_size)
                if not order:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ.")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP —É—Ä–æ–≤–Ω–∏
                take_profits = self.profit_manager.calculate_tp_levels(price)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ
                self.current_position = {
                    "symbol": settings.SYMBOL,
                    "side": signal,
                    "entry_price": price,
                    "position_size": position_size,
                    "stop_loss": stop_loss,
                    "take_profits": take_profits,
                    "open_time": datetime.utcnow().isoformat(),
                    "ai_score": ai_score
                }
                self._save_position(self.current_position)

                # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                send_telegram_message(
                    f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal}\n"
                    f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price}\n"
                    f"–†–∞–∑–º–µ—Ä: {position_size}\n"
                    f"SL: {stop_loss}\n"
                    f"TP —É—Ä–æ–≤–Ω–∏: {take_profits}\n"
                    f"AI Score: {ai_score}"
                )

                return True

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                return False

            finally:
                self.opening = False

    def close_position(self, reason: str, price: Optional[float] = None) -> bool:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        with self.lock:
            if not self.current_position:
                logging.warning("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
                return False

            try:
                side = "sell" if self.current_position["side"].lower() == "buy" else "buy"
                position_size = self.current_position["position_size"]

                # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                order = self.exchange.close_market_order(settings.SYMBOL, side, position_size)
                if not order:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ.")

                # –ó–∞–ø–∏—Å—å –≤ performance tracker
                self.performance_tracker.log_trade_result(
                    symbol=settings.SYMBOL,
                    entry_price=self.current_position["entry_price"],
                    exit_price=price or order.get("price", 0),
                    side=self.current_position["side"],
                    reason=reason,
                    ai_score=self.current_position.get("ai_score", None)
                )

                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
                self._clear_position()

                # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                send_telegram_message(
                    f"üìâ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {price or order.get('price')}"
                )

                return True

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                return False

    def check_stop_loss_take_profit(self, current_price: float) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã SL –∏–ª–∏ TP
        """
        if not self.current_position:
            return

        stop_loss = self.current_position["stop_loss"]
        take_profits = self.current_position["take_profits"]
        side = self.current_position["side"]

        if side == "buy" and current_price <= stop_loss:
            self.close_position("Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª", current_price)
        elif side == "sell" and current_price >= stop_loss:
            self.close_position("Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª", current_price)

        for tp in take_profits:
            if side == "buy" and current_price >= tp["price"]:
                self.close_position(f"Take Profit {tp['level']}", current_price)
                break
            elif side == "sell" and current_price <= tp["price"]:
                self.close_position(f"Take Profit {tp['level']}", current_price)
                break
