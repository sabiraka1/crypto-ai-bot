import os
import logging
from flask import Flask, request, jsonify
from apscheduler.schedulers.background import BackgroundScheduler
from trading_bot import check_and_trade
from telegram_bot import handle_command
from train_model import create_basic_model
from enhanced_data_logger import create_enhanced_csv_structure
from dotenv import load_dotenv
import requests

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.environ.get('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

def initialize_enhanced_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Trading System v2.0...")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV —Ñ–∞–π–ª–æ–≤ –ø–æ–¥ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        create_enhanced_csv_structure()
        logger.info("‚úÖ CSV —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏
    model_path = "models/ai_model.pkl"
    if not os.path.exists(model_path):
        logger.info("üß† AI –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        try:
            create_basic_model()
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è AI –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
    else:
        logger.info("‚úÖ AI –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        from enhanced_smart_risk_manager import EnhancedSmartRiskManager
        risk_manager = EnhancedSmartRiskManager()
        logger.info("‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend_analysis = risk_manager.analyze_market_trend()
        logger.info(f"üìä –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {trend_analysis.get('trend_1d', 'Unknown')} (1D), {trend_analysis.get('trend_4h', 'Unknown')} (4H)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∏—Å–∫–æ–≤: {e}")
    
    # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = ["charts", "models"]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –≥–æ—Ç–æ–≤–∞")
    
    logger.info("üéâ Enhanced Trading System v2.0 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

def setup_enhanced_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    scheduler = BackgroundScheduler()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    scheduler.add_job(
        func=check_and_trade, 
        trigger="interval", 
        minutes=15, 
        id="enhanced_trading",
        max_instances=1,
        coalesce=True
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    def update_trend_analysis():
        try:
            from enhanced_smart_risk_manager import EnhancedSmartRiskManager
            risk_manager = EnhancedSmartRiskManager()
            risk_manager.analyze_market_trend()
            logger.info("üìä –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: {e}")
    
    scheduler.add_job(
        func=update_trend_analysis,
        trigger="interval",
        hours=1,
        id="trend_analysis",
        max_instances=1
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
    from log_cleaner import schedule_cleanup
    scheduler.add_job(
        func=schedule_cleanup,
        trigger="interval",
        hours=12,
        id="enhanced_cleanup",
        max_instances=1
    )
    
    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    def scheduled_retrain():
        try:
            from train_model import retrain_model
            retrain_model()
            logger.info("üß† –ü–ª–∞–Ω–æ–≤–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    scheduler.add_job(
        func=scheduled_retrain,
        trigger="interval",
        hours=24,
        id="scheduled_retrain",
        max_instances=1
    )
    
    scheduler.start()
    logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    return scheduler

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram"""
    try:
        render_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        
        response = requests.post(webhook_url, json={"url": render_url}, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {render_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_enhanced_system()
scheduler = setup_enhanced_scheduler()
setup_webhook()

@app.route("/health", methods=["GET"])
def health():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Enhanced —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from trading_bot import get_open_position
        from enhanced_data_logger import get_enhanced_performance
        from enhanced_smart_risk_manager import EnhancedSmartRiskManager
        
        risk_manager = EnhancedSmartRiskManager()
        trend_analysis = risk_manager.get_cached_trend_analysis()
        
        health_data = {
            "service": "healthy",
            "version": "Enhanced Trading System v2.0",
            "components": {
                "scheduler": scheduler.running if scheduler else False,
                "ai_model": os.path.exists("models/ai_model.pkl"),
                "enhanced_csv": os.path.exists("sinyal_fiyat_analizi.csv"),
                "trades_data": os.path.exists("closed_trades.csv"),
                "risk_manager": True,
                "trend_analysis": trend_analysis.get("analysis_time") is not None
            },
            "trading": {
                "position_open": get_open_position() is not None,
                "trade_timeout_active": not risk_manager.check_trade_timeout(),
                "current_trend_1d": trend_analysis.get("trend_1d", "Unknown"),
                "current_trend_4h": trend_analysis.get("trend_4h", "Unknown"),
                "market_state": trend_analysis.get("market_state", "Unknown")
            },
            "performance": get_enhanced_performance(days=7),
            "system_config": {
                "confidence_threshold": risk_manager.CONFIDENCE_THRESHOLD,
                "min_score": risk_manager.MIN_SCORE_FOR_TRADE,
                "trade_timeout_hours": risk_manager.TRADE_TIMEOUT_HOURS,
                "rsi_consecutive_limit": risk_manager.RSI_CONSECUTIVE_LIMIT
            }
        }
        
        return jsonify(health_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {"service": "unhealthy", "error": str(e)}, 500

@app.route("/api/market-analysis", methods=["GET"])
def api_market_analysis():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
    try:
        from technical_analysis import generate_signal
        from enhanced_smart_risk_manager import EnhancedSmartRiskManager
        
        risk_manager = EnhancedSmartRiskManager()
        market_data = generate_signal()
        smart_decision = risk_manager.get_enhanced_trading_decision(market_data)
        
        response = {
            "timestamp": market_data.get("timestamp", ""),
            "price": market_data.get("price", 0),
            "decision": {
                "action": smart_decision.get("action", "WAIT"),
                "score": smart_decision.get("score", 0),
                "macd_contribution": smart_decision.get("macd_contribution", 0),
                "reasons": smart_decision.get("reasons", [])
            },
            "technical_indicators": {
                "rsi": market_data.get("rsi", 0),
                "macd": market_data.get("macd", 0),
                "pattern": market_data.get("pattern", "NONE"),
                "pattern_score": market_data.get("pattern_score", 0),
                "confidence": market_data.get("confidence", 0)
            },
            "trend_analysis": smart_decision.get("trend_analysis", {}),
            "trade_timeout_active": not risk_manager.check_trade_timeout()
        }
        
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
        return {"error": str(e)}, 500

@app.route("/api/performance", methods=["GET"])
def api_performance():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        from enhanced_data_logger import get_enhanced_performance
        
        days = request.args.get('days', 30, type=int)
        performance_data = get_enhanced_performance(days=days)
        
        if performance_data:
            return jsonify(performance_data), 200
        else:
            return {"message": "Insufficient data"}, 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return {"error": str(e)}, 500

@app.route("/", methods=["GET"])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Enhanced —Å–∏—Å—Ç–µ–º–µ"""
    return """
    <html>
        <head>
            <title>ü§ñ Enhanced Crypto AI Trading Bot v2.0</title>
            <style>
                body { font-family: Arial; padding: 20px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; }
                .feature { background: #ecf0f1; padding: 15px; margin: 10px 0; border-radius: 5px; }
                .endpoint { background: #e8f8f5; padding: 10px; margin: 5px 0; border-radius: 5px; font-family: monospace; }
                .new-badge { background: #e74c3c; color: white; padding: 2px 8px; border-radius: 10px; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Enhanced Crypto AI Trading Bot v2.0 <span class="new-badge">NEW</span></h1>
                
                <p><strong>Status:</strong> ‚úÖ Running Enhanced System</p>
                <p><strong>Version:</strong> 2.0 - Smart Risk Management</p>
                <p><strong>Last Updated:</strong> August 2025</p>
                
                <h3>üÜï New Features v2.0:</h3>
                <div class="feature">
                    <strong>üéØ Smart Scoring System:</strong> MACD-based scoring with 3+ point threshold
                </div>
                <div class="feature">
                    <strong>üåç Multi-timeframe Analysis:</strong> 1D/4H trend analysis with adaptive parameters
                </div>
                <div class="feature">
                    <strong>üîÑ Enhanced Risk Management:</strong> 5-candle RSI analysis, 1-hour trade timeout
                </div>
                <div class="feature">
                    <strong>üìä Advanced Logging:</strong> Comprehensive trade data with trend analysis
                </div>
                
                <h3>üìä API Endpoints:</h3>
                <div class="endpoint">GET /health - Detailed system health check</div>
                <div class="endpoint">GET /alive - Basic status check</div>
                <div class="endpoint">GET /api/market-analysis - Current market analysis</div>
                <div class="endpoint">GET /api/performance?days=30 - Performance statistics</div>
                <div class="endpoint">POST /webhook - Telegram webhook (internal)</div>
                
                <h3>ü§ñ Enhanced Features:</h3>
                <ul>
                    <li>‚úÖ 15+ advanced candlestick patterns</li>
                    <li>‚úÖ Multi-level trend analysis (1D/4H/15M)</li>
                    <li>‚úÖ Adaptive market condition responses</li>
                    <li>‚úÖ Smart MACD scoring system</li>
                    <li>‚úÖ Enhanced risk management with RSI memory</li>
                    <li>‚úÖ Comprehensive performance tracking</li>
                    <li>‚úÖ Auto model retraining with trend data</li>
                    <li>‚úÖ 15+ Telegram commands</li>
                </ul>
                
                <h3>‚öôÔ∏è System Configuration:</h3>
                <ul>
                    <li>Confidence Threshold: 55%</li>
                    <li>Minimum Score: 3 points</li>
                    <li>Trade Timeout: 1 hour</li>
                    <li>RSI Close Condition: 5 candles >70</li>
                    <li>Critical RSI: >90</li>
                    <li>Timeframe: 15 minutes</li>
                </ul>
                
                <p><em>Enhanced System developed by Z√ºleyha & Sabir | 2025</em></p>
            </div>
        </body>
    </html>
    """, 200

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return {
        "error": "Endpoint not found", 
        "available_endpoints": [
            "/", "/alive", "/health", "/webhook", 
            "/api/market-analysis", "/api/performance"
        ],
        "version": "Enhanced v2.0"
    }, 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Internal server error: {error}")
    return {
        "error": "Internal server error", 
        "message": str(error),
        "version": "Enhanced v2.0"
    }, 500

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.0...")
    logger.info(f"üåê –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"üì± Bot Token: {BOT_TOKEN[:10]}...")
    logger.info(f"üí¨ Chat ID: {os.getenv('CHAT_ID')}")
    logger.info(f"üí∞ Trade Amount: ${os.getenv('TRADE_AMOUNT', '50')}")
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(
        host="0.0.0.0", 
        port=PORT, 
        debug=False,
        threaded=True
    ).route("/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        
        if not data:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ webhook")
            return "No data", 400
        
        if "message" in data:
            handle_command(data["message"])
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {data['message'].get('text', 'N/A')}")
        else:
            logger.warning("‚ö†Ô∏è Webhook –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return f"Error: {e}", 500

@app.route("/alive", methods=["GET"])
def alive():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        status = {
            "status": "alive",
            "version": "2.0 Enhanced",
            "scheduler": scheduler.running if scheduler else False,
            "ai_model": os.path.exists("models/ai_model.pkl"),
            "csv_structure": os.path.exists("sinyal_fiyat_analizi.csv"),
            "webhook_url": f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        }
        
        return jsonify(status), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ alive: {e}")
        return {"status": "error", "message": str(e)}, 500

@app
