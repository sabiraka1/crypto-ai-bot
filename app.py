import os
import logging
from flask import Flask, request
from apscheduler.schedulers.background import BackgroundScheduler
from trading_bot import check_and_trade
from telegram_bot import handle_command
from train_model import create_basic_model
from dotenv import load_dotenv
import requests

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.environ.get('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

def initialize_model():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    model_path = "models/ai_model.pkl"
    if not os.path.exists(model_path):
        logger.info("üß† AI –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é...")
        try:
            create_basic_model()
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è AI –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
    else:
        logger.info("‚úÖ AI –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")

def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = BackgroundScheduler()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    scheduler.add_job(
        func=check_and_trade, 
        trigger="interval", 
        minutes=15, 
        id="check_and_trade",
        max_instances=1,
        coalesce=True
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    from log_cleaner import clean_logs
    scheduler.add_job(
        func=clean_logs,
        trigger="interval",
        hours=6,
        id="clean_logs",
        max_instances=1
    )
    
    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    return scheduler

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram"""
    try:
        render_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        
        response = requests.post(webhook_url, json={"url": render_url}, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {render_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_model()
scheduler = setup_scheduler()
setup_webhook()

@app.route("/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        
        if not data:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ webhook")
            return "No data", 400
        
        if "message" in data:
            handle_command(data["message"])
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {data['message'].get('text', 'N/A')}")
        else:
            logger.warning("‚ö†Ô∏è Webhook –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return f"Error: {e}", 500

@app.route("/alive", methods=["GET"])
def alive():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        status = {
            "status": "alive",
            "scheduler": scheduler.running if scheduler else False,
            "model_exists": os.path.exists("models/ai_model.pkl"),
            "webhook_url": f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        }
        
        return status, 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ alive: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.route("/health", methods=["GET"])
def health():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from trading_bot import get_open_position
        from data_logger import get_recent_performance
        
        health_data = {
            "service": "healthy",
            "components": {
                "scheduler": scheduler.running if scheduler else False,
                "ai_model": os.path.exists("models/ai_model.pkl"),
                "csv_data": os.path.exists("sinyal_fiyat_analizi.csv"),
                "trades_data": os.path.exists("closed_trades.csv")
            },
            "position": get_open_position() is not None,
            "recent_performance": get_recent_performance()
        }
        
        return health_data, 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {"service": "unhealthy", "error": str(e)}, 500

@app.route("/", methods=["GET"])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return """
    <html>
        <head><title>ü§ñ Crypto AI Trading Bot</title></head>
        <body style="font-family: Arial; padding: 20px; background: #f5f5f5;">
            <h1>ü§ñ Crypto AI Trading Bot</h1>
            <p><strong>Status:</strong> ‚úÖ Running</p>
            <p><strong>Version:</strong> 2.0</p>
            <p><strong>Last Updated:</strong> August 2025</p>
            
            <h3>üìä Endpoints:</h3>
            <ul>
                <li><a href="/alive">/alive</a> - Basic health check</li>
                <li><a href="/health">/health</a> - Detailed health check</li>
                <li>/webhook - Telegram webhook (POST only)</li>
            </ul>
            
            <h3>ü§ñ Features:</h3>
            <ul>
                <li>‚úÖ Advanced candlestick pattern recognition</li>
                <li>‚úÖ AI-powered signal scoring</li>
                <li>‚úÖ Automated trading with risk management</li>
                <li>‚úÖ Telegram integration</li>
                <li>‚úÖ Performance tracking & analysis</li>
                <li>‚úÖ Auto model retraining</li>
            </ul>
            
            <p><em>Developed by Z√ºleyha & Sabir | 2025</em></p>
        </body>
    </html>
    """, 200

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return {"error": "Endpoint not found", "available": ["/", "/alive", "/health", "/webhook"]}, 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Internal server error: {error}")
    return {"error": "Internal server error", "message": str(error)}, 500

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    logger.info(f"üåê –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"üì± Bot Token: {BOT_TOKEN[:10]}...")
    logger.info(f"üí¨ Chat ID: {os.getenv('CHAT_ID')}")
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(
        host="0.0.0.0", 
        port=PORT, 
        debug=False,
        threaded=True
    )
