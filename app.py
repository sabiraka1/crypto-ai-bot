import os
import logging
import threading
from flask import Flask, request, jsonify
import requests

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
PUBLIC_URL = os.getenv("PUBLIC_URL")  # –ë–µ–∑ / –≤ –∫–æ–Ω—Ü–µ
PORT = int(os.getenv("PORT", 5000))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN is missing in environment variables!")
if not PUBLIC_URL:
    logger.error("‚ùå PUBLIC_URL is missing in environment variables!")

WEBHOOK_URL = f"{PUBLIC_URL}/webhook/{BOT_TOKEN}" if BOT_TOKEN and PUBLIC_URL else None

# ================== FLASK ==================
app = Flask(__name__)

# ================== TELEGRAM –û–¢–ü–†–ê–í–ö–ê ==================
def send_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML"}
        r = requests.post(url, json=payload)
        if r.status_code != 200:
            logger.error(f"‚ùå Telegram sendMessage error: {r.text}")
    except Exception as e:
        logger.error(f"‚ùå Telegram send error: {e}")

# ================== WEBHOOK ==================
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"""
    try:
        data = request.get_json()

        if not data or "message" not in data:
            return jsonify({"ok": True})

        message = data["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "").strip()

        logger.info(f"üì© Incoming message: {text}")

        # ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ====
        if text == "/start":
            send_message("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        elif text == "/test":
            send_message("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        elif text == "/train":
            send_message("üìö –ó–∞–ø—É—Å–∫–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        elif text == "/profit":
            send_message("üí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥: 0 USDT")
        elif text == "/errors":
            send_message("‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        elif text == "/status":
            send_message("üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
        else:
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info(f"‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ {text} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        
        return jsonify({"ok": True})
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return jsonify({"ok": False}), 500

# ================== –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ==================
def set_webhook():
    if BOT_TOKEN and PUBLIC_URL:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        payload = {"url": WEBHOOK_URL}
        try:
            r = requests.post(url, json=payload)
            logger.info(f"setWebhook ‚Üí {r.status_code} {r.text}")
        except Exception as e:
            logger.error(f"‚ùå setWebhook error: {e}")
    else:
        logger.warning("‚ö†Ô∏è Webhook not set: BOT_TOKEN or PUBLIC_URL is missing")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
def start_trading_loop():
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
    def loop():
        logger.info("üîÑ Trading loop started...")
        # –ó–¥–µ—Å—å —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
    threading.Thread(target=loop, daemon=True).start()

if __name__ == "__main__":
    set_webhook()
    start_trading_loop()
    app.run(host="0.0.0.0", port=PORT)
