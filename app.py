# ‚úÖ app.py ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhook –∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
import os
import logging
from flask import Flask, request
from apscheduler.schedulers.background import BackgroundScheduler
from trading_bot import check_and_trade
from telegram_bot import handle_message
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.environ.get('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.add_job(func=check_and_trade, trigger="interval", minutes=15, id="check_and_trade")
scheduler.add_job(func=lambda: logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"), trigger="interval", hours=6, id="clean_logs")
scheduler.start()
logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (—Ç—Ä–µ–π–¥–∏–Ω–≥ + –æ—á–∏—Å—Ç–∫–∞)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
import requests
webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
render_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
response = requests.post(webhook_url, json={"url": render_url})
logger.info(f"üì° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {response.status_code} - {response.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    logger.info(f"üì® –î–∞–Ω–Ω—ã–µ webhook: {data}")
    try:
        if "message" in data:
            handle_message(data["message"])
        return "OK", 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return "Error", 500

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route("/alive", methods=["GET"])
def alive():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run(host="0.0.0.0", port=PORT)
