import matplotlib
matplotlib.use('Agg')
import os
import re
import logging
import threading
import time
import atexit
from typing import Optional
import requests
from flask import Flask, request, jsonify
import psutil
from datetime import datetime
# --- –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from main import TradingBot
from trading.exchange_client import ExchangeClient
from core.state_manager import StateManager
from telegram import bot_handler as tgbot
from config.settings import TradingConfig

# ================== –õ–û–ì–ò ==================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("bot_activity.log", encoding="utf-8")]
)
logger = logging.getLogger(__name__)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
CFG = TradingConfig()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config_errors = CFG.validate_config()
if config_errors:
    logger.warning("‚ö†Ô∏è Configuration issues found:")
    for error in config_errors:
        logger.warning(f"  - {error}")

# ================== –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ï–ô ==================
LOCK_FILE = ".trading.lock"
WEBHOOK_LOCK_FILE = ".webhook.lock"

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ lock –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
for lock_file in [LOCK_FILE, WEBHOOK_LOCK_FILE]:
    if os.path.exists(lock_file):
        try:
            os.remove(lock_file)
            logger.warning("‚ö†Ô∏è Removed stale lock file: %s", lock_file)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ lock-—Ñ–∞–π–ª–∞: %s", e)

# ================== –§–ò–õ–¨–¢–† –õ–û–ì–û–í ==================
class SensitiveDataFilter(logging.Filter):
    SENSITIVE_PATTERN = re.compile(r'(?i)(key|token|secret|password)\s*[:=]\s*["\']?[\w\-:]+["\']?')
    REPLACEMENT = r'\1=***'

    def filter(self, record):
        if record.args and isinstance(record.args, dict):
            record.args = {k: ("***" if any(x in k.lower() for x in ["key", "token", "secret", "password"]) else v)
                           for k, v in record.args.items()}
        if record.msg and isinstance(record.msg, str):
            record.msg = self.SENSITIVE_PATTERN.sub(self.REPLACEMENT, record.msg)
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
for handler in logging.getLogger().handlers:
    handler.addFilter(SensitiveDataFilter())


# ================== –í–°–¢–†–û–ï–ù–ù–´–ô UNIFIED MONITOR ==================
class UnifiedMonitor:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self._start_time = time.time()
        self._last_metrics = {}
        self._cache_ttl = 30  # –∫—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        self._last_cache_time = 0
        
    def get_health_status(self, trading_bot=None) -> dict:
        """–ï–¥–∏–Ω—ã–π health check - –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ endpoint'—ã"""
        now = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
        if now - self._last_cache_time < self._cache_ttl and self._last_metrics:
            return self._last_metrics
        
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            process = psutil.Process(os.getpid())
            cpu_pct = process.cpu_percent(interval=0.1)
            memory_mb = process.memory_info().rss / (1024 * 1024)
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            bot_status = self._get_bot_status(trading_bot)
            
            # –ü–æ—Ç–æ–∫–∏
            trading_thread_alive = any(
                t.name == "TradingLoop" and t.is_alive() 
                for t in threading.enumerate()
            )
            
            status = {
                "ok": True,
                "timestamp": datetime.now().isoformat(),
                "uptime_hours": round((now - self._start_time) / 3600, 2),
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã  
                "system": {
                    "cpu_percent": round(cpu_pct, 1),
                    "memory_mb": round(memory_mb, 1),
                    "threads": process.num_threads()
                },
                
                # –¢–æ—Ä–≥–æ–≤–ª—è
                "trading": {
                    "bot_initialized": trading_bot is not None,
                    "thread_alive": trading_thread_alive,
                    "position_active": bot_status.get("position_active", False),
                    "last_check": bot_status.get("last_check")
                },
                
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                "config": {
                    "safe_mode": CFG.SAFE_MODE,
                    "trading_enabled": CFG.ENABLE_TRADING,
                    "webhook_enabled": CFG.ENABLE_WEBHOOK,
                    "symbol": CFG.SYMBOL,
                    "timeframe": CFG.TIMEFRAME
                }
            }
            
            # –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
            alerts = []
            if cpu_pct > 85:
                alerts.append(f"High CPU: {cpu_pct:.1f}%")
            if memory_mb > 1000:
                alerts.append(f"High Memory: {memory_mb:.1f}MB")
            if not trading_thread_alive and bot_status.get("should_be_running"):
                alerts.append("Trading thread stopped")
                
            if alerts:
                status["alerts"] = alerts
                status["ok"] = len(alerts) < 3  # OK –µ—Å–ª–∏ < 3 –∞–ª–µ—Ä—Ç–æ–≤
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._last_metrics = status
            self._last_cache_time = now
            
            return status
            
        except Exception as e:
            return {
                "ok": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def _get_bot_status(self, trading_bot) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if not trading_bot:
            return {"position_active": False, "should_be_running": CFG.ENABLE_TRADING}
            
        try:
            position_active = False
            last_check = None
            
            if hasattr(trading_bot, 'state'):
                position_active = bool(trading_bot.state.get("in_position"))
                last_check = trading_bot.state.get("last_manage_check")
            
            return {
                "position_active": position_active,
                "last_check": last_check,
                "should_be_running": CFG.ENABLE_TRADING
            }
            
        except Exception as e:
            return {
                "position_active": False, 
                "error": str(e)[:100],
                "should_be_running": False
            }

class SimpleWatchdog:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π watchdog –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ app.py"""
    
    def __init__(self, check_interval: int = 600):  # 10 –º–∏–Ω—É—Ç
        self.check_interval = check_interval
        self._running = False
        self._thread = None
        
    def start(self, bot_ref_func, restart_func):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π watchdog"""
        if self._running:
            return
            
        self._running = True
        self._thread = threading.Thread(
            target=self._watch_loop,
            args=(bot_ref_func, restart_func),
            daemon=True,
            name="SimpleWatchdog"
        )
        self._thread.start()
        logging.info("üêï Simple watchdog started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å watchdog"""
        self._running = False
    
    def _watch_loop(self, bot_ref_func, restart_func):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        failures = 0
        
        while self._running:
            try:
                time.sleep(self.check_interval)
                
                if not self._running:
                    break
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫
                trading_alive = any(
                    t.name == "TradingLoop" and t.is_alive() 
                    for t in threading.enumerate()
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                bot_exists = False
                try:
                    bot = bot_ref_func()
                    bot_exists = bot is not None
                except Exception:
                    pass
                
                # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if not trading_alive and bot_exists and CFG.ENABLE_TRADING:
                    failures += 1
                    logging.warning(f"üêï Trading thread missing #{failures}")
                    
                    if failures >= 2:  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ 2 –Ω–µ—É–¥–∞—á
                        try:
                            logging.warning("üêï Attempting restart...")
                            restart_func()
                            failures = 0
                        except Exception as e:
                            logging.error(f"üêï Restart failed: {e}")
                else:
                    failures = 0  # –°–±—Ä–æ—Å –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    
            except Exception as e:
                logging.error(f"üêï Watchdog error: {e}")
                time.sleep(60)

# ================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ ==================
# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä—è–º–æ –≤ app.py
_unified_monitor = UnifiedMonitor()
_simple_watchdog = SimpleWatchdog()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ú–ï–ù–´ –ò–ú–ü–û–†–¢–ê ==================
def get_health_response(trading_bot=None) -> dict:
    """‚úÖ –ï–î–ò–ù–´–ô health check - –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ endpoint'—ã"""
    return _unified_monitor.get_health_status(trading_bot)

def init_monitoring(bot_ref_func, restart_func):
    """‚úÖ –ï–î–ò–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global _simple_watchdog
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π watchdog
        _simple_watchdog.start(bot_ref_func, restart_func)
        logging.info("‚úÖ Unified monitoring initialized")
    except Exception as e:
        logging.error(f"Failed to start monitoring: {e}")

def cleanup_monitoring():
    """–û—á–∏—Å—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global _simple_watchdog
    
    try:
        _simple_watchdog.stop()
        logging.info("‚úÖ Monitoring cleanup completed")
    except Exception as e:
        logging.error(f"Monitoring cleanup error: {e}")

# ================== FLASK ==================
app = Flask(__name__)

# ================== –ì–õ–û–ë–ê–õ–ö–ò ==================
_GLOBAL_EX = ExchangeClient(
    api_key=CFG.GATE_API_KEY,
    api_secret=CFG.GATE_API_SECRET,
    safe_mode=CFG.SAFE_MODE
)
_STATE = StateManager()
_TRADING_BOT = None  # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
_TRADING_BOT_LOCK = threading.RLock()  # ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
_WATCHDOG_THREAD = None
_BOOTSTRAP_DONE = False

# ================== WEBHOOK SECURITY ==================
def verify_request():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook –∑–∞–ø—Ä–æ—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ URL
    if CFG.WEBHOOK_SECRET and not request.path.endswith(CFG.WEBHOOK_SECRET):
        return jsonify({"ok": False, "error": "unauthorized"}), 403
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram secret token
    if CFG.TELEGRAM_SECRET_TOKEN:
        hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if hdr != CFG.TELEGRAM_SECRET_TOKEN:
            logger.warning("Webhook: secret token mismatch")
            return jsonify({"ok": False, "error": "unauthorized"}), 403
    
    return None

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def _train_model_safe() -> bool:
    """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º pandas"""
    try:
        import numpy as np
        import pandas as pd
        from analysis.technical_indicators import calculate_all_indicators
        from analysis.market_analyzer import MultiTimeframeAnalyzer
        from ml.adaptive_model import AdaptiveMLModel

        symbol = CFG.SYMBOL
        timeframe = CFG.TIMEFRAME

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        ohlcv = _GLOBAL_EX.fetch_ohlcv(symbol, timeframe=timeframe, limit=1000)  # –±—ã–ª–æ 500
        if not ohlcv:
            logging.error("No OHLCV data for training")
            return False

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if len(ohlcv) < 200:
            logging.error(f"Insufficient data for training: {len(ohlcv)} candles (minimum: 200)")
            return False

        cols = ["time", "open", "high", "low", "close", "volume"]
        df_raw = pd.DataFrame(ohlcv, columns=cols)
        df_raw["time"] = pd.to_datetime(df_raw["time"], unit="ms", utc=True)
        df_raw.set_index("time", inplace=True)

        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df = calculate_all_indicators(df_raw.copy())
        df["price_change"] = df["close"].pct_change()
        df["future_close"] = df["close"].shift(-1)
        df["y"] = (df["future_close"] > df["close"]).astype(int)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        _EPS = 1e-12
        if {"ema_fast", "ema_slow"}.issubset(df.columns):
            df["ema_cross"] = (df["ema_fast"] - df["ema_slow"]) / (df["ema_slow"].abs() + _EPS)
        else:
            df["ema_cross"] = 0.0
            logging.warning("Missing EMA columns, using default ema_cross=0.0")

        if {"bb_upper", "bb_lower"}.issubset(df.columns):
            rng = (df["bb_upper"] - df["bb_lower"]).abs().replace(0, np.nan) + _EPS
            df["bb_position"] = (df["close"] - df["bb_lower"]) / rng
        else:
            df["bb_position"] = 0.5
            logging.warning("Missing Bollinger Bands columns, using default bb_position=0.5")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å pandas resample
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
        agg = {"open": "first", "high": "max", "low": "min", "close": "last", "volume": "sum"}
        try:
            df_1d = df_raw.resample("1D").agg(agg)
            df_4h = df_raw.resample("4h").agg(agg)  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: "4H" -> "4h"
            logging.info("‚úÖ Market timeframes prepared successfully")
        except Exception as e:
            logging.warning(f"Resample error, using fallback approach: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            df_1d = df_raw.groupby(df_raw.index.date).agg(agg)
            df_4h = df_raw.copy()  # –ü—Ä–æ—Å—Ç–æ–π fallback

        # –£–¥–∞–ª—è–µ–º NaN –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        df = df.replace([np.inf, -np.inf], np.nan).dropna()

        feature_cols = [
            "rsi", "macd", "ema_cross", "bb_position",
            "stoch_k", "adx", "volume_ratio", "price_change",
        ]
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing_cols = [col for col in feature_cols if col not in df.columns]
        if missing_cols:
            logging.error(f"Missing feature columns for training: {missing_cols}")
            return False
            
        if df.empty or len(df) < 100:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º—É–º
            logging.error(f"Not enough data for training: {len(df)} samples (minimum: 100)")
            return False

        X = df[feature_cols].to_numpy()
        y = df["y"].to_numpy()

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        analyzer = MultiTimeframeAnalyzer()
        market_conditions = []
        
        for idx in df.index:
            try:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
                df_1d_slice = df_1d.loc[:idx] if hasattr(df_1d.index, 'date') else df_1d.iloc[:len(df_1d)//2]
                df_4h_slice = df_4h.loc[:idx] if hasattr(df_4h.index, 'date') else df_4h.iloc[:len(df_4h)//2]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if len(df_1d_slice) >= 10 and len(df_4h_slice) >= 10:
                    cond, _ = analyzer.analyze_market_condition(df_1d_slice, df_4h_slice)
                    market_conditions.append(cond.value)
                else:
                    market_conditions.append("sideways")  # –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            except Exception as e:
                logging.debug(f"Market condition analysis failed for {idx}: {e}")
                market_conditions.append("sideways")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
        if len(set(y)) < 2:
            logging.error("Insufficient class diversity for training (need both 0 and 1 labels)")
            return False
            
        unique_conditions = set(market_conditions)
        logging.info(f"Training with {len(X)} samples, {len(unique_conditions)} market conditions: {unique_conditions}")
        
        if len(unique_conditions) < 2:
            logging.warning("Limited market condition diversity, training may be less effective")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = AdaptiveMLModel(models_dir=CFG.MODEL_DIR)
        success = model.train(X, y, market_conditions)
        
        if success:
            logging.info("‚úÖ AI –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞")
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–∏")
            
        return success

    except ImportError as e:
        logging.error(f"Missing required modules for training: {e}")
        return False
    except Exception as e:
        logging.exception(f"Training error: {e}")
        return False

def _send_message(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        tgbot.send_message(text)
    except Exception:
        logging.exception("Failed to send Telegram message")

def _acquire_file_lock(lock_path: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        fd = os.open(lock_path, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
        with os.fdopen(fd, "w") as f:
            f.write(str(os.getpid()))
        return True
    except FileExistsError:
        return False
    except Exception:
        logging.exception("Lock create failed")
        return False



# ================== UNIFIED HEALTH ENDPOINTS ==================
@app.route("/health", methods=["GET"])
@app.route("/healthz", methods=["GET"])
@app.route("/status", methods=["GET"])
def unified_health():
    return jsonify(get_health_response(_TRADING_BOT))

# ================== DISPATCH (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ==================
def _dispatch(text: str, chat_id: Optional[str] = None) -> None:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if chat_id and not CFG.is_admin(chat_id):
        logger.warning("Unauthorized access denied for chat_id=%s", chat_id)
        tgbot.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.", chat_id=chat_id)
        return

    text = (text or "").strip()
    if not text.startswith("/"):
        return

    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        exchange_client = _GLOBAL_EX
        state_manager = _STATE
        
        # –î–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ state manager
        if text.startswith(("/testbuy", "/testsell", "/status")) and _TRADING_BOT:
            state_manager = _TRADING_BOT.state
            exchange_client = _TRADING_BOT.exchange

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ bot_handler
        tgbot.process_command(
            text=text, 
            state_manager=state_manager, 
            exchange_client=exchange_client, 
            train_func=_train_model_safe,
            chat_id=chat_id
        )
    except Exception as e:
        logging.exception("Dispatch error")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if chat_id:
            tgbot.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {text}", chat_id=chat_id)

# ================== WEBHOOK ==================
if CFG.ENABLE_WEBHOOK and CFG.WEBHOOK_SECRET:
    webhook_path = f"/webhook/{CFG.WEBHOOK_SECRET}"
    
    @app.route(webhook_path, methods=["POST"])
    def telegram_webhook():
        """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            verification_result = verify_request()
            if verification_result:
                return verification_result
            
            logger.debug('Webhook received')

            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update = request.get_json(silent=True) or {}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = update.get("message") or update.get("edited_message")
            if not msg and update.get("callback_query"):
                msg = update["callback_query"].get("message") or {}

            if not msg:
                return jsonify({"ok": True})

            text = msg.get("text", "")
            chat_info = msg.get("chat") or {}
            chat_id = str(chat_info.get("id", ""))

            if not text or not chat_id:
                return jsonify({"ok": True})

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            _dispatch(text, chat_id)
            
        except Exception:
            logging.exception("Webhook handling error")
            
        return jsonify({"ok": True})
else:
    logger.warning("‚ö†Ô∏è WEBHOOK not registered: disabled or WEBHOOK_SECRET missing")

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤ Telegram"""
    if not CFG.ENABLE_WEBHOOK:
        logging.info("Webhook disabled by ENABLE_WEBHOOK=0")
        return
        
    webhook_url = CFG.get_webhook_url()
    if not webhook_url:
        logging.warning("Webhook not set: missing configuration")
        return
        
    if not _acquire_file_lock(WEBHOOK_LOCK_FILE):
        logging.info("Webhook already initialized by another process")
        return
        
    logging.info(f"üîó Setting webhook: {CFG.PUBLIC_URL}")
    
    try:
        params = {"url": webhook_url}
        if CFG.TELEGRAM_SECRET_TOKEN:
            params["secret_token"] = CFG.TELEGRAM_SECRET_TOKEN

        api_url = f"https://api.telegram.org/bot{CFG.BOT_TOKEN}/setWebhook"
        r = requests.post(api_url, params=params, timeout=10)
        
        logging.info(f"setWebhook ‚Üí {r.status_code} {r.text}")
        
        if r.status_code == 200:
            _send_message("üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error(f"Webhook setup failed: {r.text}")
            
    except Exception:
        logging.exception("setWebhook error")

# ================== TRADING LOOP (–î–õ–Ø GUNICORN) ==================
def start_trading_loop():
    """
    ‚úÖ GUNICORN VERSION: –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Gunicorn
    """
    global _TRADING_BOT
    
    if not CFG.ENABLE_TRADING:
        logging.info("Trading loop disabled by ENABLE_TRADING=0")
        return

    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    with _TRADING_BOT_LOCK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        if _TRADING_BOT is not None:
            logging.warning("‚ö†Ô∏è Trading bot already initialized, skipping duplicate start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        existing_threads = [t for t in threading.enumerate() if t.name == "TradingLoop" and t.is_alive()]
        if existing_threads:
            logging.warning(f"‚ö†Ô∏è Trading loop thread already running: {len(existing_threads)} threads")
            return

        lock_path = LOCK_FILE
        
        # –ï—Å–ª–∏ –ª–æ–∫-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        try:
            if os.path.exists(lock_path):
                os.remove(lock_path)
                logging.warning(f"‚ö†Ô∏è Removed stale lock file: {lock_path}")
        except Exception as e:
            logging.error(f"Failed to remove lock file {lock_path}: {e}")

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ–∫-—Ñ–∞–π–ª
        if not _acquire_file_lock(lock_path):
            logging.warning("‚ö†Ô∏è Could not create lock file, but starting trading loop anyway")
        
        # ‚úÖ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
        try:
            _TRADING_BOT = TradingBot()
            logging.info("‚úÖ Trading bot instance created")
            _send_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            logging.error(f"‚ùå Failed to create trading bot: {e}")
            _send_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")
            return
    
    def trading_loop_wrapper():
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        global _TRADING_BOT
        try:
            logging.info("üöÄ Trading loop thread starting...")
            _TRADING_BOT.run()
        except Exception as e:
            logging.error(f"‚ùå Trading loop crashed: {e}")
            _send_message(f"‚ùå –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏ –∫—Ä–∞—Ö–µ
            with _TRADING_BOT_LOCK:
                _TRADING_BOT = None
                
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏
            if not hasattr(trading_loop_wrapper, '_restart_count'):
                trading_loop_wrapper._restart_count = 0
                
            if trading_loop_wrapper._restart_count < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                trading_loop_wrapper._restart_count += 1
                logging.info(f"üîÑ Attempting restart #{trading_loop_wrapper._restart_count}/3...")
                time.sleep(60)
                start_trading_loop()
            else:
                logging.error("‚ùå Too many restart attempts, stopping auto-restart")
                _send_message("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
    
    # ‚úÖ GUNICORN: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–∫ daemon –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    t = threading.Thread(target=trading_loop_wrapper, name="TradingLoop", daemon=True)
    t.start()
    logging.info("‚úÖ Trading loop thread started")

# ================== WATCHDOG & MONITORING ==================
# (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ UnifiedMonitor + SimpleWatchdog –≤ app_monitoring_fix.py)
# ================== BOOTSTRAP (–î–õ–Ø GUNICORN) ==================
def _bootstrap_once():
    """
    ‚úÖ GUNICORN VERSION: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Gunicorn
    """
    global _BOOTSTRAP_DONE, _WATCHDOG_THREAD
    
    if _BOOTSTRAP_DONE:
        logging.info("‚ö†Ô∏è Bootstrap already completed, skipping")
        return
        
    try:
        logging.info("üöÄ Starting Gunicorn bootstrap process...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if config_errors:
            error_summary = "\n".join(config_errors[:3])
            if len(config_errors) > 3:
                error_summary += f"\n... –∏ –µ—â–µ {len(config_errors) - 3} –æ—à–∏–±–æ–∫"
            _send_message(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{error_summary}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        if CFG.ENABLE_WEBHOOK:
            set_webhook()
    except Exception:
        logging.exception("set_webhook at bootstrap failed")
    try:
        # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π CSV-—Ñ–ª–∞—à–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤–æ—Ä–∫–µ—Ä
        from utils.csv_handler import CSVHandler
        CSVHandler.start()
    except Exception:
        logging.exception("CSVHandler.start at bootstrap failed")

        
    try:
        # ‚úÖ GUNICORN: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if CFG.ENABLE_TRADING:
            start_trading_loop()
    except Exception:
        logging.exception("start_trading_loop failed")
        
    try:
        # ‚úÖ Unified monitoring init
        init_monitoring(
            bot_ref_func=lambda: _TRADING_BOT,
            restart_func=start_trading_loop
        )
    except Exception:
        logging.exception("monitoring init failed")
        
    _BOOTSTRAP_DONE = True
    logging.info("‚úÖ Gunicorn bootstrap completed successfully")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
    try:
        status_msg = [
            "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Gunicorn!",
            f"üìä –°–∏–º–≤–æ–ª: {CFG.SYMBOL}",
            f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {CFG.TIMEFRAME}",
            f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${CFG.POSITION_SIZE_USD}",
            f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'ON' if CFG.SAFE_MODE else 'OFF'}",
            f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω: {'YES' if CFG.AI_ENABLE else 'NO'}",
            "",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        ]
        _send_message("\n".join(status_msg))
    except Exception:
        pass

# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINT–° ==================
@app.route("/force_restart", methods=["POST"])
def force_restart():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    global _TRADING_BOT
    
    try:
        with _TRADING_BOT_LOCK:
            if _TRADING_BOT:
                logging.warning("üîÑ Force restart requested via API")
                _TRADING_BOT = None
                
        start_trading_loop()
        return jsonify({"ok": True, "message": "Trading bot restarted"})
        
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–∞—Ö
@app.route("/csv_info", methods=["GET"])
def csv_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        from utils.csv_handler import CSVHandler
        
        info = {
            "trades": CSVHandler.get_csv_info(CFG.CLOSED_TRADES_CSV),
            "signals": CSVHandler.get_csv_info(CFG.SIGNALS_CSV),
            "trade_stats": CSVHandler.get_trade_stats()
        }
        
        return jsonify(info)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API
@app.route("/train_model", methods=["POST"])
def train_model_endpoint():
    """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ML –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API"""
    try:
        logging.info("üß† Training model via API request...")
        success = _train_model_safe()
        
        if success:
            return jsonify({"ok": True, "message": "Model trained successfully"})
        else:
            return jsonify({"ok": False, "message": "Model training failed"}), 500
            
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
@app.route("/logs", methods=["GET"])
def get_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    try:
        lines = int(request.args.get('lines', 50))
        log_file = "bot_activity.log"
        
        if not os.path.exists(log_file):
            return jsonify({"logs": [], "message": "Log file not found"})
        
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            recent_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
        
        return jsonify({
            "logs": [line.strip() for line in recent_lines],
            "total_lines": len(all_lines),
            "showing": len(recent_lines)
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ================== CACHE ENDPOINTS ==================
@app.route("/cache_stats", methods=["GET"])
def cache_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–µ–π"""
    try:
        from analysis.technical_indicators import get_cache_stats as get_indicator_stats
        from utils.csv_handler import get_csv_system_stats
        
        stats = {
            "indicators": get_indicator_stats(),
            "csv": get_csv_system_stats(),
            "timestamp": time.time()
        }
        
        # Exchange cache (–µ—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if hasattr(_GLOBAL_EX, 'get_cache_stats'):
            stats["exchange"] = _GLOBAL_EX.get_cache_stats()
        else:
            stats["exchange"] = {"status": "not_implemented"}
            
        return jsonify(stats)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/clear_cache", methods=["POST"])
def clear_all_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏"""
    try:
        results = {}
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        try:
            from analysis.technical_indicators import clear_indicator_cache
            clear_indicator_cache()
            results["indicators"] = "cleared"
        except Exception as e:
            results["indicators"] = f"error: {e}"
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ exchange (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        try:
            if hasattr(_GLOBAL_EX, 'clear_cache'):
                _GLOBAL_EX.clear_cache()
                results["exchange"] = "cleared"
            else:
                results["exchange"] = "not_implemented"
        except Exception as e:
            results["exchange"] = f"error: {e}"
            
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ CSV
        try:
            from utils.csv_handler import CSVHandler
            CSVHandler.clear_cache()
            results["csv"] = "cleared"
        except Exception as e:
            results["csv"] = f"error: {e}"
        
        return jsonify({
            "ok": True, 
            "message": "Cache clear completed",
            "details": results
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ================== CLEANUP FOR GUNICORN ==================
def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    global _TRADING_BOT
    
    logging.info("üõë Shutting down trading bot...")
    
    try:
        with _TRADING_BOT_LOCK:
            if _TRADING_BOT:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                try:
                    if _TRADING_BOT._is_position_active():
                        logging.warning("üîÑ Attempting to close open position during shutdown...")
                        current_price = _TRADING_BOT.exchange.get_last_price(_TRADING_BOT.symbol)
                        _TRADING_BOT.pm.close_all(_TRADING_BOT.symbol, current_price, "system_shutdown")
                        _send_message("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
                except Exception as e:
                    logging.error(f"Failed to close position during shutdown: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                try:
                    _TRADING_BOT.state.save_state()
                    logging.info("‚úÖ Bot state saved")
                except Exception as e:
                    logging.error(f"Failed to save state: {e}")
                
                _TRADING_BOT = None
                logging.info("‚úÖ Trading bot shut down")
    except Exception as e:
        logging.error(f"Error during cleanup: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º unified monitoring
    try:
        cleanup_monitoring()
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSV —Ñ–ª–∞—à–µ—Ä (graceful)
    try:
        from utils.csv_handler import CSVHandler
        CSVHandler.stop(timeout=2.0)
    except Exception:
        logging.exception("CSVHandler.stop failed")

    except Exception:
        logging.exception("cleanup_monitoring failed")

    # –£–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª—ã
    for lock_file in [LOCK_FILE, WEBHOOK_LOCK_FILE]:
        try:
            if os.path.exists(lock_file):
                os.remove(lock_file)
                logging.debug(f"Removed lock file: {lock_file}")
        except Exception as e:
            logging.error(f"Failed to remove lock file {lock_file}: {e}")
    
    logging.info("üèÅ Cleanup completed")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –¥–ª—è Gunicorn
atexit.register(cleanup_on_exit)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
import signal

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logging.info(f"üì° Received signal {signum}, initiating graceful shutdown...")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
    try:
        _send_message(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {signum}. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    except:
        pass
    
    # –í—ã–∑—ã–≤–∞–µ–º cleanup
    cleanup_on_exit()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    os._exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# ================== GUNICORN STARTUP ==================
# ‚úÖ GUNICORN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
try:
    _bootstrap_once()
except Exception as e:
    logging.error(f"‚ùå Bootstrap failed: {e}")
    # –ù–µ –ø–∞–¥–∞–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

# ‚úÖ GUNICORN: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è Gunicorn
# –í Procfile: gunicorn --bind 0.0.0.0:$PORT app:app
if __name__ == "__main__":
    # –≠—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.info("üîß Running in development mode")
    try:
        app.run(host="0.0.0.0", port=CFG.PORT, debug=False, threaded=True)
    except KeyboardInterrupt:
        logging.info("üõë Development server stopped by user")
        cleanup_on_exit()
    except Exception as e:
        logging.error(f"‚ùå Development server error: {e}")
        cleanup_on_exit()