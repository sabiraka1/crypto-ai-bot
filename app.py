import matplotlib
matplotlib.use('Agg')
import os
import re
import logging
import threading
import time
import atexit
from typing import Optional
import requests
from flask import Flask, request, jsonify

# --- –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from main import TradingBot
from trading.exchange_client import ExchangeClient
from core.state_manager import StateManager
from telegram import bot_handler as tgbot
from config.settings import TradingConfig

# ================== –õ–û–ì–ò ==================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("bot_activity.log", encoding="utf-8")]
)
logger = logging.getLogger(__name__)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
CFG = TradingConfig()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config_errors = CFG.validate_config()
if config_errors:
    logger.warning("‚ö†Ô∏è Configuration issues found:")
    for error in config_errors:
        logger.warning(f"  - {error}")

# ================== –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ï–ô ==================
LOCK_FILE = ".trading.lock"
WEBHOOK_LOCK_FILE = ".webhook.lock"

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ lock –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
for lock_file in [LOCK_FILE, WEBHOOK_LOCK_FILE]:
    if os.path.exists(lock_file):
        try:
            os.remove(lock_file)
            logger.warning("‚ö†Ô∏è Removed stale lock file: %s", lock_file)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ lock-—Ñ–∞–π–ª–∞: %s", e)

# ================== –§–ò–õ–¨–¢–† –õ–û–ì–û–í ==================
class SensitiveDataFilter(logging.Filter):
    SENSITIVE_PATTERN = re.compile(r'(?i)(key|token|secret|password)\s*[:=]\s*["\']?[\w\-:]+["\']?')
    REPLACEMENT = r'\1=***'

    def filter(self, record):
        if record.args and isinstance(record.args, dict):
            record.args = {k: ("***" if any(x in k.lower() for x in ["key", "token", "secret", "password"]) else v)
                           for k, v in record.args.items()}
        if record.msg and isinstance(record.msg, str):
            record.msg = self.SENSITIVE_PATTERN.sub(self.REPLACEMENT, record.msg)
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
for handler in logging.getLogger().handlers:
    handler.addFilter(SensitiveDataFilter())

# ================== FLASK ==================
app = Flask(__name__)

# ================== –ì–õ–û–ë–ê–õ–ö–ò ==================
_GLOBAL_EX = ExchangeClient(
    api_key=CFG.GATE_API_KEY,
    api_secret=CFG.GATE_API_SECRET,
    safe_mode=CFG.SAFE_MODE
)
_STATE = StateManager()
_TRADING_BOT = None  # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
_TRADING_BOT_LOCK = threading.RLock()  # ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
_WATCHDOG_THREAD = None
_BOOTSTRAP_DONE = False

# ================== WEBHOOK SECURITY ==================
def verify_request():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook –∑–∞–ø—Ä–æ—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ URL
    if CFG.WEBHOOK_SECRET and not request.path.endswith(CFG.WEBHOOK_SECRET):
        return jsonify({"ok": False, "error": "unauthorized"}), 403
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram secret token
    if CFG.TELEGRAM_SECRET_TOKEN:
        hdr = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if hdr != CFG.TELEGRAM_SECRET_TOKEN:
            logger.warning("Webhook: secret token mismatch")
            return jsonify({"ok": False, "error": "unauthorized"}), 403
    
    return None

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def _train_model_safe() -> bool:
    """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º pandas"""
    try:
        import numpy as np
        import pandas as pd
        from analysis.technical_indicators import calculate_all_indicators
        from analysis.market_analyzer import MultiTimeframeAnalyzer
        from ml.adaptive_model import AdaptiveMLModel

        symbol = CFG.SYMBOL
        timeframe = CFG.TIMEFRAME

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        ohlcv = _GLOBAL_EX.fetch_ohlcv(symbol, timeframe=timeframe, limit=1000)  # –±—ã–ª–æ 500
        if not ohlcv:
            logging.error("No OHLCV data for training")
            return False

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if len(ohlcv) < 200:
            logging.error(f"Insufficient data for training: {len(ohlcv)} candles (minimum: 200)")
            return False

        cols = ["time", "open", "high", "low", "close", "volume"]
        df_raw = pd.DataFrame(ohlcv, columns=cols)
        df_raw["time"] = pd.to_datetime(df_raw["time"], unit="ms", utc=True)
        df_raw.set_index("time", inplace=True)

        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df = calculate_all_indicators(df_raw.copy())
        df["price_change"] = df["close"].pct_change()
        df["future_close"] = df["close"].shift(-1)
        df["y"] = (df["future_close"] > df["close"]).astype(int)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        _EPS = 1e-12
        if {"ema_fast", "ema_slow"}.issubset(df.columns):
            df["ema_cross"] = (df["ema_fast"] - df["ema_slow"]) / (df["ema_slow"].abs() + _EPS)
        else:
            df["ema_cross"] = 0.0
            logging.warning("Missing EMA columns, using default ema_cross=0.0")

        if {"bb_upper", "bb_lower"}.issubset(df.columns):
            rng = (df["bb_upper"] - df["bb_lower"]).abs().replace(0, np.nan) + _EPS
            df["bb_position"] = (df["close"] - df["bb_lower"]) / rng
        else:
            df["bb_position"] = 0.5
            logging.warning("Missing Bollinger Bands columns, using default bb_position=0.5")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å pandas resample
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
        agg = {"open": "first", "high": "max", "low": "min", "close": "last", "volume": "sum"}
        try:
            df_1d = df_raw.resample("1D").agg(agg)
            df_4h = df_raw.resample("4h").agg(agg)  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: "4H" -> "4h"
            logging.info("‚úÖ Market timeframes prepared successfully")
        except Exception as e:
            logging.warning(f"Resample error, using fallback approach: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            df_1d = df_raw.groupby(df_raw.index.date).agg(agg)
            df_4h = df_raw.copy()  # –ü—Ä–æ—Å—Ç–æ–π fallback

        # –£–¥–∞–ª—è–µ–º NaN –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        df = df.replace([np.inf, -np.inf], np.nan).dropna()

        feature_cols = [
            "rsi", "macd", "ema_cross", "bb_position",
            "stoch_k", "adx", "volume_ratio", "price_change",
        ]
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing_cols = [col for col in feature_cols if col not in df.columns]
        if missing_cols:
            logging.error(f"Missing feature columns for training: {missing_cols}")
            return False
            
        if df.empty or len(df) < 100:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º—É–º
            logging.error(f"Not enough data for training: {len(df)} samples (minimum: 100)")
            return False

        X = df[feature_cols].to_numpy()
        y = df["y"].to_numpy()

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        analyzer = MultiTimeframeAnalyzer()
        market_conditions = []
        
        for idx in df.index:
            try:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
                df_1d_slice = df_1d.loc[:idx] if hasattr(df_1d.index, 'date') else df_1d.iloc[:len(df_1d)//2]
                df_4h_slice = df_4h.loc[:idx] if hasattr(df_4h.index, 'date') else df_4h.iloc[:len(df_4h)//2]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if len(df_1d_slice) >= 10 and len(df_4h_slice) >= 10:
                    cond, _ = analyzer.analyze_market_condition(df_1d_slice, df_4h_slice)
                    market_conditions.append(cond.value)
                else:
                    market_conditions.append("sideways")  # –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            except Exception as e:
                logging.debug(f"Market condition analysis failed for {idx}: {e}")
                market_conditions.append("sideways")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
        if len(set(y)) < 2:
            logging.error("Insufficient class diversity for training (need both 0 and 1 labels)")
            return False
            
        unique_conditions = set(market_conditions)
        logging.info(f"Training with {len(X)} samples, {len(unique_conditions)} market conditions: {unique_conditions}")
        
        if len(unique_conditions) < 2:
            logging.warning("Limited market condition diversity, training may be less effective")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = AdaptiveMLModel(models_dir=CFG.MODEL_DIR)
        success = model.train(X, y, market_conditions)
        
        if success:
            logging.info("‚úÖ AI –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞")
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–∏")
            
        return success

    except ImportError as e:
        logging.error(f"Missing required modules for training: {e}")
        return False
    except Exception as e:
        logging.exception(f"Training error: {e}")
        return False

def _send_message(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        tgbot.send_message(text)
    except Exception:
        logging.exception("Failed to send Telegram message")

def _acquire_file_lock(lock_path: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        fd = os.open(lock_path, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
        with os.fdopen(fd, "w") as f:
            f.write(str(os.getpid()))
        return True
    except FileExistsError:
        return False
    except Exception:
        logging.exception("Lock create failed")
        return False

# ================== HEALTH ==================
@app.route("/health", methods=["GET"])
@app.route("/healthz", methods=["GET"])
def health():
    """Health check endpoint"""
    status = {
        "ok": True,
        "status": "running",
        "trading_bot_active": _TRADING_BOT is not None,
        "safe_mode": CFG.SAFE_MODE,
        "webhook_enabled": CFG.ENABLE_WEBHOOK,
        "trading_enabled": CFG.ENABLE_TRADING,
        "bootstrap_done": _BOOTSTRAP_DONE
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    if _TRADING_BOT:
        try:
            position_active = _TRADING_BOT._is_position_active()
            status["position_active"] = position_active
        except Exception as e:
            status["position_active"] = f"error: {e}"
    
    return jsonify(status), 200

# ================== DISPATCH (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ==================
def _dispatch(text: str, chat_id: Optional[str] = None) -> None:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if chat_id and not CFG.is_admin(chat_id):
        logger.warning("Unauthorized access denied for chat_id=%s", chat_id)
        tgbot.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.", chat_id=chat_id)
        return

    text = (text or "").strip()
    if not text.startswith("/"):
        return

    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        exchange_client = _GLOBAL_EX
        state_manager = _STATE
        
        # –î–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ state manager
        if text.startswith(("/testbuy", "/testsell", "/status")) and _TRADING_BOT:
            state_manager = _TRADING_BOT.state
            exchange_client = _TRADING_BOT.exchange

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ bot_handler
        tgbot.process_command(
            text=text, 
            state_manager=state_manager, 
            exchange_client=exchange_client, 
            train_func=_train_model_safe,
            chat_id=chat_id
        )
    except Exception as e:
        logging.exception("Dispatch error")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if chat_id:
            tgbot.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {text}", chat_id=chat_id)

# ================== WEBHOOK ==================
if CFG.ENABLE_WEBHOOK and CFG.WEBHOOK_SECRET:
    webhook_path = f"/webhook/{CFG.WEBHOOK_SECRET}"
    
    @app.route(webhook_path, methods=["POST"])
    def telegram_webhook():
        """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            verification_result = verify_request()
            if verification_result:
                return verification_result
            
            logger.debug('Webhook received')

            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update = request.get_json(silent=True) or {}
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = update.get("message") or update.get("edited_message")
            if not msg and update.get("callback_query"):
                msg = update["callback_query"].get("message") or {}

            if not msg:
                return jsonify({"ok": True})

            text = msg.get("text", "")
            chat_info = msg.get("chat") or {}
            chat_id = str(chat_info.get("id", ""))

            if not text or not chat_id:
                return jsonify({"ok": True})

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            _dispatch(text, chat_id)
            
        except Exception:
            logging.exception("Webhook handling error")
            
        return jsonify({"ok": True})
else:
    logger.warning("‚ö†Ô∏è WEBHOOK not registered: disabled or WEBHOOK_SECRET missing")

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤ Telegram"""
    if not CFG.ENABLE_WEBHOOK:
        logging.info("Webhook disabled by ENABLE_WEBHOOK=0")
        return
        
    webhook_url = CFG.get_webhook_url()
    if not webhook_url:
        logging.warning("Webhook not set: missing configuration")
        return
        
    if not _acquire_file_lock(WEBHOOK_LOCK_FILE):
        logging.info("Webhook already initialized by another process")
        return
        
    logging.info(f"üîó Setting webhook: {CFG.PUBLIC_URL}")
    
    try:
        params = {"url": webhook_url}
        if CFG.TELEGRAM_SECRET_TOKEN:
            params["secret_token"] = CFG.TELEGRAM_SECRET_TOKEN

        api_url = f"https://api.telegram.org/bot{CFG.BOT_TOKEN}/setWebhook"
        r = requests.post(api_url, params=params, timeout=10)
        
        logging.info(f"setWebhook ‚Üí {r.status_code} {r.text}")
        
        if r.status_code == 200:
            _send_message("üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error(f"Webhook setup failed: {r.text}")
            
    except Exception:
        logging.exception("setWebhook error")

# ================== TRADING LOOP (–î–õ–Ø GUNICORN) ==================
def start_trading_loop():
    """
    ‚úÖ GUNICORN VERSION: –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Gunicorn
    """
    global _TRADING_BOT
    
    if not CFG.ENABLE_TRADING:
        logging.info("Trading loop disabled by ENABLE_TRADING=0")
        return

    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    with _TRADING_BOT_LOCK:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        if _TRADING_BOT is not None:
            logging.warning("‚ö†Ô∏è Trading bot already initialized, skipping duplicate start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        existing_threads = [t for t in threading.enumerate() if t.name == "TradingLoop" and t.is_alive()]
        if existing_threads:
            logging.warning(f"‚ö†Ô∏è Trading loop thread already running: {len(existing_threads)} threads")
            return

        lock_path = LOCK_FILE
        
        # –ï—Å–ª–∏ –ª–æ–∫-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        try:
            if os.path.exists(lock_path):
                os.remove(lock_path)
                logging.warning(f"‚ö†Ô∏è Removed stale lock file: {lock_path}")
        except Exception as e:
            logging.error(f"Failed to remove lock file {lock_path}: {e}")

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ–∫-—Ñ–∞–π–ª
        if not _acquire_file_lock(lock_path):
            logging.warning("‚ö†Ô∏è Could not create lock file, but starting trading loop anyway")
        
        # ‚úÖ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
        try:
            _TRADING_BOT = TradingBot()
            logging.info("‚úÖ Trading bot instance created")
            _send_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            logging.error(f"‚ùå Failed to create trading bot: {e}")
            _send_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")
            return
    
    def trading_loop_wrapper():
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        global _TRADING_BOT
        try:
            logging.info("üöÄ Trading loop thread starting...")
            _TRADING_BOT.run()
        except Exception as e:
            logging.error(f"‚ùå Trading loop crashed: {e}")
            _send_message(f"‚ùå –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏ –∫—Ä–∞—Ö–µ
            with _TRADING_BOT_LOCK:
                _TRADING_BOT = None
                
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏
            if not hasattr(trading_loop_wrapper, '_restart_count'):
                trading_loop_wrapper._restart_count = 0
                
            if trading_loop_wrapper._restart_count < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                trading_loop_wrapper._restart_count += 1
                logging.info(f"üîÑ Attempting restart #{trading_loop_wrapper._restart_count}/3...")
                time.sleep(60)
                start_trading_loop()
            else:
                logging.error("‚ùå Too many restart attempts, stopping auto-restart")
                _send_message("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
    
    # ‚úÖ GUNICORN: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–∫ daemon –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    t = threading.Thread(target=trading_loop_wrapper, name="TradingLoop", daemon=True)
    t.start()
    logging.info("‚úÖ Trading loop thread started")

# ================== WATCHDOG & MONITORING ==================
import psutil

def send_telegram_alert(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        _send_message(f"üö® {message}")
    except Exception as e:
        logging.error(f"[Telegram Alert Error] {e}")

def monitor_resources():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        process = psutil.Process(os.getpid())
        mem_mb = process.memory_info().rss / (1024 * 1024)
        cpu_pct = process.cpu_percent(interval=1)
        
        logging.debug(f"[Resources] CPU: {cpu_pct:.1f}%, RAM: {mem_mb:.1f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
        total_memory_mb = psutil.virtual_memory().total / (1024 * 1024)
        memory_threshold = total_memory_mb * 0.8
        
        if cpu_pct > 85 or mem_mb > memory_threshold:
            send_telegram_alert(f"High resource usage! CPU: {cpu_pct:.1f}%, RAM: {mem_mb:.1f} MB")
            
        return cpu_pct, mem_mb
    except Exception as e:
        logging.error(f"[Resource Monitor] Error: {e}")
        return 0, 0

def watchdog():
    """
    ‚úÖ GUNICORN VERSION: –£–ª—É—á—à–µ–Ω–Ω—ã–π watchdog
    """
    global _TRADING_BOT
    consecutive_failures = 0
    max_failures = 3
    
    while True:
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
            monitor_resources()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            trading_thread_alive = any(
                t.name == "TradingLoop" and t.is_alive() 
                for t in threading.enumerate()
            )
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ—Ç–æ–∫ –∂–∏–≤
            bot_exists = _TRADING_BOT is not None
            
            if CFG.ENABLE_TRADING and (not trading_thread_alive or not bot_exists):
                consecutive_failures += 1
                status = f"thread_alive={trading_thread_alive}, bot_exists={bot_exists}"
                logging.warning(f"‚ö†Ô∏è Trading system down ({status}), failure #{consecutive_failures}")
                
                if consecutive_failures >= max_failures:
                    send_telegram_alert(f"Trading system failed {consecutive_failures} times! Attempting restart...")
                    try:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–∏—Å
                        with _TRADING_BOT_LOCK:
                            if _TRADING_BOT is not None:
                                logging.warning("üîÑ Force resetting hung trading bot")
                                _TRADING_BOT = None
                        
                        start_trading_loop()
                        consecutive_failures = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
                        logging.info("‚úÖ Trading loop restarted by watchdog")
                    except Exception as e:
                        send_telegram_alert(f"Failed to restart trading loop: {e}")
                        logging.error(f"‚ùå Watchdog restart failed: {e}")
            else:
                consecutive_failures = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –≤—Å–µ OK
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)
            if _TRADING_BOT and hasattr(_TRADING_BOT, 'state'):
                try:
                    position_state = _TRADING_BOT.state.state
                    if position_state.get("in_position"):
                        last_check = position_state.get("last_manage_check")
                        if last_check:
                            from datetime import datetime, timezone
                            last_dt = datetime.fromisoformat(last_check.replace("Z", "+00:00"))
                            now_dt = datetime.now(timezone.utc)
                            minutes_since = (now_dt - last_dt).total_seconds() / 60
                            
                            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —É–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                            if minutes_since > 30:
                                logging.warning(f"‚ö†Ô∏è Position not managed for {minutes_since:.1f} minutes")
                                send_telegram_alert(f"Position not managed for {minutes_since:.1f} minutes")
                                
                except Exception as e:
                    logging.debug(f"Position check error: {e}")
                    
        except Exception as e:
            logging.error(f"[Watchdog] Error: {e}")
        
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ================== BOOTSTRAP (–î–õ–Ø GUNICORN) ==================
def _bootstrap_once():
    """
    ‚úÖ GUNICORN VERSION: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Gunicorn
    """
    global _BOOTSTRAP_DONE, _WATCHDOG_THREAD
    
    if _BOOTSTRAP_DONE:
        logging.info("‚ö†Ô∏è Bootstrap already completed, skipping")
        return
        
    try:
        logging.info("üöÄ Starting Gunicorn bootstrap process...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if config_errors:
            error_summary = "\n".join(config_errors[:3])
            if len(config_errors) > 3:
                error_summary += f"\n... –∏ –µ—â–µ {len(config_errors) - 3} –æ—à–∏–±–æ–∫"
            _send_message(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{error_summary}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        if CFG.ENABLE_WEBHOOK:
            set_webhook()
    except Exception:
        logging.exception("set_webhook at bootstrap failed")
        
    try:
        # ‚úÖ GUNICORN: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if CFG.ENABLE_TRADING:
            start_trading_loop()
    except Exception:
        logging.exception("start_trading_loop failed")
        
    try:
        # ‚úÖ GUNICORN: –ó–∞–ø—É—Å–∫–∞–µ–º watchdog –∫–∞–∫ daemon thread
        if not _WATCHDOG_THREAD or not _WATCHDOG_THREAD.is_alive():
            _WATCHDOG_THREAD = threading.Thread(target=watchdog, daemon=True, name="Watchdog")
            _WATCHDOG_THREAD.start()
            logging.info("‚úÖ Watchdog started")
    except Exception:
        logging.exception("watchdog start failed")
        
    _BOOTSTRAP_DONE = True
    logging.info("‚úÖ Gunicorn bootstrap completed successfully")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
    try:
        status_msg = [
            "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Gunicorn!",
            f"üìä –°–∏–º–≤–æ–ª: {CFG.SYMBOL}",
            f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {CFG.TIMEFRAME}",
            f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${CFG.POSITION_SIZE_USD}",
            f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'ON' if CFG.SAFE_MODE else 'OFF'}",
            f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω: {'YES' if CFG.AI_ENABLE else 'NO'}",
            "",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        ]
        _send_message("\n".join(status_msg))
    except Exception:
        pass

# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS ==================
@app.route("/status", methods=["GET"])
def status_endpoint():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status = {
            "timestamp": time.time(),
            "config": {
                "symbol": CFG.SYMBOL,
                "timeframe": CFG.TIMEFRAME,
                "safe_mode": CFG.SAFE_MODE,
                "ai_enabled": CFG.AI_ENABLE,
                "webhook_enabled": CFG.ENABLE_WEBHOOK,
                "trading_enabled": CFG.ENABLE_TRADING
            },
            "trading_bot": {
                "initialized": _TRADING_BOT is not None,
                "thread_alive": any(t.name == "TradingLoop" and t.is_alive() for t in threading.enumerate())
            }
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
        if _TRADING_BOT:
            try:
                status["position"] = _TRADING_BOT.pm.get_position_summary()
            except Exception as e:
                status["position"] = {"error": f"failed_to_get_summary: {e}"}
        
        # –†–µ—Å—É—Ä—Å—ã
        try:
            cpu, mem = monitor_resources()
            status["resources"] = {"cpu_percent": cpu, "memory_mb": mem}
        except Exception as e:
            status["resources"] = {"error": f"failed_to_get_resources: {e}"}
            
        return jsonify(status)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/force_restart", methods=["POST"])
def force_restart():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    global _TRADING_BOT
    
    try:
        with _TRADING_BOT_LOCK:
            if _TRADING_BOT:
                logging.warning("üîÑ Force restart requested via API")
                _TRADING_BOT = None
                
        start_trading_loop()
        return jsonify({"ok": True, "message": "Trading bot restarted"})
        
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–∞—Ö
@app.route("/csv_info", methods=["GET"])
def csv_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        from utils.csv_handler import CSVHandler
        
        info = {
            "trades": CSVHandler.get_csv_info(CFG.CLOSED_TRADES_CSV),
            "signals": CSVHandler.get_csv_info(CFG.SIGNALS_CSV),
            "trade_stats": CSVHandler.get_trade_stats()
        }
        
        return jsonify(info)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API
@app.route("/train_model", methods=["POST"])
def train_model_endpoint():
    """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ML –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API"""
    try:
        logging.info("üß† Training model via API request...")
        success = _train_model_safe()
        
        if success:
            return jsonify({"ok": True, "message": "Model trained successfully"})
        else:
            return jsonify({"ok": False, "message": "Model training failed"}), 500
            
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# ‚úÖ –ù–û–í–´–ô ENDPOINT: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
@app.route("/logs", methods=["GET"])
def get_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    try:
        lines = int(request.args.get('lines', 50))
        log_file = "bot_activity.log"
        
        if not os.path.exists(log_file):
            return jsonify({"logs": [], "message": "Log file not found"})
        
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            recent_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
        
        return jsonify({
            "logs": [line.strip() for line in recent_lines],
            "total_lines": len(all_lines),
            "showing": len(recent_lines)
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ================== CLEANUP FOR GUNICORN ==================
def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    global _TRADING_BOT
    
    logging.info("üõë Shutting down trading bot...")
    
    try:
        with _TRADING_BOT_LOCK:
            if _TRADING_BOT:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                try:
                    if _TRADING_BOT._is_position_active():
                        logging.warning("üîÑ Attempting to close open position during shutdown...")
                        current_price = _TRADING_BOT.exchange.get_last_price(_TRADING_BOT.symbol)
                        _TRADING_BOT.pm.close_all(_TRADING_BOT.symbol, current_price, "system_shutdown")
                        _send_message("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
                except Exception as e:
                    logging.error(f"Failed to close position during shutdown: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                try:
                    _TRADING_BOT.state.save_state()
                    logging.info("‚úÖ Bot state saved")
                except Exception as e:
                    logging.error(f"Failed to save state: {e}")
                
                _TRADING_BOT = None
                logging.info("‚úÖ Trading bot shut down")
    except Exception as e:
        logging.error(f"Error during cleanup: {e}")
    
    # –£–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª—ã
    for lock_file in [LOCK_FILE, WEBHOOK_LOCK_FILE]:
        try:
            if os.path.exists(lock_file):
                os.remove(lock_file)
                logging.debug(f"Removed lock file: {lock_file}")
        except Exception as e:
            logging.error(f"Failed to remove lock file {lock_file}: {e}")
    
    logging.info("üèÅ Cleanup completed")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –¥–ª—è Gunicorn
atexit.register(cleanup_on_exit)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
import signal

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logging.info(f"üì° Received signal {signum}, initiating graceful shutdown...")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
    try:
        _send_message(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {signum}. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    except:
        pass
    
    # –í—ã–∑—ã–≤–∞–µ–º cleanup
    cleanup_on_exit()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    os._exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# ================== GUNICORN STARTUP ==================
# ‚úÖ GUNICORN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
try:
    _bootstrap_once()
except Exception as e:
    logging.error(f"‚ùå Bootstrap failed: {e}")
    # –ù–µ –ø–∞–¥–∞–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

# ‚úÖ GUNICORN: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è Gunicorn
# –í Procfile: gunicorn --bind 0.0.0.0:$PORT app:app
if __name__ == "__main__":
    # –≠—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.info("üîß Running in development mode")
    try:
        app.run(host="0.0.0.0", port=CFG.PORT, debug=False, threaded=True)
    except KeyboardInterrupt:
        logging.info("üõë Development server stopped by user")
        cleanup_on_exit()
    except Exception as e:
        logging.error(f"‚ùå Development server error: {e}")
        cleanup_on_exit()