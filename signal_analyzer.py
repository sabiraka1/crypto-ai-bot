import pandas as pd
import os

CSV_FILE = "sinyal_fiyat_analizi.csv"

def analyze_bad_signals(limit=5):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    if not os.path.exists(CSV_FILE):
        return None, None

    try:
        df = pd.read_csv(CSV_FILE, on_bad_lines='skip')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return None, None

    if len(df) < 10:
        return None, None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_cols = {"success", "rsi", "macd", "signal"}
    if not required_cols.issubset(df.columns):
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {required_cols - set(df.columns)}")
        return None, None

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    bad_signals = df[df["success"] == 0].copy()
    if bad_signals.empty:
        return None, None

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    summary = {
        "‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫": len(bad_signals),
        "üìä –û–±—â–∏–π Win Rate": f"{(1 - len(bad_signals)/len(df))*100:.1f}%",
        "üìâ –°—Ä. RSI –æ—à–∏–±–æ–∫": round(bad_signals["rsi"].mean(), 2),
        "üìâ –°—Ä. MACD –æ—à–∏–±–æ–∫": round(bad_signals["macd"].mean(), 4),
        "‚öñÔ∏è BUY –æ—à–∏–±–æ–∫": len(bad_signals[bad_signals["signal"].str.contains("BUY", na=False)]),
        "‚öñÔ∏è SELL –æ—à–∏–±–æ–∫": len(bad_signals[bad_signals["signal"].str.contains("SELL", na=False)])
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å
    if "score" in bad_signals.columns:
        summary["ü§ñ –°—Ä. AI Score –æ—à–∏–±–æ–∫"] = round(bad_signals["score"].mean(), 3)
    
    if "confidence" in bad_signals.columns:
        summary["üéØ –°—Ä. Confidence –æ—à–∏–±–æ–∫"] = round(bad_signals["confidence"].mean(), 1)
    
    if "pattern_score" in bad_signals.columns:
        summary["üïØÔ∏è –°—Ä. Pattern Score –æ—à–∏–±–æ–∫"] = round(bad_signals["pattern_score"].mean(), 1)

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
    explanations = []
    for _, row in bad_signals.tail(limit).iterrows():
        explanation = explain_signal(row)
        explanations.append(explanation)

    return summary, explanations

def explain_signal(row):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    signal = row.get("signal", "")
    rsi = row.get("rsi", 0)
    macd = row.get("macd", 0)
    score = row.get("score", 0.0)
    price = row.get("price", 0.0)
    confidence = row.get("confidence", 0)
    pattern = row.get("pattern", "")
    pattern_score = row.get("pattern_score", 0)
    pattern_direction = row.get("pattern_direction", "")
    buy_score = row.get("buy_score", 0)
    sell_score = row.get("sell_score", 0)

    comments = []

    if "BUY" in signal:
        # –ê–Ω–∞–ª–∏–∑ BUY —Å–∏–≥–Ω–∞–ª–æ–≤
        if rsi > 65: 
            comments.append(f"RSI –±—ã–ª –≤—ã—Å–æ–∫–∏–º ({rsi:.1f})")
        if macd < -50: 
            comments.append(f"MACD —Å–∏–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({macd:.4f})")
        if confidence < 50: 
            comments.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.1f}%)")
        if pattern_direction == "BEARISH": 
            comments.append(f"–ú–µ–¥–≤–µ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω ({pattern})")
        if pattern_score < 3 and pattern != "NONE": 
            comments.append(f"–°–ª–∞–±—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω ({pattern_score:.1f})")
        if buy_score < 3: 
            comments.append(f"–ú–∞–ª–æ BUY —É—Å–ª–æ–≤–∏–π ({buy_score}/8)")
        if score < 0.5: 
            comments.append(f"–ù–∏–∑–∫–∏–π AI score ({score:.3f})")
        
        if not comments: 
            comments.append("–†—ã–Ω–æ–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏")
            
        return f"‚ùå {signal} @ {price:.2f} ‚Äî {'; '.join(comments)}"

    elif "SELL" in signal:
        # –ê–Ω–∞–ª–∏–∑ SELL —Å–∏–≥–Ω–∞–ª–æ–≤
        if rsi < 35: 
            comments.append(f"RSI –±—ã–ª –Ω–∏–∑–∫–∏–º ({rsi:.1f})")
        if macd > 50: 
            comments.append(f"MACD —Å–∏–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ({macd:.4f})")
        if confidence < 50: 
            comments.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.1f}%)")
        if pattern_direction == "BULLISH": 
            comments.append(f"–ë—ã—á–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω ({pattern})")
        if pattern_score < 3 and pattern != "NONE": 
            comments.append(f"–°–ª–∞–±—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω ({pattern_score:.1f})")
        if sell_score < 3: 
            comments.append(f"–ú–∞–ª–æ SELL —É—Å–ª–æ–≤–∏–π ({sell_score}/8)")
        if score < 0.5: 
            comments.append(f"–ù–∏–∑–∫–∏–π AI score ({score:.3f})")
        
        if not comments: 
            comments.append("–†—ã–Ω–æ–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏")
            
        return f"‚ùå {signal} @ {price:.2f} ‚Äî {'; '.join(comments)}"

    return f"‚ùå {signal} @ {price:.2f} ‚Äî –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

def get_pattern_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
    if not os.path.exists(CSV_FILE):
        return None

    try:
        df = pd.read_csv(CSV_FILE)
        
        if "pattern" not in df.columns:
            return None
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        pattern_stats = df.groupby('pattern').agg({
            'success': ['count', 'sum', 'mean'],
            'score': 'mean',
            'confidence': 'mean'
        }).round(3)
        
        return pattern_stats
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return None

def get_signal_performance():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if not os.path.exists(CSV_FILE):
        return None

    try:
        df = pd.read_csv(CSV_FILE)
        
        signal_performance = {}
        
        for signal_type in ["BUY", "STRONG_BUY", "SELL", "STRONG_SELL", "HOLD"]:
            signal_data = df[df["signal"] == signal_type]
            
            if len(signal_data) > 0:
                signal_performance[signal_type] = {
                    "count": len(signal_data),
                    "success_rate": (signal_data["success"].mean() * 100),
                    "avg_score": signal_data.get("score", pd.Series([0])).mean(),
                    "avg_confidence": signal_data.get("confidence", pd.Series([0])).mean(),
                    "avg_rsi": signal_data["rsi"].mean(),
                    "avg_macd": signal_data["macd"].mean()
                }
        
        return signal_performance
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None

def recommend_improvements():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫"""
    try:
        df = pd.read_csv(CSV_FILE)
        bad_signals = df[df["success"] == 0]
        
        if len(bad_signals) == 0:
            return ["‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"]
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ RSI
        if bad_signals["rsi"].mean() > 65:
            recommendations.append("üìà –£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥ RSI –¥–ª—è BUY —Å–∏–≥–Ω–∞–ª–æ–≤ (–º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º RSI)")
        elif bad_signals["rsi"].mean() < 35:
            recommendations.append("üìâ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥ RSI –¥–ª—è SELL —Å–∏–≥–Ω–∞–ª–æ–≤ (–º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º RSI)")
        
        # –ê–Ω–∞–ª–∏–∑ confidence
        if "confidence" in bad_signals.columns:
            if bad_signals["confidence"].mean() < 60:
                recommendations.append("üéØ –ü–æ–≤—ã—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ confidence –¥–æ 70%")
        
        # –ê–Ω–∞–ª–∏–∑ AI score
        if "score" in bad_signals.columns:
            if bad_signals["score"].mean() < 0.6:
                recommendations.append("ü§ñ –ü–æ–≤—ã—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π AI score –¥–æ 0.7")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if "pattern_score" in bad_signals.columns:
            if bad_signals["pattern_score"].mean() < 4:
                recommendations.append("üïØÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å score >= 5")
        
        return recommendations if recommendations else ["üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
        
    except Exception as e:
        return [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"]
