[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crypto-ai-bot"
version = "2.0.0"
description = "Advanced cryptocurrency trading bot with AI analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["cryptocurrency", "trading", "ai", "machine-learning", "bot"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"

# Основные зависимости
dependencies = [
    "flask>=3.0.0,<4.0.0",
    "werkzeug>=3.0.0,<4.0.0",
    "gunicorn>=21.0.0,<22.0.0",
    "requests>=2.32.0,<3.0.0",
    "urllib3>=2.2.0,<3.0.0",
    "certifi>=2024.7.0",
    "aiohttp>=3.10.0,<4.0.0",
    "numpy>=1.26.0,<2.0.0",
    "pandas>=2.2.0,<3.0.0",
    "scipy>=1.13.0,<2.0.0",
    "scikit-learn>=1.5.0,<2.0.0",
    "joblib>=1.4.0,<2.0.0",
    "ccxt>=4.4.0,<5.0.0",
    "ta>=0.11.0,<1.0.0",
    "matplotlib>=3.9.0,<4.0.0",
    "plotly>=5.24.0,<6.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.8.0,<3.0.0",
    "schedule>=1.2.0,<2.0.0",
    "APScheduler>=3.10.0,<4.0.0",
    "psutil>=6.0.0,<7.0.0",
    "cryptography>=43.0.0",
    "structlog>=24.4.0,<25.0.0",
    "prometheus-client>=0.21.0,<1.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.6.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "bandit>=1.7.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    "sphinx>=7.4.0",
    "memory-profiler>=0.61.0",
]

# Database support
database = [
    "sqlalchemy>=2.0.32,<3.0.0",
    "alembic>=1.13.0,<2.0.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    "redis>=5.0.0,<6.0.0",
]

# Extended analytics
analytics = [
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
    "seaborn>=0.13.0",
    "bokeh>=3.4.0",
]

# Production monitoring
monitoring = [
    "sentry-sdk[flask]>=2.14.0",
    "newrelic>=9.13.0",
    "datadog>=0.49.0",
]

# All optional dependencies
all = [
    "crypto-ai-bot[dev,database,analytics,monitoring]"
]

[project.urls]
Homepage = "https://github.com/yourusername/crypto-ai-bot"
Documentation = "https://crypto-ai-bot.readthedocs.io/"
Repository = "https://github.com/yourusername/crypto-ai-bot.git"
Issues = "https://github.com/yourusername/crypto-ai-bot/issues"
Changelog = "https://github.com/yourusername/crypto-ai-bot/blob/main/CHANGELOG.md"

[project.scripts]
crypto-ai-bot = "main:main"
bot-train = "ml.adaptive_model:train_model_cli"
bot-backtest = "analysis.backtest:run_backtest_cli"

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "trading*", "analysis*", "ml*", "utils*", "telegram*", "config*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
exclude = [
    "tests/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "ta.*",
    "plotly.*",
    "matplotlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require API access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # assert_used, shell=True в subprocess

[tool.bandit.assert_used]
skips = ['*_test.py', 'test_*.py']