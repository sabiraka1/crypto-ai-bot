# .ruff.toml — единая конфигурация линтера
target-version = "py311"
line-length = 100
exclude = [
    "venv", ".venv", ".tox", "dist", "build",
    "**/__pycache__", ".mypy_cache", ".ruff_cache", ".pytest_cache",
]

# Включаем наборы правил по-умолчанию (важные классы)
select = [
  "F",   # pyflakes: реальные ошибки
  "E",   # pycodestyle (частично, см. ignore)
  "W",   # предупреждения pycodestyle
  "B",   # bugbear: логические/скользкие места
  "UP",  # pyupgrade: сдержанная модернизация синтаксиса
  "I",   # isort: порядок импортов
  "A",   # flake8-builtins (затенение builtins)
  "C90", # mccabe: сложность
  "PIE", # flake8-pie (безопасные улучшения)
  "RUF", # ruff-специфические
]

# То, что в нашем проекте даёт шум/ложноположительные в RU-тексте
ignore = [
  # Русские буквы, эмодзи и т. п. в строках/докстрингах
  "RUF001", "RUF002", "RUF003",

  # Однострочные if/try/; — стиль, не баг. Чиним позже, когда захотим.
  "E701", "E702",

  # «излишние map()/генераторы» и «перепиши тернарником» — пока не навязываем стиль
  "C401", "C417", "SIM102", "SIM105", "SIM108", "SIM118",

  # «используй | в isinstance» — не критично
  "UP038",

  # Неавтофиксируемые придирки к assert/докстрингам
  "PT018",
]

# Строгое: падать при найденных ошибках из select\ignore
# (то, что не игнорим — реально важно)
# По умолчанию ruff так и делает; лишних настроек не нужно.

# Порог сложности (McCabe)
[tool.ruff.mccabe]
max-complexity = 12

# Импорты (isort-совместимо)
[tool.ruff.isort]
combine-as-imports = true
force-single-line = false
known-first-party = ["crypto_ai_bot"]
