import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import os
from datetime import datetime, timedelta
import numpy as np

CLOSED_FILE = "closed_trades.csv"
CHART_PATH = "charts/profit_chart.png"

def generate_profit_chart():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏"""
    if not os.path.exists(CLOSED_FILE):
        return None, 0.0

    try:
        df = pd.read_csv(CLOSED_FILE)
        
        if len(df) < 2:
            return None, 0.0

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df["close_datetime"] = pd.to_datetime(df["close_datetime"])
        df = df.sort_values("close_datetime")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if df["pnl_percent"].abs().max() > 5:  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 5, –∑–Ω–∞—á–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            df["pnl_percent"] = df["pnl_percent"] / 100
        
        # –†–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        df["cumulative_return"] = (1 + df["pnl_percent"]).cumprod()
        df["cumulative_percent"] = (df["cumulative_return"] - 1) * 100
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('üìà –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', fontsize=16, fontweight='bold')
        
        # 1. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        ax1.plot(df["close_datetime"], df["cumulative_percent"], 
                marker='o', linewidth=2, markersize=4, color='green')
        ax1.fill_between(df["close_datetime"], df["cumulative_percent"], 0, alpha=0.3, color='green')
        ax1.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        ax1.set_title("üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", fontweight='bold')
        ax1.set_ylabel("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)")
        ax1.grid(True, alpha=0.3)
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d'))
        ax1.tick_params(axis='x', rotation=45)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫ –≤–∞–∂–Ω—ã–º —Ç–æ—á–∫–∞–º
        max_profit_idx = df["cumulative_percent"].idxmax()
        min_profit_idx = df["cumulative_percent"].idxmin()
        
        ax1.annotate(f'üìà –ü–∏–∫: {df.loc[max_profit_idx, "cumulative_percent"]:.1f}%',
                    xy=(df.loc[max_profit_idx, "close_datetime"], df.loc[max_profit_idx, "cumulative_percent"]),
                    xytext=(10, 10), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='green', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
        
        ax1.annotate(f'üìâ –ú–∏–Ω–∏–º—É–º: {df.loc[min_profit_idx, "cumulative_percent"]:.1f}%',
                    xy=(df.loc[min_profit_idx, "close_datetime"], df.loc[min_profit_idx, "cumulative_percent"]),
                    xytext=(10, -20), textcoords='offset points',
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='red', alpha=0.7),
                    arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L –ø–æ —Å–¥–µ–ª–∫–∞–º
        colors = ['green' if x > 0 else 'red' for x in df["pnl_percent"]]
        bars = ax2.bar(range(len(df)), df["pnl_percent"] * 100, color=colors, alpha=0.7)
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        ax2.set_title("üí∞ P&L –ø–æ —Å–¥–µ–ª–∫–∞–º (%)", fontweight='bold')
        ax2.set_xlabel("–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏")
        ax2.set_ylabel("P&L (%)")
        ax2.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä–∞—Ö
        for i, bar in enumerate(bars):
            height = bar.get_height()
            if abs(height) > 0.5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                ax2.text(bar.get_x() + bar.get_width()/2., height + (0.1 if height > 0 else -0.3),
                        f'{height:.1f}%', ha='center', va='bottom' if height > 0 else 'top',
                        fontsize=8)
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
        if 'signal' in df.columns:
            signal_stats = df.groupby('signal')['pnl_percent'].agg(['count', 'mean', 'sum'])
            signal_stats['mean_percent'] = signal_stats['mean'] * 100
            signal_stats['total_percent'] = signal_stats['sum'] * 100
            
            ax3.bar(signal_stats.index, signal_stats['mean_percent'], 
                   color=['green' if x > 0 else 'red' for x in signal_stats['mean_percent']], alpha=0.7)
            ax3.set_title("üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤", fontweight='bold')
            ax3.set_ylabel("–°—Ä–µ–¥–Ω–∏–π P&L (%)")
            ax3.grid(True, alpha=0.3)
            ax3.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ –±–∞—Ä—ã
            for i, (signal, row) in enumerate(signal_stats.iterrows()):
                ax3.text(i, row['mean_percent'] + (0.1 if row['mean_percent'] > 0 else -0.3),
                        f"n={int(row['count'])}", ha='center', va='bottom' if row['mean_percent'] > 0 else 'top')
        
        # 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        ax4.axis('off')
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_trades = len(df)
        winning_trades = len(df[df["pnl_percent"] > 0])
        losing_trades = len(df[df["pnl_percent"] < 0])
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        
        avg_win = df[df["pnl_percent"] > 0]["pnl_percent"].mean() * 100 if winning_trades > 0 else 0
        avg_loss = df[df["pnl_percent"] < 0]["pnl_percent"].mean() * 100 if losing_trades > 0 else 0
        
        profit_factor = abs(avg_win * winning_trades / (avg_loss * losing_trades)) if losing_trades > 0 and avg_loss != 0 else float('inf')
        
        total_return = df["cumulative_percent"].iloc[-1]
        max_drawdown = (df["cumulative_percent"].cummax() - df["cumulative_percent"]).max()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"""
üìä –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades} ({100-win_rate:.1f}%)

üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:
‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_win:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2f}%
‚Ä¢ Profit Factor: {profit_factor:.2f}

üìâ –†–∏—Å–∫–∏:
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%
‚Ä¢ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {(df["pnl_percent"].max()*100):.2f}%
‚Ä¢ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {(df["pnl_percent"].min()*100):.2f}%

üìÖ –ü–µ—Ä–∏–æ–¥:
‚Ä¢ –ù–∞—á–∞–ª–æ: {df["close_datetime"].min().strftime('%Y-%m-%d')}
‚Ä¢ –ö–æ–Ω–µ—Ü: {df["close_datetime"].max().strftime('%Y-%m-%d')}
‚Ä¢ –î–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {(df["close_datetime"].max() - df["close_datetime"].min()).days}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')}
"""
        
        ax4.text(0.05, 0.95, stats_text, transform=ax4.transAxes, fontsize=10,
                verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle="round,pad=0.5", facecolor='lightblue', alpha=0.8))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        os.makedirs("charts", exist_ok=True)
        plt.savefig(CHART_PATH, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        final_return = df["cumulative_return"].iloc[-1] - 1
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {CHART_PATH}")
        return CHART_PATH, final_return
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏: {e}")
        return None, 0.0

def generate_simple_profit_chart():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏"""
    if not os.path.exists(CLOSED_FILE):
        return None, 0.0

    try:
        df = pd.read_csv(CLOSED_FILE)
        
        if len(df) < 2:
            return None, 0.0

        df["close_datetime"] = pd.to_datetime(df["close_datetime"])
        df = df.sort_values("close_datetime")
        
        if df["pnl_percent"].abs().max() > 5:
            df["pnl_percent"] = df["pnl_percent"] / 100
        
        df["cumulative_return"] = (1 + df["pnl_percent"]).cumprod()
        
        # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(df["close_datetime"], (df["cumulative_return"] - 1) * 100, 
                marker='o', linewidth=2, color='green')
        plt.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        plt.title("üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)")
        plt.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        simple_path = "charts/simple_profit_chart.png"
        os.makedirs("charts", exist_ok=True)
        plt.savefig(simple_path, dpi=200, bbox_inches='tight')
        plt.close()
        
        final_return = df["cumulative_return"].iloc[-1] - 1
        return simple_path, final_return
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None, 0.0

def get_profit_summary():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏"""
    if not os.path.exists(CLOSED_FILE):
        return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–∫–∞—Ö"
    
    try:
        df = pd.read_csv(CLOSED_FILE)
        
        if len(df) == 0:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö"
        
        if df["pnl_percent"].abs().max() > 5:
            df["pnl_percent"] = df["pnl_percent"] / 100
        
        total_trades = len(df)
        winning_trades = len(df[df["pnl_percent"] > 0])
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        
        total_return = ((1 + df["pnl_percent"]).prod() - 1) * 100
        avg_return = df["pnl_percent"].mean() * 100
        
        summary = f"""
üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:
‚Ä¢ –°–¥–µ–ª–æ–∫: {total_trades}
‚Ä¢ Win Rate: {win_rate:.1f}%
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_return:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {avg_return:.2f}%
"""
        return summary
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"
