import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
import os

ERROR_FILE = "error_signals.csv"
CHART_DIR = "charts"

def plot_error_reasons():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–æ–∫"""
    if not os.path.exists(ERROR_FILE):
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ error_signals.csv")
        return None

    try:
        df = pd.read_csv(ERROR_FILE)
        if df.empty:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫.")
            return None

        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –æ—à–∏–±–æ–∫
        if "explanation" not in df.columns:
            print("‚ö†Ô∏è –ù–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ explanation")
            return None

        reasons = df["explanation"].dropna().tolist()
        if not reasons:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö –æ—à–∏–±–æ–∫")
            return None

        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
        all_causes = []
        for reason in reasons:
            if " ‚Äî " in reason:
                causes = reason.split(" ‚Äî ")[-1].split("; ")
                all_causes.extend(causes)
            else:
                all_causes.append(reason)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        counter = Counter(all_causes)
        
        if not counter:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫")
            return None

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        labels, values = zip(*counter.most_common(10))  # –¢–æ–ø 10 –ø—Ä–∏—á–∏–Ω
        
        plt.figure(figsize=(12, 8))
        colors = plt.cm.Reds(np.linspace(0.4, 0.8, len(labels)))
        bars = plt.barh(labels, values, color=colors)
        
        plt.title("üìä –¢–æ–ø-10 –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", fontsize=14, fontweight='bold')
        plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤")
        plt.ylabel("–ü—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for bar in bars:
            width = bar.get_width()
            plt.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                    f'{int(width)}', ha='left', va='center')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        os.makedirs(CHART_DIR, exist_ok=True)
        chart_path = f"{CHART_DIR}/error_reasons_chart.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chart_path}")
        return chart_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—à–∏–±–æ–∫: {e}")
        return None

def plot_error_distribution():
    """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    if not os.path.exists(ERROR_FILE):
        return None
        
    try:
        df = pd.read_csv(ERROR_FILE)
        if len(df) < 5:
            return None
            
        # –°–æ–∑–¥–∞–µ–º subplot
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫', fontsize=16, fontweight='bold')
        
        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
        if 'signal' in df.columns:
            signal_counts = df['signal'].value_counts()
            ax1.pie(signal_counts.values, labels=signal_counts.index, autopct='%1.1f%%', startangle=90)
            ax1.set_title('–û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤')
        else:
            ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–æ —Å–∏–≥–Ω–∞–ª–∞—Ö', ha='center', va='center', transform=ax1.transAxes)
            ax1.set_title('–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤')
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤
        if 'pnl_percent' in df.columns:
            losses = df['pnl_percent'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            ax2.hist(losses, bins=min(15, len(df)//2), alpha=0.7, color='red', edgecolor='black')
            ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤ (%)')
            ax2.set_xlabel('–£–±—ã—Ç–æ–∫ (%)')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax2.axvline(losses.mean(), color='blue', linestyle='--', 
                       label=f'–°—Ä–µ–¥–Ω–∏–π: {losses.mean():.1f}%')
            ax2.legend()
        else:
            ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–æ P&L', ha='center', va='center', transform=ax2.transAxes)
            ax2.set_title('–£–±—ã—Ç–∫–∏')
        
        # 3. RSI –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if 'rsi' in df.columns:
            ax3.scatter(range(len(df)), df['rsi'], alpha=0.6, color='purple')
            ax3.axhline(y=70, color='red', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω')
            ax3.axhline(y=30, color='green', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω')
            ax3.set_title('RSI –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö')
            ax3.set_ylabel('RSI')
            ax3.set_xlabel('–ù–æ–º–µ—Ä –æ—à–∏–±–∫–∏')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
        else:
            ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–æ RSI', ha='center', va='center', transform=ax3.transAxes)
            ax3.set_title('RSI')
        
        # 4. AI Score –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if 'score' in df.columns:
            scores = df['score']
            ax4.hist(scores, bins=min(10, len(df)//2), alpha=0.7, color='orange', edgecolor='black')
            ax4.axvline(scores.mean(), color='blue', linestyle='--', 
                       label=f'–°—Ä–µ–¥–Ω–∏–π: {scores.mean():.3f}')
            ax4.axvline(0.65, color='red', linestyle='--', alpha=0.7, label='–ü–æ—Ä–æ–≥: 0.65')
            ax4.set_title('AI Score –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö')
            ax4.set_xlabel('AI Score')
            ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax4.legend()
        else:
            ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–æ AI Score', ha='center', va='center', transform=ax4.transAxes)
            ax4.set_title('AI Score')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        os.makedirs(CHART_DIR, exist_ok=True)
        chart_path = f"{CHART_DIR}/error_distribution.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chart_path}")
        return chart_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return None

def plot_error_timeline():
    """–ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not os.path.exists(ERROR_FILE):
        return None
        
    try:
        df = pd.read_csv(ERROR_FILE)
        if len(df) < 3:
            return None
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df = df.sort_values('timestamp')
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        df['date'] = df['timestamp'].dt.date
        daily_errors = df.groupby('date').size()
        
        plt.figure(figsize=(12, 6))
        plt.plot(daily_errors.index, daily_errors.values, marker='o', linewidth=2, markersize=6)
        plt.title('üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –¥–Ω—è–º', fontsize=14, fontweight='bold')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫')
        plt.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if len(daily_errors) > 2:
            x = np.arange(len(daily_errors))
            z = np.polyfit(x, daily_errors.values, 1)
            p = np.poly1d(z)
            plt.plot(daily_errors.index, p(x), "r--", alpha=0.8, 
                    label=f'–¢—Ä–µ–Ω–¥: {z[0]:.2f} –æ—à–∏–±–æ–∫/–¥–µ–Ω—å')
            plt.legend()
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        os.makedirs(CHART_DIR, exist_ok=True)
        chart_path = f"{CHART_DIR}/error_timeline.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chart_path}")
        return chart_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

def create_error_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—à–∏–±–∫–∞–º"""
    charts = []
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
    chart1 = plot_error_reasons()
    if chart1:
        charts.append(chart1)
        
    chart2 = plot_error_distribution()
    if chart2:
        charts.append(chart2)
        
    chart3 = plot_error_timeline()
    if chart3:
        charts.append(chart3)
    
    return charts

if __name__ == "__main__":
    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫...")
    charts = create_error_report()
    
    if charts:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(charts)} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫")
        for chart in charts:
            print(f"  üìä {chart}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫")
