# utils/unified_cache.py - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø

import time
import threading
import hashlib
import pickle
import logging
import gc
from datetime import datetime, timedelta
from typing import Any, Dict, Optional, List, Union, Callable
from dataclasses import dataclass, field
from enum import Enum
from collections import OrderedDict
import psutil
import os

class CachePolicy(Enum):
    """–ü–æ–ª–∏—Ç–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    LRU = "lru"              # Least Recently Used
    TTL = "ttl"              # Time To Live
    SIZE_BASED = "size"      # –ü–æ —Ä–∞–∑–º–µ—Ä—É
    HYBRID = "hybrid"        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è

class CacheNamespace(Enum):
    """Namespace'—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    OHLCV = "ohlcv"                    # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    PRICES = "prices"                  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã  
    INDICATORS = "indicators"          # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    CSV_READS = "csv_reads"           # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤
    MARKET_INFO = "market_info"       # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–∞—Ö
    ML_FEATURES = "ml_features"       # ML —Ñ–∏—á–∏
    RISK_METRICS = "risk_metrics"     # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞

@dataclass
class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ"""
    key: str
    data: Any
    namespace: str
    created_at: float
    last_accessed: float
    access_count: int = 0
    size_bytes: int = 0
    ttl: Optional[float] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ TTL"""
        if self.ttl is None:
            return False
        return time.time() - self.created_at > self.ttl
    
    def touch(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞"""
        self.last_accessed = time.time()
        self.access_count += 1

@dataclass 
class NamespaceConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è namespace"""
    ttl: Optional[float] = None         # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    max_size: int = 1000               # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
    max_memory_mb: float = 100.0       # –ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏ –≤ MB
    policy: CachePolicy = CachePolicy.HYBRID
    auto_cleanup: bool = True          # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    compress: bool = False             # –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö

class UnifiedCacheManager:
    """
    üîß UNIFIED CACHE MANAGER - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –∫—ç—à–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:
    - technical_indicators._indicator_cache
    - exchange_client.ExchangeCache  
    - csv_handler._read_cache
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ namespace –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (LRU, TTL, Size-based)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
    - Memory pressure handling
    """
    
    def __init__(self, global_max_memory_mb: float = 500.0):
<<<<<<< HEAD
        self.global_max_memory_mb = global_max_memory_mb
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –ø–æ—Ä–æ–≥–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        self.MEMORY_WARNING_THRESHOLD = 0.6   # 60% - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        self.MEMORY_CRITICAL_THRESHOLD = 0.7  # 70% - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞  
        self.MEMORY_EMERGENCY_THRESHOLD = 0.8 # 80% - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self._cache: Dict[str, CacheEntry] = {}
        self._lock = threading.RLock()
        self._stats = {
            "hits": 0,
            "misses": 0, 
            "evictions": 0,
            "memory_pressure_cleanups": 0,
            "total_sets": 0,
            "total_gets": 0
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ namespace –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._namespace_configs = {
            CacheNamespace.OHLCV: NamespaceConfig(
                ttl=60.0,           # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                max_size=200,       # –ú–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ * —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
                max_memory_mb=150.0,
                policy=CachePolicy.TTL,
                compress=True       # OHLCV –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ
            ),
            CacheNamespace.PRICES: NamespaceConfig(
                ttl=10.0,           # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ü–µ–Ω
                max_size=500,       # –ú–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
                max_memory_mb=50.0,
                policy=CachePolicy.TTL
            ),
            CacheNamespace.INDICATORS: NamespaceConfig(
                ttl=120.0,          # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                max_size=300,
                max_memory_mb=100.0,
                policy=CachePolicy.HYBRID,
                compress=True
            ),
            CacheNamespace.CSV_READS: NamespaceConfig(
                ttl=30.0,           # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è CSV
                max_size=50,        # –ù–µ–º–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–æ–≤
                max_memory_mb=80.0,
                policy=CachePolicy.LRU
            ),
            CacheNamespace.MARKET_INFO: NamespaceConfig(
                ttl=3600.0,         # 1 —á–∞—Å –¥–ª—è market info
                max_size=100,
                max_memory_mb=20.0,
                policy=CachePolicy.TTL
            ),
            CacheNamespace.ML_FEATURES: NamespaceConfig(
                ttl=300.0,          # 5 –º–∏–Ω—É—Ç –¥–ª—è ML —Ñ–∏—á–µ–π
                max_size=100,
                max_memory_mb=50.0,
                policy=CachePolicy.LRU
            ),
            CacheNamespace.RISK_METRICS: NamespaceConfig(
                ttl=60.0,           # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫  
                max_size=100,
                max_memory_mb=30.0,
                policy=CachePolicy.TTL
            )
        }
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏
        self._cleanup_thread = None
        self._running = True
        self._start_background_cleanup()
        
        logging.info("üîß UnifiedCacheManager initialized with %.1f MB limit", global_max_memory_mb)
=======
    self.global_max_memory_mb = global_max_memory_mb
    
    # ‚úÖ –ù–û–í–û–ï: –ü–æ—Ä–æ–≥–∏ –ø–∞–º—è—Ç–∏
    self.MEMORY_WARNING_THRESHOLD = 0.6   # 60% - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    self.MEMORY_CRITICAL_THRESHOLD = 0.7  # 70% - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞  
    self.MEMORY_EMERGENCY_THRESHOLD = 0.8 # 80% - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    
    self._cache: Dict[str, CacheEntry] = {}
    self._lock = threading.RLock()
    self._stats = {
        "hits": 0,
        "misses": 0, 
        "evictions": 0,
        "memory_pressure_cleanups": 0,
        "total_sets": 0,
        "total_gets": 0
    }
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã namespace
    self._namespace_configs = {
        CacheNamespace.OHLCV: NamespaceConfig(
            ttl=30.0,           # –ë—ã–ª–æ 60, —Å—Ç–∞–ª–æ 30 —Å–µ–∫—É–Ω–¥
            max_size=100,       # –ë—ã–ª–æ 200, —Å—Ç–∞–ª–æ 100  
            max_memory_mb=80.0, # –ë—ã–ª–æ 150, —Å—Ç–∞–ª–æ 80
            policy=CachePolicy.TTL,
            compress=True
        ),
        CacheNamespace.PRICES: NamespaceConfig(
            ttl=10.0,           # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            max_size=200,       # –ë—ã–ª–æ 500, —Å—Ç–∞–ª–æ 200
            max_memory_mb=30.0, # –ë—ã–ª–æ 50, —Å—Ç–∞–ª–æ 30
            policy=CachePolicy.TTL
        ),
        CacheNamespace.INDICATORS: NamespaceConfig(
            ttl=30.0,           # –ë—ã–ª–æ 120, —Å—Ç–∞–ª–æ 30 —Å–µ–∫—É–Ω–¥
            max_size=50,        # –ë—ã–ª–æ 300, —Å—Ç–∞–ª–æ 50
            max_memory_mb=50.0, # –ë—ã–ª–æ 100, —Å—Ç–∞–ª–æ 50
            policy=CachePolicy.HYBRID,
            compress=True
        ),
        CacheNamespace.CSV_READS: NamespaceConfig(
            ttl=30.0,           # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            max_size=30,        # –ë—ã–ª–æ 50, —Å—Ç–∞–ª–æ 30
            max_memory_mb=40.0, # –ë—ã–ª–æ 80, —Å—Ç–∞–ª–æ 40
            policy=CachePolicy.LRU
        ),
        CacheNamespace.MARKET_INFO: NamespaceConfig(
            ttl=3600.0,         # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            max_size=50,        # –ë—ã–ª–æ 100, —Å—Ç–∞–ª–æ 50
            max_memory_mb=15.0, # –ë—ã–ª–æ 20, —Å—Ç–∞–ª–æ 15
            policy=CachePolicy.TTL
        ),
        CacheNamespace.ML_FEATURES: NamespaceConfig(
            ttl=300.0,          # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            max_size=50,        # –ë—ã–ª–æ 100, —Å—Ç–∞–ª–æ 50
            max_memory_mb=25.0, # –ë—ã–ª–æ 50, —Å—Ç–∞–ª–æ 25
            policy=CachePolicy.LRU
        ),
        CacheNamespace.RISK_METRICS: NamespaceConfig(
            ttl=60.0,           # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            max_size=50,        # –ë—ã–ª–æ 100, —Å—Ç–∞–ª–æ 50
            max_memory_mb=20.0, # –ë—ã–ª–æ 30, —Å—Ç–∞–ª–æ 20
            policy=CachePolicy.TTL
        )
    }
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏
    self._cleanup_thread = None
    self._running = True
    self._start_background_cleanup()
    
    logging.info("üîß UnifiedCacheManager initialized with %.1f MB limit", global_max_memory_mb)
>>>>>>> 39c34aa2e9b89b6925c13f2a424be79f5adf4432

    # =========================================================================
    # –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # =========================================================================

    def get(self, key: str, namespace: Union[str, CacheNamespace], 
            default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            self._stats["total_gets"] += 1
            
            cache_key = self._build_cache_key(key, namespace)
            
            if cache_key in self._cache:
                entry = self._cache[cache_key]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ TTL
                if entry.is_expired():
                    del self._cache[cache_key]
                    self._stats["misses"] += 1
                    logging.debug(f"üîß Cache MISS (expired): {cache_key}")
                    return default
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
                entry.touch()
                self._stats["hits"] += 1
                
                logging.debug(f"üîß Cache HIT: {cache_key} (access #{entry.access_count})")
                return entry.data
            else:
                self._stats["misses"] += 1
                logging.debug(f"üîß Cache MISS: {cache_key}")
                return default

    def set(self, key: str, data: Any, namespace: Union[str, CacheNamespace],
            ttl: Optional[float] = None, metadata: Dict[str, Any] = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        with self._lock:
            self._stats["total_sets"] += 1
            
            try:
                cache_key = self._build_cache_key(key, namespace)
                ns_str = namespace.value if isinstance(namespace, CacheNamespace) else str(namespace)
                config = self._get_namespace_config(namespace)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                try:
                    if config.compress:
                        serialized = pickle.dumps(data)
                        size_bytes = len(serialized)
                    else:
                        size_bytes = self._estimate_size(data)
                except Exception:
                    size_bytes = 1024  # Fallback –æ—Ü–µ–Ω–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ namespace
                if not self._check_namespace_limits(namespace, size_bytes):
                    logging.warning(f"üîß Cache SET rejected: namespace limits exceeded for {cache_key}")
                    return False
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                entry = CacheEntry(
                    key=cache_key,
                    data=data,
                    namespace=ns_str,
                    created_at=time.time(),
                    last_accessed=time.time(),
                    size_bytes=size_bytes,
                    ttl=ttl or config.ttl,
                    metadata=metadata or {}
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
                if self._check_memory_pressure():
                    self._handle_memory_pressure()
                
                self._cache[cache_key] = entry
                logging.debug(f"üîß Cache SET: {cache_key} ({size_bytes} bytes)")
                
                return True
                
            except Exception as e:
                logging.error(f"üîß Cache SET failed for {key}: {e}")
                return False

    def delete(self, key: str, namespace: Union[str, CacheNamespace]) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            cache_key = self._build_cache_key(key, namespace)
            
            if cache_key in self._cache:
                del self._cache[cache_key]
                logging.debug(f"üîß Cache DELETE: {cache_key}")
                return True
            
            return False

    def clear_namespace(self, namespace: Union[str, CacheNamespace]):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ namespace"""
        with self._lock:
            ns_str = namespace.value if isinstance(namespace, CacheNamespace) else str(namespace)
            
            keys_to_delete = [
                key for key, entry in self._cache.items() 
                if entry.namespace == ns_str
            ]
            
            for key in keys_to_delete:
                del self._cache[key]
            
            logging.info(f"üîß Cache cleared namespace '{ns_str}': {len(keys_to_delete)} entries")

    def clear_all(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        with self._lock:
            count = len(self._cache)
            self._cache.clear()
            logging.info(f"üîß Cache cleared completely: {count} entries")

    # =========================================================================
    # –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
    # =========================================================================

    def cached(self, namespace: Union[str, CacheNamespace], 
               ttl: Optional[float] = None,
               key_func: Optional[Callable] = None):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        def decorator(func):
            def wrapper(*args, **kwargs):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
                if key_func:
                    cache_key = key_func(*args, **kwargs)
                else:
                    cache_key = self._generate_function_key(func, args, kwargs)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
                result = self.get(cache_key, namespace)
                if result is not None:
                    return result
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = func(*args, **kwargs)
                self.set(cache_key, result, namespace, ttl)
                
                return result
            
            return wrapper
        return decorator

    def _generate_function_key(self, func, args, kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            key_data = f"{func.__name__}:{str(args)}:{str(sorted(kwargs.items()))}"
            return hashlib.md5(key_data.encode()).hexdigest()[:16]
        except Exception:
            return f"{func.__name__}:{time.time()}"

    # =========================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =========================================================================

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        with self._lock:
            total_requests = self._stats["hits"] + self._stats["misses"]
            hit_rate = (self._stats["hits"] / total_requests * 100) if total_requests > 0 else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ namespace
            ns_stats = {}
            total_memory = 0
            
            for ns in CacheNamespace:
                entries = [e for e in self._cache.values() if e.namespace == ns.value]
                ns_memory = sum(e.size_bytes for e in entries) / (1024 * 1024)  # MB
                total_memory += ns_memory
                
                ns_stats[ns.value] = {
                    "entries": len(entries),
                    "memory_mb": round(ns_memory, 2),
                    "avg_access_count": round(sum(e.access_count for e in entries) / len(entries), 1) if entries else 0
                }
            
            return {
                "global": {
                    **self._stats,
                    "total_entries": len(self._cache),
                    "hit_rate_pct": round(hit_rate, 2),
                    "total_memory_mb": round(total_memory, 2),
                    "memory_limit_mb": self.global_max_memory_mb
                },
                "namespaces": ns_stats,
                "memory_pressure": self._check_memory_pressure()
            }

    def get_top_keys(self, namespace: Optional[Union[str, CacheNamespace]] = None, 
                     limit: int = 10) -> List[Dict[str, Any]]:
        """–¢–æ–ø –∫–ª—é—á–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        with self._lock:
            entries = list(self._cache.values())
            
            if namespace:
                ns_str = namespace.value if isinstance(namespace, CacheNamespace) else str(namespace)
                entries = [e for e in entries if e.namespace == ns_str]
            
            entries.sort(key=lambda x: x.access_count, reverse=True)
            
            return [
                {
                    "key": e.key,
                    "namespace": e.namespace,
                    "access_count": e.access_count,
                    "size_mb": round(e.size_bytes / (1024 * 1024), 3),
                    "age_seconds": round(time.time() - e.created_at, 1)
                }
                for e in entries[:limit]
            ]

    # =========================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–¨–Æ
    # =========================================================================

    def _check_memory_pressure(self) -> bool:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    current_memory = sum(e.size_bytes for e in self._cache.values()) / (1024 * 1024)
    memory_ratio = current_memory / self.global_max_memory_mb
    
    if memory_ratio > self.MEMORY_EMERGENCY_THRESHOLD:
        logging.error(f"üî• EMERGENCY: Cache memory {memory_ratio:.1%} > {self.MEMORY_EMERGENCY_THRESHOLD:.1%}")
        return True
    elif memory_ratio > self.MEMORY_CRITICAL_THRESHOLD:
        logging.warning(f"‚ö†Ô∏è CRITICAL: Cache memory {memory_ratio:.1%} > {self.MEMORY_CRITICAL_THRESHOLD:.1%}")
        return True
    elif memory_ratio > self.MEMORY_WARNING_THRESHOLD:
        logging.info(f"üìä WARNING: Cache memory {memory_ratio:.1%} > {self.MEMORY_WARNING_THRESHOLD:.1%}")
        
    return memory_ratio > self.MEMORY_WARNING_THRESHOLD

    def _handle_memory_pressure(self):
    """‚úÖ –£–õ–£–ß–®–ï–ù–û: –¢—Ä—ë—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    current_memory = sum(e.size_bytes for e in self._cache.values()) / (1024 * 1024)
    memory_ratio = current_memory / self.global_max_memory_mb
    
    self._stats["memory_pressure_cleanups"] += 1
    
    if memory_ratio > self.MEMORY_EMERGENCY_THRESHOLD:
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º 50%
        logging.error("üî• EMERGENCY cleanup: removing 50% of cache")
        self._cleanup_expired()
        self._cleanup_lru(target_reduction=0.5)
        self._cleanup_by_namespace_priority()
        
    elif memory_ratio > self.MEMORY_CRITICAL_THRESHOLD:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º 30%
        logging.warning("‚ö†Ô∏è CRITICAL cleanup: removing 30% of cache") 
        self._cleanup_expired()
        self._cleanup_lru(target_reduction=0.3)
        
    else:
        # –û–±—ã—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ + 15% LRU
        logging.info("üìä Normal cleanup: expired + 15% LRU")
        self._cleanup_expired()
        self._cleanup_lru(target_reduction=0.15)

    def _cleanup_expired(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        expired_keys = [
            key for key, entry in self._cache.items()
            if entry.is_expired()
        ]
        
        for key in expired_keys:
            del self._cache[key]
        
        return len(expired_keys)

    def _cleanup_lru(self, target_reduction: float = 0.2) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        if not self._cache:
            return 0
        
        target_count = int(len(self._cache) * target_reduction)
        entries = list(self._cache.items())
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        entries.sort(key=lambda x: x[1].last_accessed)
        
        removed_count = 0
        for key, entry in entries[:target_count]:
            del self._cache[key]
            removed_count += 1
            self._stats["evictions"] += 1
        
        return removed_count

    # =========================================================================
    # –£–¢–ò–õ–ò–¢–´
    # =========================================================================

    def _build_cache_key(self, key: str, namespace: Union[str, CacheNamespace]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫—ç—à–∞"""
        ns_str = namespace.value if isinstance(namespace, CacheNamespace) else str(namespace)
        return f"{ns_str}:{key}"

    def _get_namespace_config(self, namespace: Union[str, CacheNamespace]) -> NamespaceConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ namespace"""
        if isinstance(namespace, CacheNamespace):
            return self._namespace_configs.get(namespace, NamespaceConfig())
        else:
            # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö namespace
            return NamespaceConfig()

    def _check_namespace_limits(self, namespace: Union[str, CacheNamespace], 
                               new_size_bytes: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ namespace"""
        config = self._get_namespace_config(namespace)
        ns_str = namespace.value if isinstance(namespace, CacheNamespace) else str(namespace)
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ namespace
        ns_entries = [e for e in self._cache.values() if e.namespace == ns_str]
        current_count = len(ns_entries)
        current_memory_mb = sum(e.size_bytes for e in ns_entries) / (1024 * 1024)
        new_memory_mb = new_size_bytes / (1024 * 1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if current_count >= config.max_size:
            return False
        if current_memory_mb + new_memory_mb > config.max_memory_mb:
            return False
        
        return True

    def _estimate_size(self, data: Any) -> int:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            if hasattr(data, '__sizeof__'):
                return data.__sizeof__()
            else:
                return len(str(data)) * 2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        except Exception:
            return 1024  # Fallback

    def _start_background_cleanup(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏"""
        def cleanup_worker():
            while self._running:
                try:
                    time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    if not self._running:
                        break
                    
                    with self._lock:
                        expired_count = self._cleanup_expired()
                        if expired_count > 0:
                            logging.debug(f"üîß Background cleanup: {expired_count} expired entries")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ memory pressure
                        if self._check_memory_pressure():
                            self._handle_memory_pressure()
                            
                except Exception as e:
                    logging.error(f"üîß Background cleanup error: {e}")
        
        self._cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True, name="CacheCleanup")
        self._cleanup_thread.start()

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self._running = False
        if self._cleanup_thread:
            self._cleanup_thread.join(timeout=5)
        logging.info("üîß UnifiedCacheManager shutdown completed")

# =========================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ò –£–¢–ò–õ–ò–¢–´
# =========================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_cache_manager: Optional[UnifiedCacheManager] = None

def get_cache_manager() -> UnifiedCacheManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _global_cache_manager
    if _global_cache_manager is None:
        memory_limit = float(os.getenv("CACHE_MEMORY_LIMIT_MB", "500"))
        _global_cache_manager = UnifiedCacheManager(global_max_memory_mb=memory_limit)
    return _global_cache_manager

def cached_function(namespace: Union[str, CacheNamespace], ttl: Optional[float] = None):
    """–£–¥–æ–±–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    return get_cache_manager().cached(namespace, ttl)

# –ê–ª–∏–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
cache = get_cache_manager()

def _cleanup_by_namespace_priority(self):
        """‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É namespace"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è (–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        cleanup_priority = [
            CacheNamespace.ML_FEATURES,     # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
            CacheNamespace.RISK_METRICS,    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å  
            CacheNamespace.INDICATORS,      # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
            CacheNamespace.OHLCV,          # –¢—è–∂–µ–ª–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–æ –º–æ–∂–Ω–æ
            CacheNamespace.CSV_READS,      # –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            CacheNamespace.PRICES,         # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            CacheNamespace.MARKET_INFO,    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        ]
        
        for namespace in cleanup_priority:
            ns_entries = [(k, v) for k, v in self._cache.items() 
                         if v.namespace == namespace.value]
            
            if len(ns_entries) > 10:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞–ø–∏—Å–µ–π namespace
                ns_entries.sort(key=lambda x: x[1].last_accessed)
                to_remove = len(ns_entries) // 2
                
                for key, _ in ns_entries[:to_remove]:
                    del self._cache[key]
                    
                logging.info(f"üßπ Cleaned {to_remove} entries from {namespace.value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–æ–≥–ª–æ –ª–∏
                if not self._check_memory_pressure():
                    break

    def get_memory_diagnostics(self) -> Dict[str, Any]:
        """‚úÖ –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        current_memory = sum(e.size_bytes for e in self._cache.values()) / (1024 * 1024)
        memory_ratio = current_memory / self.global_max_memory_mb
        
        # –ü–∞–º—è—Ç—å –ø–æ namespace
        ns_memory = {}
        for ns in CacheNamespace:
            entries = [e for e in self._cache.values() if e.namespace == ns.value]
            ns_memory[ns.value] = {
                "entries": len(entries),
                "memory_mb": round(sum(e.size_bytes for e in entries) / (1024 * 1024), 2),
                "avg_size_kb": round(sum(e.size_bytes for e in entries) / len(entries) / 1024, 1) if entries else 0
            }
        
        return {
            "total_memory_mb": round(current_memory, 2),
            "memory_ratio": round(memory_ratio, 3),
            "memory_limit_mb": self.global_max_memory_mb,
            "pressure_level": (
                "EMERGENCY" if memory_ratio > self.MEMORY_EMERGENCY_THRESHOLD else
                "CRITICAL" if memory_ratio > self.MEMORY_CRITICAL_THRESHOLD else  
                "WARNING" if memory_ratio > self.MEMORY_WARNING_THRESHOLD else
                "OK"
            ),
            "namespace_memory": ns_memory,
            "recommendations": self._get_memory_recommendations(memory_ratio)
        }

    def _get_memory_recommendations(self, memory_ratio: float) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–∞–º—è—Ç—å—é"""
        recommendations = []
        
        if memory_ratio > 0.8:
            recommendations.append("URGENT: Clear cache immediately")
            recommendations.append("Consider restarting application")
        elif memory_ratio > 0.7:
            recommendations.append("Clear less important namespaces")
            recommendations.append("Reduce TTL for indicators")
        elif memory_ratio > 0.6:
            recommendations.append("Monitor memory usage closely") 
            recommendations.append("Consider reducing cache limits")
        else:
            recommendations.append("Memory usage is healthy")
            
        return recommendations

# =========================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ò –£–¢–ò–õ–ò–¢–´
# =========================================================================

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'UnifiedCacheManager',
    'CacheNamespace', 
    'CachePolicy',
    'CacheEntry',
    'NamespaceConfig',
    'get_cache_manager',
    'cached_function',
    'cache'
]
