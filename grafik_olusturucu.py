import os
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from ta.momentum import RSIIndicator
from ta.trend import MACD
from ta.volatility import BollingerBands
import pandas as pd
import ccxt

exchange = ccxt.gateio()
CHART_DIR = "charts"

def fetch_ohlcv():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
    try:
        bars = exchange.fetch_ohlcv('BTC/USDT', timeframe='15m', limit=50)
        df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def cleanup_old_charts():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    if not os.path.exists(CHART_DIR):
        return
        
    now = datetime.now()
    for filename in os.listdir(CHART_DIR):
        file_path = os.path.join(CHART_DIR, filename)
        if filename.endswith(".png"):
            try:
                file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                if now - file_mtime > timedelta(hours=12):  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 12 —á–∞—Å–æ–≤
                    os.remove(file_path)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filename}: {e}")

def draw_rsi_macd_chart(result):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    cleanup_old_charts()
    
    df = fetch_ohlcv()
    if df is None:
        return None
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['rsi'] = RSIIndicator(close=df['close'], window=14).rsi()
    macd_indicator = MACD(close=df['close'])
    df['macd'] = macd_indicator.macd()
    df['macd_signal'] = macd_indicator.macd_signal()
    df['macd_histogram'] = macd_indicator.macd_diff()
    
    # Bollinger Bands
    bb = BollingerBands(close=df['close'])
    df['bb_upper'] = bb.bollinger_hband()
    df['bb_lower'] = bb.bollinger_lband()
    df['bb_middle'] = bb.bollinger_mavg()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    signal = result.get('signal', 'NONE')
    rsi = result.get('rsi', 0)
    macd_val = result.get('macd', 0)
    pattern = result.get('pattern', 'NONE')
    pattern_score = result.get('pattern_score', 0)
    pattern_direction = result.get('pattern_direction', 'NEUTRAL')
    confidence = result.get('confidence', 0)
    price = result.get('price', 0)
    support = result.get('support', 0)
    resistance = result.get('resistance', 0)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle(f'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ BTC/USDT | {signal} | Confidence: {confidence:.1f}%', 
                 fontsize=14, fontweight='bold')
    
    # 1. –¶–µ–Ω–∞ + Bollinger Bands + –ü–æ–¥–¥–µ—Ä–∂–∫–∞/–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
    ax1.plot(df['timestamp'], df['close'], label='Close', color='black', linewidth=2)
    ax1.plot(df['timestamp'], df['bb_upper'], label='BB Upper', color='red', alpha=0.7)
    ax1.plot(df['timestamp'], df['bb_lower'], label='BB Lower', color='green', alpha=0.7)
    ax1.plot(df['timestamp'], df['bb_middle'], label='BB Middle', color='blue', alpha=0.5)
    ax1.fill_between(df['timestamp'], df['bb_upper'], df['bb_lower'], alpha=0.1, color='gray')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    if support > 0:
        ax1.axhline(y=support, color='green', linestyle='--', alpha=0.8, label=f'Support: {support:.2f}')
    if resistance > 0:
        ax1.axhline(y=resistance, color='red', linestyle='--', alpha=0.8, label=f'Resistance: {resistance:.2f}')
    
    # –ú–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    last_row = df.iloc[-1]
    signal_colors = {
        'STRONG_BUY': 'darkgreen', 'BUY': 'green',
        'STRONG_SELL': 'darkred', 'SELL': 'red',
        'HOLD': 'gray', 'ERROR': 'purple'
    }
    signal_color = signal_colors.get(signal, 'black')
    
    ax1.scatter(last_row['timestamp'], last_row['close'], 
               color=signal_color, s=100, zorder=5, label=f'{signal} @ {price:.2f}')
    
    ax1.set_title(f'Price & Bollinger Bands | Pattern: {pattern} ({pattern_score:.1f})')
    ax1.legend(fontsize=8)
    ax1.grid(True, alpha=0.3)
    ax1.tick_params(axis='x', rotation=45)
    
    # 2. RSI
    ax2.plot(df['timestamp'], df['rsi'], label='RSI', color='purple', linewidth=2)
    ax2.axhline(70, color='red', linestyle='--', linewidth=1, alpha=0.8, label='Overbought (70)')
    ax2.axhline(30, color='green', linestyle='--', linewidth=1, alpha=0.8, label='Oversold (30)')
    ax2.axhline(50, color='gray', linestyle='-', linewidth=0.5, alpha=0.5)
    ax2.fill_between(df['timestamp'], 70, 100, alpha=0.1, color='red')
    ax2.fill_between(df['timestamp'], 0, 30, alpha=0.1, color='green')
    
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI
    ax2.scatter(last_row['timestamp'], rsi, color=signal_color, s=80, zorder=5)
    ax2.text(last_row['timestamp'], rsi + 5, f'{rsi:.1f}', 
             ha='center', va='bottom', fontweight='bold', color=signal_color)
    
    ax2.set_title(f'RSI (14) | Current: {rsi:.1f}')
    ax2.set_ylim(0, 100)
    ax2.legend(fontsize=8)
    ax2.grid(True, alpha=0.3)
    ax2.tick_params(axis='x', rotation=45)
    
    # 3. MACD
    ax3.plot(df['timestamp'], df['macd'], label='MACD', color='blue', linewidth=2)
    ax3.plot(df['timestamp'], df['macd_signal'], label='Signal', color='orange', linewidth=2)
    ax3.bar(df['timestamp'], df['macd_histogram'], label='Histogram', 
            color=['green' if x > 0 else 'red' for x in df['macd_histogram']], 
            alpha=0.6, width=pd.Timedelta(minutes=10))
    ax3.axhline(0, color='black', linestyle='-', linewidth=0.5)
    
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MACD
    ax3.scatter(last_row['timestamp'], macd_val, color=signal_color, s=80, zorder=5)
    
    ax3.set_title(f'MACD | Current: {macd_val:.4f}')
    ax3.legend(fontsize=8)
    ax3.grid(True, alpha=0.3)
    ax3.tick_params(axis='x', rotation=45)
    
    # 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    ax4.axis('off')  # –£–±–∏—Ä–∞–µ–º –æ—Å–∏
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    info_text = f"""
üìä SIGNAL ANALYSIS

üéØ Signal: {signal}
üìà Confidence: {confidence:.1f}%
üí∞ Price: ${price:.2f}

üìä TECHNICAL INDICATORS
‚Ä¢ RSI (14): {rsi:.1f}
‚Ä¢ MACD: {macd_val:.4f}
‚Ä¢ Pattern: {pattern}
‚Ä¢ Pattern Score: {pattern_score:.1f}/10
‚Ä¢ Direction: {pattern_direction}

üíπ LEVELS
‚Ä¢ Support: ${support:.2f}
‚Ä¢ Resistance: ${resistance:.2f}

üïØÔ∏è PATTERN DETAILS
Score: {pattern_score:.1f}/10
Direction: {pattern_direction}
Strength: {'Strong' if pattern_score >= 6 else 'Moderate' if pattern_score >= 4 else 'Weak'}

‚è∞ Generated: {datetime.now().strftime('%H:%M:%S')}
"""
    
    ax4.text(0.05, 0.95, info_text, transform=ax4.transAxes, fontsize=10,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    os.makedirs(CHART_DIR, exist_ok=True)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{CHART_DIR}/signal_chart_{timestamp}.png"
    
    try:
        plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        plt.close()
        return None

def draw_simplified_chart(result):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    df = fetch_ohlcv()
    if df is None:
        return None
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['rsi'] = RSIIndicator(close=df['close']).rsi()
    macd_indicator = MACD(close=df['close'])
    df['macd'] = macd_indicator.macd()
    
    signal = result.get('signal', 'NONE')
    pattern = result.get('pattern', 'NONE')
    confidence = result.get('confidence', 0)
    
    # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
    fig.suptitle(f'{signal} | {pattern} | Confidence: {confidence:.1f}%', fontsize=12)
    
    # –¶–µ–Ω–∞
    ax1.plot(df['timestamp'], df['close'], color='black', linewidth=2)
    ax1.set_title('BTC/USDT Price')
    ax1.grid(True, alpha=0.3)
    
    # RSI
    ax2.plot(df['timestamp'], df['rsi'], color='purple', linewidth=2)
    ax2.axhline(70, color='red', linestyle='--', alpha=0.7)
    ax2.axhline(30, color='green', linestyle='--', alpha=0.7)
    ax2.set_title('RSI (14)')
    ax2.set_ylim(0, 100)
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    os.makedirs(CHART_DIR, exist_ok=True)
    filename = f"{CHART_DIR}/simple_chart_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    
    try:
        plt.savefig(filename, dpi=200, bbox_inches='tight')
        plt.close()
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        plt.close()
        return None
