name: Crypto AI Bot CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  PYTHONPATH: ./src
  MODE: paper
  EXCHANGE: gateio

jobs:
  # Quick validation - fails fast on basic issues
  lint-and-type:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Fallbacks for missing tools
          pip install ruff mypy import-linter pytest pytest-cov bandit safety

      - name: Show tool versions
        run: |
          python --version
          ruff --version
          mypy --version
          echo "import-linter: $(pip show import-linter | grep Version | cut -d' ' -f2 || echo 'installed')"
          pytest --version

      - name: Ruff (lint + format)
        run: |
          ruff check .
          ruff format --check .

      - name: MyPy (type checking)
        run: |
          mypy --config-file mypy.ini .

      - name: Import Linter (architecture boundaries)
        run: |
          lint-imports --config importlinter.ini --verbose

  # Crypto-specific validations
  crypto-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-type

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Smoke Test (core components)
        env:
          SYMBOLS: BTC/USDT
          STRATEGY_SET: ema_cross,rsi_momentum
          POSITION_SIZER: fractional
        run: |
          # Basic smoke test without external dependencies
          python -c "
          import sys
          sys.path.insert(0, './src')
          
          # Test imports
          try:
              from crypto_ai_bot.core.domain.strategies.strategy_manager import StrategyManager
              from crypto_ai_bot.core.domain.risk.manager import RiskManager
              from crypto_ai_bot.core.application.orchestrator import Orchestrator
              from crypto_ai_bot.core.infrastructure.brokers.paper import PaperBroker
              from crypto_ai_bot.utils.decimal import dec
              from crypto_ai_bot.utils.pnl import calculate_fifo_pnl
              print('✅ Core imports successful')
          except Exception as e:
              print(f'❌ Import failed: {e}')
              sys.exit(1)
          
          # Test component instantiation
          try:
              strategy_mgr = StrategyManager()
              risk_mgr = RiskManager()
              paper_broker = PaperBroker()
              print('✅ Core components instantiated')
          except Exception as e:
              print(f'❌ Component instantiation failed: {e}')
              sys.exit(1)
          "

      - name: Architecture Invariants
        run: |
          # Validate trading system invariants
          python -c "
          import sys, os
          sys.path.insert(0, './src')
          
          # Set minimal required ENV vars
          os.environ.setdefault('MODE', 'paper')
          os.environ.setdefault('SYMBOLS', 'BTC/USDT')
          os.environ.setdefault('MTF_W_M15', '0.40')
          os.environ.setdefault('MTF_W_H1', '0.25')
          os.environ.setdefault('MTF_W_H4', '0.20')
          os.environ.setdefault('MTF_W_D1', '0.10')
          os.environ.setdefault('MTF_W_W1', '0.05')
          os.environ.setdefault('FUSION_W_TECHNICAL', '0.65')
          os.environ.setdefault('FUSION_W_AI', '0.35')
          
          try:
              from crypto_ai_bot.core.infrastructure.settings import get_settings
              s = get_settings()
              
              # MTF weights must sum to 1.0
              mtf_sum = s.MTF_W_M15 + s.MTF_W_H1 + s.MTF_W_H4 + s.MTF_W_D1 + s.MTF_W_W1
              assert abs(mtf_sum - 1.0) < 0.001, f'MTF weights sum: {mtf_sum} (expected 1.0)'
              
              # Fusion weights must sum to 1.0  
              fusion_sum = s.FUSION_W_TECHNICAL + s.FUSION_W_AI
              assert abs(fusion_sum - 1.0) < 0.001, f'Fusion weights sum: {fusion_sum} (expected 1.0)'
              
              # Validate decimal precision
              from crypto_ai_bot.utils.decimal import dec
              test_calc = dec('100.50') * dec('0.1')
              assert test_calc == dec('10.05'), f'Decimal calculation failed: {test_calc}'
              
              print('✅ Architecture invariants validated')
          except Exception as e:
              print(f'❌ Architecture validation failed: {e}')
              sys.exit(1)
          "

      - name: Database Migrations Test
        run: |
          # Test database migrations on in-memory SQLite
          python -c "
          import sys
          sys.path.insert(0, './src')
          
          try:
              from crypto_ai_bot.core.infrastructure.storage.migrations.runner import MigrationRunner
              from crypto_ai_bot.core.infrastructure.storage.sqlite_adapter import SQLiteAdapter
              
              # Test migrations on in-memory database
              adapter = SQLiteAdapter(':memory:')
              runner = MigrationRunner(':memory:')
              runner.run_migrations()
              
              # Verify key tables exist
              adapter.execute('SELECT name FROM sqlite_master WHERE type=\"table\"')
              tables = [row[0] for row in adapter.fetchall()]
              
              required_tables = ['trades', 'positions', 'orders', 'audit', 'idempotency']
              missing_tables = [t for t in required_tables if t not in tables]
              
              if missing_tables:
                  raise Exception(f'Missing required tables: {missing_tables}')
              
              print('✅ Database migrations successful')
              print(f'✅ Created tables: {sorted(tables)}')
          except Exception as e:
              print(f'❌ Migration test failed: {e}')
              sys.exit(1)
          "

      - name: Risk Rules Validation
        run: |
          # Validate risk management system
          python -c "
          import sys, os
          sys.path.insert(0, './src')
          
          os.environ.setdefault('RISK_LOSS_STREAK_LIMIT', '3')
          os.environ.setdefault('RISK_MAX_DRAWDOWN_PCT', '5.0')
          os.environ.setdefault('RISK_MAX_SPREAD_PCT', '0.5')
          
          try:
              from crypto_ai_bot.core.domain.risk.manager import RiskManager
              from crypto_ai_bot.core.domain.risk.rules.loss_streak import LossStreakRule
              from crypto_ai_bot.core.domain.risk.rules.max_drawdown import MaxDrawdownRule
              from crypto_ai_bot.core.domain.risk.rules.spread_cap import SpreadCapRule
              
              # Test risk rules instantiation
              loss_streak = LossStreakRule()
              max_dd = MaxDrawdownRule()
              spread_cap = SpreadCapRule()
              risk_manager = RiskManager()
              
              print('✅ Risk management components loaded')
              
              # Test correlation manager
              from crypto_ai_bot.core.domain.risk.correlation_manager import CorrelationManager
              corr_mgr = CorrelationManager()
              
              print('✅ Risk system validation completed')
          except Exception as e:
              print(f'❌ Risk validation failed: {e}')
              sys.exit(1)
          "

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-type
    continue-on-error: true  # Don't block CI on security warnings

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit-report.json -ll || true
          bandit -r src/ -f txt || true

      - name: Safety Dependency Check
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Comprehensive testing
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-type, crypto-validation]
    strategy:
      matrix:
        test-suite: ["unit", "integration"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest-cov pytest-timeout

      - name: Run Unit Tests
        if: matrix.test-suite == 'unit'
        env:
          SYMBOLS: BTC/USDT
          MODE: paper
        run: |
          pytest tests/unit/ -v -W error --cov=crypto_ai_bot --cov-report=xml --cov-report=term-missing

      - name: Run Integration Tests  
        if: matrix.test-suite == 'integration'
        env:
          SYMBOLS: BTC/USDT
          MODE: paper
          EVENT_BUS_URL: ""  # Force in-memory bus
        run: |
          pytest tests/integration/ -v -W error --timeout=300 --cov=crypto_ai_bot --cov-report=xml

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite }}
          name: codecov-${{ matrix.test-suite }}
          fail_ci_if_error: false

  # Final validation - simulate production readiness
  production-readiness:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [crypto-validation, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Production Environment Simulation
        env:
          MODE: paper
          SYMBOLS: BTC/USDT,ETH/USDT
          STRATEGY_SET: ema_cross,rsi_momentum,bollinger_bands
          STRATEGY_MODE: first
          POSITION_SIZER: fractional
          STRAT_QUOTE_FRACTION: 0.05
          RISK_MAX_SPREAD_PCT: 0.5
          SAFETY_MAX_ORDERS_PER_DAY: 7
          TELEGRAM_ENABLED: 0
          EVENT_BUS_URL: ""
        run: |
          # Test production-like startup sequence
          python -c "
          import sys, asyncio, signal, time
          sys.path.insert(0, './src')
          
          async def test_startup():
              try:
                  from crypto_ai_bot.app.compose import create_app_dependencies
                  from crypto_ai_bot.core.application.orchestrator import Orchestrator
                  
                  # Initialize dependencies
                  deps = await create_app_dependencies()
                  print('✅ Dependencies created')
                  
                  # Test orchestrator startup
                  orchestrator = deps['orchestrator']
                  print('✅ Orchestrator ready')
                  
                  # Simulate brief run
                  await asyncio.sleep(2)
                  print('✅ Production simulation completed')
                  
              except Exception as e:
                  print(f'❌ Production simulation failed: {e}')
                  sys.exit(1)
          
          # Run with timeout
          asyncio.run(test_startup())
          "

      - name: Database Backup Test
        run: |
          # Test backup functionality
          python -c "
          import sys, tempfile, os
          sys.path.insert(0, './src')
          
          try:
              from crypto_ai_bot.core.infrastructure.storage.backup import create_backup
              
              with tempfile.NamedTemporaryFile(suffix='.sqlite3', delete=False) as tmp:
                  db_path = tmp.name
                  
              # Create minimal database
              from crypto_ai_bot.core.infrastructure.storage.sqlite_adapter import SQLiteAdapter
              adapter = SQLiteAdapter(db_path)
              adapter.execute('CREATE TABLE test (id INTEGER PRIMARY KEY)')
              adapter.close()
              
              # Test backup
              backup_path = create_backup(db_path)
              assert os.path.exists(backup_path), 'Backup file not created'
              
              # Cleanup
              os.unlink(db_path)
              os.unlink(backup_path)
              
              print('✅ Database backup functionality works')
          except Exception as e:
              print(f'❌ Backup test failed: {e}')
              sys.exit(1)
          "

      - name: CLI Tools Validation
        run: |
          # Test CLI entry points
          python -m crypto_ai_bot.cli.smoke --help > /dev/null
          python -m crypto_ai_bot.cli.maintenance --help > /dev/null  
          python -m crypto_ai_bot.cli.performance --help > /dev/null
          python -m crypto_ai_bot.cli.reconcile --help > /dev/null
          python -m crypto_ai_bot.cli.health_monitor --help > /dev/null
          echo "✅ CLI tools accessible"

  # Collect all results
  ci-success:
    runs-on: ubuntu-latest
    needs: [lint-and-type, crypto-validation, security, test, production-readiness]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Lint and Type: ${{ needs.lint-and-type.result }}"
          echo "Crypto Validation: ${{ needs.crypto-validation.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Production Readiness: ${{ needs.production-readiness.result }}"
          
          if [[ "${{ needs.lint-and-type.result }}" != "success" || 
                "${{ needs.crypto-validation.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Critical checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.production-readiness.result }}" != "success" && "${{ needs.production-readiness.result }}" != "skipped" ]]; then
            echo "❌ Production readiness failed"  
            exit 1
          fi
          
          echo "✅ All critical checks passed"